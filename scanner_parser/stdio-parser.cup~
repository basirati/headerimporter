
import java_cup.runtime.*;
import java.util.ArrayList;

parser code {:
   
	public CodeGenerator cg = new CodeGenerator();

    public void report_error(String message, Object info) {
   
       
        StringBuilder m = new StringBuilder("Error");
   
        if (info instanceof java_cup.runtime.Symbol) {
     
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {                
                       m.append(" in line "+(s.left+1));   
     
                if (s.right >= 0)                    
                       m.append(", column "+(s.right+1));
            }
        }
   
        m.append(" : "+message);
   
        System.err.println(m);
    }
   
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
:};
   


terminal		DEFINE, LBRACKET, RBRACKET, DOTS, PRE_ID, SEMI, PLUS, MINUS, STAR, DIVIDE, COMMA, LPAREN, RPAREN, EXTERN, TYPEDEF, STRUCT, LQ, RQ;

terminal Integer	NUMBER;
terminal String		ID;
   
non terminal Object     def_exp, expr_list, expr_part, expr, params, ident, value, defin, _struct, st_body, func, ident_funcpointer;
non terminal Integer	val_int;
non terminal String	val_str;
   
	expr_list	::=	expr_list expr_part
				|
				expr_part
				;

   
	expr_part	::= 	expr SEMI
				|
				DEFINE def_exp
				;

	def_exp	::=	ID:i value:v
			{:
			def_expr dx = new def_expr();
			dx.ID = i;
			dx.exp = v;
			parser.cg.defines.add(dx);
			:}
			|
			ID:i STRUCT val_str:v
			{:
			def_expr dx = new def_expr();
			dx.ID = i;
			dx.exp = v;
			dx.isStruct = true;
			parser.cg.defines.add(dx);
			:}
			;


	expr	::= 	EXTERN func:f
			{: parser.cg.declareFunc(); :}
			|
			EXTERN defin:d
			{: parser.cg.declareVar(); :}
			|
			TYPEDEF defin:d2
			{: parser.cg.declareTypedef_var(); :}
			|
			TYPEDEF STRUCT LQ st_body:s RQ ID:i
			{: parser.cg.declareTypedef_struct(i); :}
			|
			_struct:s
			{: parser.cg.declareStruct(); :}
			;

	func	::=	ident:e ID:e2 LPAREN 
			{: 
			parser.cg.f.setReturn_type(e);
			parser.cg.f.setID(e2);
			parser.cg.paramsowner = parser.cg.f;
			:}						
			params:p RPAREN
			{: 
			RESULT = e + " " + e2 + "(" + p + ");"; 
			:} 
			;
	

	_struct	::=	STRUCT ID:i LQ st_body:s RQ
			{: 
			parser.cg.s.setName(i);
			RESULT = "struct " + i + "{" + "\n" + s + "\n" + "};"; 
			:}
			;
	
	st_body	::=	defin:d SEMI
			{:
			parser.cg.s.addMember(parser.cg.dec);
		        parser.cg.dec = new var_decl(); 
			RESULT = d + ";"; 
			:}
			|
			st_body:s defin:d2 SEMI
			{:
			parser.cg.s.addMember(parser.cg.dec);
		        parser.cg.dec = new var_decl();  
			RESULT = s + "\n" + d2 + ";" ; 
			:}
			;
	
	defin ::=	ident:i ID:i2
			{: 
			parser.cg.dec.push(i);
			parser.cg.dec.push(i2);
			parser.cg.dec.push("");
			RESULT = i + " " + i2; 
			:}
			|
			ident:i3 ID:i4 LBRACKET value:v RBRACKET
			{: 
			parser.cg.dec.push(i3);
			parser.cg.dec.push(i4);
			parser.cg.dec.push("["+v+"]");
			RESULT = i3 + " " + i4 + "[" + v + "]"; 
			:}
			|
			ident:i5 ID:i6 LBRACKET RBRACKET
			{: 
			parser.cg.dec.push(i5);
			parser.cg.dec.push(i6);
			parser.cg.dec.push("[]");
			RESULT = i5 + " " + i6 + "[]"; 
			:}
			|
			ident:i7 LPAREN STAR ID:i8 RPAREN LPAREN
			{: 
			parser.cg.dec.push(i7+"*");
			parser.cg.dec.push(i8);
			func_decl funcp = new func_decl();
			funcp.setID(i8);
			funcp.setReturn_type(i7+"*");
			parser.cg.params_owners.push(parser.cg.paramsowner);
			parser.cg.paramsowner = funcp;  
			:}
			params:ps RPAREN
			{:
			func_decl funcp = parser.cg.paramsowner;
			funcp.pointer = true;
			parser.cg.dec.push(funcp);
			parser.cg.paramsowner = parser.cg.params_owners.pop();
			RESULT = i7 + " (*" + i8 + ")(" + ps + ")"; 
			:}
			;

	


	value	::=	val_str:v
			{: RESULT = v; :}
			|
			val_int:v
			{: RESULT = v; :}
			;

	val_str	::=	ID:i
			{: RESULT = i; :}
			;
			
	val_int	::=	NUMBER:n
			{: RESULT = n; :}
			|
			LPAREN val_int:v RPAREN
			{: RESULT = v; :}
			|
			MINUS val_int:v
			{: RESULT = -v; :}
			;
	

	params	::=	ident: p
			{: 
			parser.cg.paramsowner.pushParam(p);
			RESULT = p; 
			:}
			|
			ident:p2 COMMA params:ps
			{: 
			parser.cg.paramsowner.pushParam(p2);
			RESULT = p2 + " , " + ps; 
			:}
			|
			ident:p3 COMMA DOTS
			{:
			parser.cg.paramsowner.pushParam(p3);
			 RESULT = p3; 
			:}
			|
			ident_funcpointer:p4
			{:
			parser.cg.paramsowner.pushParam(p4);
			RESULT = p4; 
			:}
			|
			ident_funcpointer:p5 COMMA params:ps2
			{: 
			parser.cg.paramsowner.pushParam(p5);
			RESULT = p5 + " , " + ps2; 
			:}
			|
			{: RESULT = ""; :}
			;

	ident_funcpointer ::=
			ident:p4 LPAREN STAR RPAREN LPAREN 
			{:
			func_decl funcp = new func_decl();
			funcp.pointer = true;
			funcp.setReturn_type(p4);
			parser.cg.params_owners.push(parser.cg.paramsowner);
			parser.cg.paramsowner = funcp;  
			:}
			params:ps2 RPAREN
			{:
			func_decl funcp = parser.cg.paramsowner;
			funcp.pointer = true;
			parser.cg.paramsowner = parser.cg.params_owners.pop();
			RESULT = funcp;
			:}
			;

	ident	::=	ID:i
			{: RESULT = i; :}
			|			
			PRE_ID:i ID:i2
			{: RESULT = i + " " + i2; :}
			|
			PRE_ID:i PRE_ID:i2 ID:i3
			{: RESULT = i + " " + i2 + " " + i3; :}
			|
			ident:i STAR
			{: RESULT = i + "*"; :}
			|
			ident:i LBRACKET RBRACKET
			{: RESULT = i + "[]"; :}			
			|
			STRUCT ID:i
			{: RESULT = "struct " + i; :}
			;
			

