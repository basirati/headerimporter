/* The following code was generated by JFlex 1.5.1 */

  
import java_cup.runtime.*;
      

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.1
 * from the specification file <tt>stdio-scanner.flex</tt>
 */
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int MULTI_COMMENT = 2;
  public static final int MONO_COMMENT = 4;
  public static final int STRING = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\2\1\2\1\3\1\16\22\0\1\74\1\61\1\47"+
    "\1\10\1\0\1\53\1\56\1\0\1\42\1\43\1\31\1\50\1\44"+
    "\1\52\1\45\1\46\12\5\1\66\1\32\1\54\1\51\1\55\1\63"+
    "\1\0\7\6\1\35\6\6\1\37\2\6\1\36\1\6\1\34\2\6"+
    "\1\40\3\6\1\71\1\4\1\72\1\57\1\7\1\0\1\24\1\33"+
    "\1\20\1\11\1\12\1\13\1\25\1\73\1\14\2\6\1\21\1\26"+
    "\1\15\1\41\1\22\1\6\1\23\1\67\1\30\1\17\2\6\1\27"+
    "\1\70\1\6\1\64\1\60\1\65\1\62\6\0\1\2\u1fa2\0\1\2"+
    "\1\2\udfd6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\3\2\4\1\5\10\4\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\4\1\35"+
    "\1\36\1\1\1\37\2\40\1\41\1\4\5\0\13\4"+
    "\1\42\2\0\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\3\4\4\67"+
    "\1\0\1\70\3\0\6\4\1\71\6\4\1\0\1\72"+
    "\1\73\3\4\1\0\3\67\1\0\5\70\3\0\2\4"+
    "\1\74\1\75\4\4\1\76\1\77\1\4\1\100\3\4"+
    "\1\0\3\67\1\0\2\70\3\0\1\4\1\101\1\4"+
    "\1\102\1\103\1\100\1\0\3\4\1\104\4\67\1\0"+
    "\2\70\1\0\1\100\1\0\1\105\1\106\3\0\1\4"+
    "\1\107\1\0\3\67\1\110\1\111\1\70\1\0\2\100"+
    "\4\0\1\112\1\0\2\67\2\0\2\110\2\111\1\113"+
    "\1\114\2\0\1\115\2\0\1\67\1\0\2\113\2\114"+
    "\4\0\1\116\1\117\2\67\5\0\1\67\1\120\1\0"+
    "\1\67\1\0\1\121";

  private static int [] zzUnpackAction() {
    int [] result = new int[242];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\364\0\364\0\u0131\0\u016e"+
    "\0\u01ab\0\u01e8\0\u0225\0\u0262\0\u029f\0\u02dc\0\u0319\0\u0356"+
    "\0\u0393\0\u03d0\0\u040d\0\364\0\364\0\364\0\u044a\0\364"+
    "\0\u0487\0\364\0\u04c4\0\u0501\0\u053e\0\u057b\0\u05b8\0\u05f5"+
    "\0\u0632\0\u066f\0\u06ac\0\u06e9\0\364\0\364\0\364\0\364"+
    "\0\364\0\u0726\0\364\0\364\0\u0763\0\364\0\364\0\u07a0"+
    "\0\364\0\u07dd\0\u01e8\0\u081a\0\u0857\0\u0894\0\u08d1\0\u090e"+
    "\0\u094b\0\u0988\0\u09c5\0\u0a02\0\u0a3f\0\u0a7c\0\u0ab9\0\u0af6"+
    "\0\u0b33\0\u0b70\0\364\0\u044a\0\u0bad\0\364\0\364\0\364"+
    "\0\364\0\364\0\364\0\364\0\364\0\364\0\364\0\364"+
    "\0\u0bea\0\364\0\u0c27\0\364\0\364\0\364\0\364\0\364"+
    "\0\364\0\u0c64\0\u0ca1\0\u0cde\0\u0d1b\0\u0d58\0\u0d95\0\u0dd2"+
    "\0\u0e0f\0\u0e4c\0\u0e89\0\u0ec6\0\u0f03\0\u0f40\0\u0f7d\0\u0fba"+
    "\0\u0ff7\0\u1034\0\u1071\0\u016e\0\u10ae\0\u10eb\0\u1128\0\u1165"+
    "\0\u11a2\0\u11df\0\u121c\0\364\0\364\0\u1259\0\u1296\0\u12d3"+
    "\0\u1310\0\u134d\0\u138a\0\u13c7\0\u1404\0\u1441\0\u147e\0\u14bb"+
    "\0\u14f8\0\u1535\0\u1572\0\u15af\0\u15ec\0\u1629\0\u1666\0\u016e"+
    "\0\u016e\0\u16a3\0\u16e0\0\u171d\0\u175a\0\u016e\0\u1797\0\u17d4"+
    "\0\364\0\u1811\0\u184e\0\u188b\0\u18c8\0\u1905\0\u1942\0\u197f"+
    "\0\u19bc\0\u19f9\0\u1a36\0\u1a73\0\u1ab0\0\u1aed\0\u1b2a\0\u016e"+
    "\0\u1b67\0\u016e\0\u016e\0\u016e\0\u1ba4\0\u1be1\0\u1c1e\0\u1c5b"+
    "\0\u1c98\0\364\0\u1cd5\0\u1d12\0\u1d4f\0\u1d8c\0\u1dc9\0\u1e06"+
    "\0\u1e43\0\u1e80\0\u1ebd\0\u016e\0\u1efa\0\u1f37\0\u1f74\0\u1fb1"+
    "\0\u1fee\0\u016e\0\u202b\0\u2068\0\u20a5\0\u20e2\0\u211f\0\u215c"+
    "\0\u2199\0\u21d6\0\u2213\0\u2250\0\u228d\0\u22ca\0\u2307\0\u2344"+
    "\0\u016e\0\u2381\0\u23be\0\u23fb\0\u2438\0\u2475\0\u24b2\0\u24ef"+
    "\0\u252c\0\u2569\0\u25a6\0\u25e3\0\u2620\0\u265d\0\364\0\u269a"+
    "\0\u26d7\0\u2714\0\u2751\0\u278e\0\u27cb\0\u2808\0\u2845\0\u2882"+
    "\0\u28bf\0\u28fc\0\u2939\0\u2976\0\364\0\u29b3\0\u2438\0\u29f0"+
    "\0\u2a2d\0\u2a6a\0\u2aa7\0\u2ae4\0\u2b21\0\364\0\u2b5e\0\u2b9b"+
    "\0\u2bd8\0\364";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[242];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\3\6\1\5\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\10\1\6\1\17\1\20\1\21"+
    "\6\10\1\22\1\23\1\24\7\10\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\10\1\53\1\54\1\10\1\6"+
    "\16\5\1\0\12\5\1\55\45\5\2\56\12\5\1\0"+
    "\56\5\2\57\2\0\1\60\11\57\1\0\30\57\1\61"+
    "\25\57\102\0\1\7\74\0\3\10\1\0\5\10\1\0"+
    "\12\10\2\0\7\10\25\0\2\10\2\0\1\10\6\0"+
    "\2\10\1\62\1\0\5\10\1\0\12\10\2\0\7\10"+
    "\25\0\2\10\2\0\1\10\2\0\1\63\1\0\1\63"+
    "\5\0\1\64\2\0\1\65\1\0\1\63\1\66\2\0"+
    "\1\67\51\0\1\63\5\0\3\10\1\0\5\10\1\0"+
    "\12\10\2\0\6\10\1\70\25\0\2\10\2\0\1\10"+
    "\6\0\3\10\1\0\4\10\1\71\1\0\2\10\1\72"+
    "\5\10\1\73\1\10\2\0\7\10\25\0\2\10\2\0"+
    "\1\10\6\0\3\10\1\0\5\10\1\0\2\10\1\74"+
    "\7\10\2\0\7\10\25\0\2\10\2\0\1\10\6\0"+
    "\3\10\1\0\4\10\1\75\1\0\12\10\2\0\7\10"+
    "\25\0\2\10\2\0\1\10\6\0\3\10\1\0\4\10"+
    "\1\76\1\0\12\10\2\0\7\10\25\0\2\10\2\0"+
    "\1\10\6\0\3\10\1\0\5\10\1\0\12\10\2\0"+
    "\6\10\1\77\25\0\2\10\2\0\1\100\6\0\3\10"+
    "\1\0\5\10\1\0\12\10\2\0\6\10\1\101\25\0"+
    "\2\10\2\0\1\10\6\0\3\10\1\0\5\10\1\0"+
    "\12\10\2\0\7\10\25\0\1\10\1\102\2\0\1\10"+
    "\52\0\1\103\24\0\1\104\1\0\1\104\12\0\1\104"+
    "\26\0\1\105\26\0\1\104\31\0\1\106\14\0\1\107"+
    "\2\0\1\110\73\0\1\111\1\112\74\0\1\113\74\0"+
    "\1\114\1\115\2\0\1\116\70\0\1\117\74\0\1\120"+
    "\2\0\1\121\71\0\1\122\3\0\1\123\70\0\1\124"+
    "\4\0\1\125\67\0\1\126\74\0\1\127\6\0\1\130"+
    "\65\0\1\131\30\0\3\10\1\0\3\10\1\132\1\10"+
    "\1\0\11\10\1\133\2\0\7\10\25\0\2\10\2\0"+
    "\1\134\47\0\1\56\75\0\1\57\32\0\1\10\2\135"+
    "\1\0\4\135\1\136\1\0\5\135\1\137\4\135\2\0"+
    "\1\135\1\140\5\135\25\0\2\135\2\0\1\135\13\0"+
    "\1\141\75\0\1\142\1\0\1\143\74\0\1\144\102\0"+
    "\1\145\56\0\3\10\1\0\5\10\1\0\1\146\11\10"+
    "\2\0\7\10\25\0\2\10\2\0\1\10\6\0\3\10"+
    "\1\0\1\147\4\10\1\0\1\150\11\10\2\0\7\10"+
    "\25\0\2\10\2\0\1\10\6\0\3\10\1\0\5\10"+
    "\1\0\12\10\2\0\7\10\25\0\1\151\1\10\2\0"+
    "\1\10\6\0\3\10\1\0\5\10\1\0\11\10\1\152"+
    "\2\0\7\10\25\0\2\10\2\0\1\10\6\0\3\10"+
    "\1\0\5\10\1\0\12\10\2\0\6\10\1\153\25\0"+
    "\2\10\2\0\1\10\6\0\3\10\1\0\5\10\1\0"+
    "\11\10\1\154\2\0\7\10\25\0\2\10\2\0\1\10"+
    "\6\0\3\10\1\0\3\10\1\155\1\10\1\0\12\10"+
    "\2\0\7\10\25\0\1\156\1\10\2\0\1\10\6\0"+
    "\3\10\1\0\4\10\1\157\1\0\12\10\2\0\7\10"+
    "\25\0\2\10\2\0\1\10\6\0\3\10\1\0\5\10"+
    "\1\0\5\10\1\160\4\10\2\0\7\10\25\0\2\10"+
    "\2\0\1\10\6\0\3\10\1\0\4\10\1\161\1\0"+
    "\12\10\2\0\7\10\25\0\2\10\2\0\1\10\6\0"+
    "\3\10\1\0\5\10\1\0\3\10\1\162\6\10\2\0"+
    "\7\10\25\0\2\10\2\0\1\10\46\0\1\163\100\0"+
    "\1\164\74\0\1\165\30\0\3\10\1\0\5\10\1\0"+
    "\6\10\1\166\3\10\2\0\7\10\25\0\2\10\2\0"+
    "\1\10\6\0\3\10\1\0\5\10\1\0\4\10\1\167"+
    "\5\10\2\0\7\10\25\0\2\10\2\0\1\10\6\0"+
    "\3\10\1\0\5\10\1\0\12\10\2\0\6\10\1\170"+
    "\25\0\2\10\2\0\1\10\6\0\3\135\1\0\5\135"+
    "\1\0\12\135\2\0\7\135\1\171\24\0\2\135\2\0"+
    "\1\135\6\0\3\135\1\0\5\135\1\0\12\135\2\0"+
    "\6\135\1\172\1\171\24\0\2\135\2\0\1\135\6\0"+
    "\3\135\1\0\5\135\1\0\11\135\1\173\2\0\7\135"+
    "\1\171\24\0\2\135\2\0\1\135\6\0\3\135\1\0"+
    "\5\135\1\0\12\135\2\0\2\135\1\174\4\135\1\171"+
    "\24\0\2\135\2\0\1\135\14\0\1\175\61\0\1\176"+
    "\1\177\1\0\1\177\1\200\4\176\1\201\3\176\1\202"+
    "\1\177\55\176\1\177\20\0\1\203\65\0\1\204\107\0"+
    "\1\205\55\0\3\10\1\0\5\10\1\0\12\10\2\0"+
    "\1\206\6\10\25\0\2\10\2\0\1\10\6\0\3\10"+
    "\1\0\3\10\1\207\1\10\1\0\12\10\2\0\7\10"+
    "\25\0\2\10\2\0\1\10\6\0\3\10\1\0\5\10"+
    "\1\0\7\10\1\210\2\10\2\0\7\10\25\0\2\10"+
    "\2\0\1\10\6\0\3\10\1\0\1\10\1\211\3\10"+
    "\1\0\12\10\2\0\7\10\25\0\2\10\2\0\1\10"+
    "\6\0\3\10\1\0\1\10\1\212\3\10\1\0\12\10"+
    "\2\0\7\10\25\0\2\10\2\0\1\10\6\0\3\10"+
    "\1\0\5\10\1\0\5\10\1\213\4\10\2\0\7\10"+
    "\25\0\2\10\2\0\1\10\6\0\3\10\1\0\5\10"+
    "\1\0\12\10\2\0\6\10\1\214\25\0\2\10\2\0"+
    "\1\10\6\0\3\10\1\0\3\10\1\132\1\10\1\0"+
    "\12\10\2\0\7\10\25\0\2\10\2\0\1\10\6\0"+
    "\3\10\1\0\5\10\1\0\12\10\2\0\7\10\25\0"+
    "\1\215\1\10\2\0\1\10\6\0\3\10\1\0\5\10"+
    "\1\0\4\10\1\216\5\10\2\0\7\10\25\0\2\10"+
    "\2\0\1\10\6\0\3\10\1\0\5\10\1\0\6\10"+
    "\1\217\3\10\2\0\7\10\25\0\2\10\2\0\1\10"+
    "\6\0\3\10\1\0\1\10\1\220\3\10\1\0\12\10"+
    "\2\0\7\10\25\0\2\10\2\0\1\10\46\0\1\221"+
    "\34\0\3\10\1\0\4\10\1\222\1\0\12\10\2\0"+
    "\7\10\25\0\2\10\2\0\1\10\6\0\3\10\1\0"+
    "\5\10\1\0\1\223\11\10\2\0\7\10\25\0\2\10"+
    "\2\0\1\10\6\0\3\10\1\0\5\10\1\0\4\10"+
    "\1\224\5\10\2\0\7\10\25\0\2\10\2\0\1\10"+
    "\7\0\2\225\1\0\5\225\1\0\12\225\2\0\7\225"+
    "\25\0\2\225\2\0\1\225\6\0\3\135\1\0\4\135"+
    "\1\226\1\0\12\135\2\0\7\135\1\171\24\0\2\135"+
    "\2\0\1\135\6\0\3\135\1\0\5\135\1\0\11\135"+
    "\1\227\2\0\7\135\1\171\24\0\2\135\2\0\1\135"+
    "\6\0\3\135\1\0\5\135\1\0\12\135\2\0\3\135"+
    "\1\230\3\135\1\171\24\0\2\135\2\0\1\135\15\0"+
    "\1\231\60\0\2\176\2\0\1\200\11\176\1\0\57\176"+
    "\1\177\1\0\1\177\1\200\11\176\1\177\55\176\1\177"+
    "\4\176\1\200\11\176\1\0\60\176\2\0\1\200\5\176"+
    "\1\232\3\176\1\0\60\176\2\0\1\200\4\176\1\233"+
    "\4\176\1\0\56\176\21\0\1\234\65\0\1\235\107\0"+
    "\1\236\54\0\3\10\1\0\5\10\1\0\2\10\1\237"+
    "\7\10\2\0\7\10\25\0\2\10\2\0\1\10\6\0"+
    "\3\10\1\0\2\10\1\240\2\10\1\0\12\10\2\0"+
    "\7\10\25\0\2\10\2\0\1\10\6\0\3\10\1\0"+
    "\5\10\1\0\4\10\1\241\5\10\2\0\7\10\25\0"+
    "\2\10\2\0\1\10\6\0\3\10\1\0\5\10\1\0"+
    "\11\10\1\242\2\0\7\10\25\0\2\10\2\0\1\10"+
    "\6\0\3\10\1\0\4\10\1\243\1\0\12\10\2\0"+
    "\7\10\25\0\2\10\2\0\1\10\6\0\3\10\1\0"+
    "\5\10\1\0\11\10\1\244\2\0\7\10\25\0\2\10"+
    "\2\0\1\10\6\0\3\10\1\0\5\10\1\0\12\10"+
    "\2\0\7\10\25\0\2\10\2\0\1\10\1\245\5\0"+
    "\3\10\1\0\1\246\4\10\1\0\12\10\2\0\7\10"+
    "\25\0\2\10\2\0\1\10\6\0\3\10\1\0\1\10"+
    "\1\247\3\10\1\0\12\10\2\0\7\10\25\0\2\10"+
    "\2\0\1\10\6\0\3\10\1\0\5\10\1\0\1\10"+
    "\1\250\10\10\2\0\7\10\25\0\2\10\2\0\1\10"+
    "\6\0\3\10\1\0\5\10\1\0\11\10\1\251\2\0"+
    "\7\10\25\0\2\10\2\0\1\10\6\0\3\225\1\0"+
    "\5\225\1\0\12\225\2\0\7\225\1\0\1\252\23\0"+
    "\2\225\2\0\1\225\6\0\3\135\1\0\4\135\1\253"+
    "\1\0\12\135\2\0\7\135\1\171\24\0\2\135\2\0"+
    "\1\135\6\0\3\135\1\0\5\135\1\0\4\135\1\254"+
    "\5\135\2\0\7\135\1\171\24\0\2\135\2\0\1\135"+
    "\6\0\3\135\1\0\5\135\1\0\12\135\2\0\4\135"+
    "\1\255\2\135\1\171\24\0\2\135\2\0\1\135\16\0"+
    "\1\256\57\0\2\176\2\0\1\200\6\176\1\257\2\176"+
    "\1\0\60\176\2\0\1\200\5\176\1\260\3\176\1\0"+
    "\56\176\17\0\1\261\70\0\1\262\107\0\1\263\53\0"+
    "\3\10\1\0\1\10\1\264\3\10\1\0\12\10\2\0"+
    "\7\10\25\0\2\10\2\0\1\10\6\0\3\10\1\0"+
    "\4\10\1\265\1\0\12\10\2\0\7\10\25\0\2\10"+
    "\2\0\1\10\12\0\1\266\2\0\1\267\4\0\1\270"+
    "\60\0\3\10\1\0\1\10\1\271\3\10\1\0\12\10"+
    "\2\0\7\10\25\0\2\10\2\0\1\10\6\0\3\10"+
    "\1\0\1\272\4\10\1\0\12\10\2\0\7\10\25\0"+
    "\2\10\2\0\1\10\6\0\3\10\1\0\5\10\1\0"+
    "\11\10\1\243\2\0\7\10\25\0\2\10\2\0\1\10"+
    "\6\0\3\10\1\0\5\10\1\0\12\10\2\0\7\10"+
    "\25\0\2\10\2\0\1\10\1\273\5\0\3\135\1\0"+
    "\5\135\1\0\1\274\11\135\2\0\7\135\1\171\24\0"+
    "\2\135\2\0\1\135\6\0\3\135\1\0\3\135\1\275"+
    "\1\135\1\0\12\135\2\0\7\135\1\171\24\0\2\135"+
    "\2\0\1\135\6\0\3\135\1\0\5\135\1\0\12\135"+
    "\2\0\5\135\1\276\1\135\1\171\24\0\2\135\2\0"+
    "\1\135\13\0\1\277\62\0\1\176\1\257\1\0\1\300"+
    "\1\200\11\176\1\300\55\176\1\257\2\176\2\0\1\200"+
    "\6\176\1\301\2\176\1\0\56\176\11\0\1\302\63\0"+
    "\1\303\1\262\1\0\1\262\1\304\11\303\1\262\55\303"+
    "\1\262\24\0\1\262\51\0\1\305\1\0\1\305\1\0"+
    "\3\10\1\0\5\10\1\305\12\10\2\0\7\10\25\0"+
    "\2\10\2\0\1\10\1\305\41\0\1\306\50\0\1\307"+
    "\120\0\1\310\40\0\3\10\1\0\2\10\1\311\2\10"+
    "\1\0\12\10\2\0\7\10\25\0\2\10\2\0\1\10"+
    "\15\0\1\312\65\0\3\135\1\0\5\135\1\0\2\135"+
    "\1\313\7\135\2\0\7\135\1\171\24\0\2\135\2\0"+
    "\1\135\6\0\3\135\1\0\5\135\1\0\12\135\2\0"+
    "\1\314\6\135\1\171\24\0\2\135\2\0\1\135\1\0"+
    "\5\315\3\276\1\315\5\276\1\315\12\276\1\315\1\24"+
    "\7\276\1\316\24\315\2\276\2\315\1\276\1\315\1\317"+
    "\1\277\1\0\1\277\1\320\11\317\1\277\55\317\1\277"+
    "\1\321\1\300\1\0\1\300\1\322\11\321\1\300\55\321"+
    "\1\300\1\176\1\301\1\0\1\323\1\200\11\176\1\323"+
    "\55\176\1\301\12\0\1\324\62\0\2\303\2\0\1\304"+
    "\11\303\1\0\62\303\1\304\11\303\1\0\56\303\6\0"+
    "\2\325\1\0\5\325\1\0\12\325\2\0\7\325\25\0"+
    "\2\325\2\0\1\325\20\0\1\326\105\0\1\327\61\0"+
    "\1\330\74\0\1\331\64\0\3\135\1\0\5\135\1\0"+
    "\2\135\1\276\7\135\2\0\7\135\1\171\24\0\2\135"+
    "\2\0\1\135\6\0\3\135\1\0\5\135\1\0\1\332"+
    "\11\135\2\0\7\135\1\171\24\0\2\135\2\0\1\135"+
    "\1\0\32\315\1\24\50\315\2\333\1\315\5\333\1\315"+
    "\12\333\1\315\1\24\7\333\25\315\2\333\2\315\1\333"+
    "\1\315\2\317\2\0\1\320\11\317\1\0\62\317\1\320"+
    "\11\317\1\0\56\317\2\321\2\0\1\322\11\321\1\0"+
    "\62\321\1\322\11\321\1\0\56\321\1\334\1\323\1\0"+
    "\1\323\1\335\11\334\1\323\55\334\1\323\1\336\1\324"+
    "\1\0\1\324\1\337\11\336\1\324\55\336\1\324\1\0"+
    "\1\340\1\0\1\340\1\0\2\325\1\341\1\0\5\325"+
    "\1\340\12\325\1\342\1\0\7\325\25\0\2\325\2\0"+
    "\1\325\1\340\33\0\1\343\66\0\1\344\77\0\1\345"+
    "\51\0\3\135\1\0\5\135\1\0\11\135\1\346\2\0"+
    "\7\135\1\171\24\0\2\135\2\0\1\135\1\0\5\315"+
    "\3\333\1\315\5\333\1\315\12\333\1\315\1\24\7\333"+
    "\1\315\1\347\23\315\2\333\2\315\1\333\1\315\2\334"+
    "\2\0\1\335\11\334\1\0\62\334\1\335\11\334\1\0"+
    "\56\334\2\336\2\0\1\337\11\336\1\0\62\336\1\337"+
    "\11\336\1\0\56\336\1\0\1\340\1\0\1\340\3\0"+
    "\1\350\6\0\1\340\12\0\1\342\42\0\1\340\1\0"+
    "\1\340\1\0\1\340\1\0\2\325\1\351\1\0\5\325"+
    "\1\340\12\325\1\342\1\0\7\325\25\0\2\325\2\0"+
    "\1\325\1\340\1\0\1\352\1\0\1\352\3\0\1\350"+
    "\6\0\1\352\12\0\1\342\42\0\1\352\21\0\1\353"+
    "\147\0\1\354\5\0\3\135\1\0\1\135\1\355\3\135"+
    "\1\0\12\135\2\0\7\135\1\171\24\0\2\135\2\0"+
    "\1\135\10\0\1\351\65\0\32\351\1\221\42\351\1\0"+
    "\1\352\1\0\1\352\3\0\1\350\6\0\1\352\55\0"+
    "\1\352\12\0\1\356\76\0\1\357\65\0\2\135\1\360"+
    "\1\0\5\135\1\0\12\135\2\0\7\135\1\171\24\0"+
    "\2\135\2\0\1\135\16\0\1\361\64\0\2\135\1\276"+
    "\1\0\5\135\1\0\12\135\2\0\7\135\1\171\24\0"+
    "\2\135\2\0\1\135\31\0\1\362\44\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11285];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\2\11\15\1\3\11\1\1\1\11\1\1\1\11"+
    "\12\1\5\11\1\1\2\11\1\1\2\11\1\1\1\11"+
    "\1\1\5\0\13\1\1\11\2\0\13\11\1\1\1\11"+
    "\1\1\6\11\7\1\1\0\1\1\3\0\15\1\1\0"+
    "\2\11\3\1\1\0\3\1\1\0\5\1\3\0\13\1"+
    "\1\11\3\1\1\0\3\1\1\0\2\1\3\0\6\1"+
    "\1\0\4\1\1\11\3\1\1\0\2\1\1\0\1\1"+
    "\1\0\2\1\3\0\2\1\1\0\6\1\1\0\2\1"+
    "\4\0\1\1\1\0\2\1\2\0\6\1\2\0\1\11"+
    "\2\0\1\1\1\0\4\1\4\0\1\1\1\11\2\1"+
    "\5\0\1\1\1\11\1\0\1\1\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[242];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }
    
    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }

    public StringBuilder tmpString;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 164) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { 
          }
        case 82: break;
        case 2: 
          { /* skipping */
          }
        case 83: break;
        case 3: 
          { return symbol(sym.NUMBER, new Integer(yytext()));
          }
        case 84: break;
        case 4: 
          { return symbol(sym.ID, new String(yytext()));
          }
        case 85: break;
        case 5: 
          { return symbol(sym.SHARP);
          }
        case 86: break;
        case 6: 
          { return symbol(sym.STAR);
          }
        case 87: break;
        case 7: 
          { return symbol(sym.SEMI);
          }
        case 88: break;
        case 8: 
          { return symbol(sym.LPAREN);
          }
        case 89: break;
        case 9: 
          { return symbol(sym.RPAREN);
          }
        case 90: break;
        case 10: 
          { return symbol(sym.COMMA);
          }
        case 91: break;
        case 11: 
          { return symbol(sym.DOT);
          }
        case 92: break;
        case 12: 
          { return symbol(sym.DIVIDE);
          }
        case 93: break;
        case 13: 
          { tmpString = new StringBuilder();
			tmpString.append('"');
			yybegin(STRING);
          }
        case 94: break;
        case 14: 
          { return symbol(sym.PLUS);
          }
        case 95: break;
        case 15: 
          { return symbol(sym.ASSIGN);
          }
        case 96: break;
        case 16: 
          { return symbol(sym.MINUS);
          }
        case 97: break;
        case 17: 
          { return symbol(sym.PERCENT);
          }
        case 98: break;
        case 18: 
          { return symbol(sym.LESS);
          }
        case 99: break;
        case 19: 
          { return symbol(sym.GREATER);
          }
        case 100: break;
        case 20: 
          { return symbol(sym.AMPERSAND);
          }
        case 101: break;
        case 21: 
          { return symbol(sym.HAT);
          }
        case 102: break;
        case 22: 
          { return symbol(sym.BAR);
          }
        case 103: break;
        case 23: 
          { return symbol(sym.BARDOT);
          }
        case 104: break;
        case 24: 
          { return symbol(sym.TILDE);
          }
        case 105: break;
        case 25: 
          { return symbol(sym.QUESTIONMARK);
          }
        case 106: break;
        case 26: 
          { return symbol(sym.LQ);
          }
        case 107: break;
        case 27: 
          { return symbol(sym.RQ);
          }
        case 108: break;
        case 28: 
          { return symbol(sym.COLON);
          }
        case 109: break;
        case 29: 
          { return symbol(sym.LBRACKET);
          }
        case 110: break;
        case 30: 
          { return symbol(sym.RBRACKET);
          }
        case 111: break;
        case 31: 
          { yybegin(YYINITIAL);
          }
        case 112: break;
        case 32: 
          { tmpString.append(yytext());
          }
        case 113: break;
        case 33: 
          { yybegin(YYINITIAL);
                     tmpString.append('"');
          }
        case 114: break;
        case 34: 
          { return symbol(sym.STAREQ);
          }
        case 115: break;
        case 35: 
          { yybegin(MULTI_COMMENT);
          }
        case 116: break;
        case 36: 
          { yybegin(MONO_COMMENT);
          }
        case 117: break;
        case 37: 
          { return symbol(sym.DIVIDEQ);
          }
        case 118: break;
        case 38: 
          { return symbol(sym.PP);
          }
        case 119: break;
        case 39: 
          { return symbol(sym.PLUSEQ);
          }
        case 120: break;
        case 40: 
          { return symbol(sym.EQUAL);
          }
        case 121: break;
        case 41: 
          { return symbol(sym.MINUSEQ);
          }
        case 122: break;
        case 42: 
          { return symbol(sym.MM);
          }
        case 123: break;
        case 43: 
          { return symbol(sym.PREF);
          }
        case 124: break;
        case 44: 
          { return symbol(sym.PERCENTEQ);
          }
        case 125: break;
        case 45: 
          { return symbol(sym.LE);
          }
        case 126: break;
        case 46: 
          { return symbol(sym.LL);
          }
        case 127: break;
        case 47: 
          { return symbol(sym.GE);
          }
        case 128: break;
        case 48: 
          { return symbol(sym.GG);
          }
        case 129: break;
        case 49: 
          { return symbol(sym.AMPERSANDEQ);
          }
        case 130: break;
        case 50: 
          { return symbol(sym.AND);
          }
        case 131: break;
        case 51: 
          { return symbol(sym.HATEQ);
          }
        case 132: break;
        case 52: 
          { return symbol(sym.BAREQ);
          }
        case 133: break;
        case 53: 
          { return symbol(sym.OR);
          }
        case 134: break;
        case 54: 
          { return symbol(sym.NOTEQUAL);
          }
        case 135: break;
        case 55: 
          { return symbol(sym.COMPWORD, new String(yytext()));
          }
        case 136: break;
        case 56: 
          { return symbol(sym.IF, new String(yytext()));
          }
        case 137: break;
        case 57: 
          { return symbol(sym.INT);
          }
        case 138: break;
        case 58: 
          { return symbol(sym.LLEQ);
          }
        case 139: break;
        case 59: 
          { return symbol(sym.GGEQ);
          }
        case 140: break;
        case 60: 
          { return symbol(sym.ENUMM);
          }
        case 141: break;
        case 61: 
          { return symbol(sym.ELSE);
          }
        case 142: break;
        case 62: 
          { return symbol(sym.CHAR);
          }
        case 143: break;
        case 63: 
          { return symbol(sym.LONG);
          }
        case 144: break;
        case 64: 
          { /*DO NOTHING*/
          }
        case 145: break;
        case 65: 
          { return symbol(sym.ENDIF);
          }
        case 146: break;
        case 66: 
          { return symbol(sym.FLOAT);
          }
        case 147: break;
        case 67: 
          { return symbol(sym.STRUCT);
          }
        case 148: break;
        case 68: 
          { return symbol(sym.SHORT);
          }
        case 149: break;
        case 69: 
          { return symbol(sym.DOUBLE);
          }
        case 150: break;
        case 70: 
          { return symbol(sym.EXTERN);
          }
        case 151: break;
        case 71: 
          { return symbol(sym.UN_SIGNED, new String(yytext()));
          }
        case 152: break;
        case 72: 
          { return symbol(sym.DEFINE, new String(yytext()));
          }
        case 153: break;
        case 73: 
          { return symbol(sym.IFDEF, new String(yytext()));
          }
        case 154: break;
        case 74: 
          { return symbol(sym.TYPEDEF);
          }
        case 155: break;
        case 75: 
          { return symbol(sym.IFNDEF, new String(yytext()));
          }
        case 156: break;
        case 76: 
          { return symbol(sym.INCLUDE);
          }
        case 157: break;
        case 77: 
          { return symbol(sym.LINT);
          }
        case 158: break;
        case 78: 
          { return symbol(sym.LLONG);
          }
        case 159: break;
        case 79: 
          { return symbol(sym.SINT);
          }
        case 160: break;
        case 80: 
          { return symbol(sym.LDOUBLE);
          }
        case 161: break;
        case 81: 
          { return symbol(sym.LLINT);
          }
        case 162: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
