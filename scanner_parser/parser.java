
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Dec 16 16:50:33 CET 2014
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Dec 16 16:50:33 CET 2014
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\071\000\002\003\004\000\002\002\004\000\002\003" +
    "\003\000\002\004\003\000\002\004\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\011\000\002\026\002\000" +
    "\002\004\011\000\002\004\003\000\002\004\003\000\002" +
    "\004\010\000\002\004\006\000\002\022\004\000\002\022" +
    "\004\000\002\022\003\000\002\022\003\000\002\027\002" +
    "\000\002\010\010\000\002\007\004\000\002\007\003\000" +
    "\002\007\004\000\002\007\005\000\002\006\004\000\002" +
    "\006\005\000\002\006\006\000\002\030\002\000\002\006" +
    "\013\000\002\005\003\000\002\005\005\000\002\005\005" +
    "\000\002\005\003\000\002\005\005\000\002\005\002\000" +
    "\002\031\002\000\002\011\012\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\004\000\002" +
    "\024\004\000\002\024\004\000\002\023\003\000\002\023" +
    "\005\000\002\023\006\000\002\023\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\153\000\026\004\004\006\007\044\013\045\012\046" +
    "\010\105\006\106\017\107\014\110\020\111\016\001\002" +
    "\000\030\002\ufffe\004\ufffe\006\ufffe\044\ufffe\045\ufffe\046" +
    "\ufffe\105\ufffe\106\ufffe\107\ufffe\110\ufffe\111\ufffe\001\002" +
    "\000\030\002\uffff\004\uffff\006\uffff\044\uffff\045\uffff\046" +
    "\uffff\105\uffff\106\uffff\107\uffff\110\uffff\111\uffff\001\002" +
    "\000\004\113\155\001\002\000\030\002\ufff7\004\ufff7\006" +
    "\ufff7\044\ufff7\045\ufff7\046\ufff7\105\ufff7\106\ufff7\107\ufff7" +
    "\110\ufff7\111\ufff7\001\002\000\004\113\ufff9\001\002\000" +
    "\030\002\146\004\004\006\007\044\013\045\012\046\010" +
    "\105\006\106\017\107\014\110\020\111\016\001\002\000" +
    "\040\046\125\054\050\055\031\056\045\057\046\062\034" +
    "\063\033\064\043\065\042\066\052\067\040\070\044\071" +
    "\053\072\030\113\041\001\002\000\040\046\032\054\050" +
    "\055\031\056\045\057\046\062\034\063\033\064\043\065" +
    "\042\066\052\067\040\070\044\071\053\072\030\113\041" +
    "\001\002\000\066\002\ufff1\004\ufff1\006\ufff1\044\ufff1\045" +
    "\ufff1\046\ufff1\050\ufff1\054\ufff1\055\ufff1\056\ufff1\057\ufff1" +
    "\062\ufff1\063\ufff1\064\ufff1\065\ufff1\066\ufff1\067\ufff1\070" +
    "\ufff1\071\ufff1\072\ufff1\105\ufff1\106\ufff1\107\ufff1\110\ufff1" +
    "\111\ufff1\113\ufff1\001\002\000\030\002\ufff6\004\ufff6\006" +
    "\ufff6\044\ufff6\045\ufff6\046\ufff6\105\ufff6\106\ufff6\107\ufff6" +
    "\110\ufff6\111\ufff6\001\002\000\004\017\022\001\002\000" +
    "\004\113\021\001\002\000\066\002\ufff0\004\ufff0\006\ufff0" +
    "\044\ufff0\045\ufff0\046\ufff0\050\ufff0\054\ufff0\055\ufff0\056" +
    "\ufff0\057\ufff0\062\ufff0\063\ufff0\064\ufff0\065\ufff0\066\ufff0" +
    "\067\ufff0\070\ufff0\071\ufff0\072\ufff0\105\ufff0\106\ufff0\107" +
    "\ufff0\110\ufff0\111\ufff0\113\ufff0\001\002\000\066\002\ufff2" +
    "\004\ufff2\006\ufff2\044\ufff2\045\ufff2\046\ufff2\050\ufff2\054" +
    "\ufff2\055\ufff2\056\ufff2\057\ufff2\062\ufff2\063\ufff2\064\ufff2" +
    "\065\ufff2\066\ufff2\067\ufff2\070\ufff2\071\ufff2\072\ufff2\105" +
    "\ufff2\106\ufff2\107\ufff2\110\ufff2\111\ufff2\113\ufff2\001\002" +
    "\000\004\113\023\001\002\000\006\012\025\016\024\001" +
    "\002\000\030\002\ufff4\004\ufff4\006\ufff4\044\ufff4\045\ufff4" +
    "\046\ufff4\105\ufff4\106\ufff4\107\ufff4\110\ufff4\111\ufff4\001" +
    "\002\000\004\113\026\001\002\000\004\016\027\001\002" +
    "\000\030\002\ufff5\004\ufff5\006\ufff5\044\ufff5\045\ufff5\046" +
    "\ufff5\105\ufff5\106\ufff5\107\ufff5\110\ufff5\111\ufff5\001\002" +
    "\000\016\007\uffd2\037\uffd2\041\uffd2\042\uffd2\043\uffd2\113" +
    "\uffd2\001\002\000\016\007\uffd7\037\uffd7\041\uffd7\042\uffd7" +
    "\043\uffd7\113\uffd7\001\002\000\004\113\124\001\002\000" +
    "\016\007\uffdb\037\uffdb\041\uffdb\042\uffdb\043\uffdb\113\uffdb" +
    "\001\002\000\016\007\uffdc\037\uffdc\041\uffdc\042\uffdc\043" +
    "\uffdc\113\uffdc\001\002\000\012\007\067\037\065\042\066" +
    "\113\064\001\002\000\006\007\060\034\057\001\002\000" +
    "\004\034\056\001\002\000\016\007\uffd5\037\uffd5\041\uffd5" +
    "\042\uffd5\043\uffd5\113\uffd5\001\002\000\016\007\uffd0\037" +
    "\uffd0\041\uffd0\042\uffd0\043\uffd0\113\uffd0\001\002\000\016" +
    "\007\uffd9\037\uffd9\041\uffd9\042\uffd9\043\uffd9\113\uffd9\001" +
    "\002\000\016\007\uffda\037\uffda\041\uffda\042\uffda\043\uffda" +
    "\113\uffda\001\002\000\016\007\uffd4\037\uffd4\041\uffd4\042" +
    "\uffd4\043\uffd4\113\uffd4\001\002\000\040\046\032\054\050" +
    "\055\031\056\045\057\046\062\034\063\033\064\043\065" +
    "\042\066\052\067\040\070\044\071\053\072\030\113\041" +
    "\001\002\000\040\046\032\054\050\055\031\056\045\057" +
    "\046\062\034\063\033\064\043\065\042\066\052\067\040" +
    "\070\044\071\053\072\030\113\041\001\002\000\016\007" +
    "\uffcc\037\uffcc\041\uffcc\042\uffcc\043\uffcc\113\uffcc\001\002" +
    "\000\016\007\uffd8\037\uffd8\041\uffd8\042\uffd8\043\uffd8\113" +
    "\uffd8\001\002\000\016\007\uffd1\037\uffd1\041\uffd1\042\uffd1" +
    "\043\uffd1\113\uffd1\001\002\000\016\007\uffd6\037\uffd6\041" +
    "\uffd6\042\uffd6\043\uffd6\113\uffd6\001\002\000\016\007\uffd3" +
    "\037\uffd3\041\uffd3\042\uffd3\043\uffd3\113\uffd3\001\002\000" +
    "\016\007\uffcd\037\uffcd\041\uffcd\042\uffcd\043\uffcd\113\uffcd" +
    "\001\002\000\016\007\uffce\037\uffce\041\uffce\042\uffce\043" +
    "\uffce\113\uffce\001\002\000\030\002\ufffd\004\ufffd\006\ufffd" +
    "\044\ufffd\045\ufffd\046\ufffd\105\ufffd\106\ufffd\107\ufffd\110" +
    "\ufffd\111\ufffd\001\002\000\030\002\ufffc\004\ufffc\006\ufffc" +
    "\044\ufffc\045\ufffc\046\ufffc\105\ufffc\106\ufffc\107\ufffc\110" +
    "\ufffc\111\ufffc\001\002\000\006\010\061\112\062\001\002" +
    "\000\006\007\uffe8\034\uffe8\001\002\000\004\010\063\001" +
    "\002\000\006\007\uffe7\034\uffe7\001\002\000\010\007\uffe9" +
    "\034\uffe9\042\120\001\002\000\016\007\uffc9\037\uffc9\041" +
    "\uffc9\042\uffc9\043\uffc9\113\uffc9\001\002\000\004\037\073" +
    "\001\002\000\006\010\071\112\070\001\002\000\004\010" +
    "\072\001\002\000\016\007\uffcb\037\uffcb\041\uffcb\042\uffcb" +
    "\043\uffcb\113\uffcb\001\002\000\016\007\uffca\037\uffca\041" +
    "\uffca\042\uffca\043\uffca\113\uffca\001\002\000\004\113\074" +
    "\001\002\000\004\043\075\001\002\000\004\042\076\001" +
    "\002\000\042\043\uffe6\046\uffe6\054\uffe6\055\uffe6\056\uffe6" +
    "\057\uffe6\062\uffe6\063\uffe6\064\uffe6\065\uffe6\066\uffe6\067" +
    "\uffe6\070\uffe6\071\uffe6\072\uffe6\113\uffe6\001\002\000\042" +
    "\043\uffdf\046\032\054\050\055\031\056\045\057\046\062" +
    "\034\063\033\064\043\065\042\066\052\067\040\070\044" +
    "\071\053\072\030\113\041\001\002\000\014\007\067\037" +
    "\065\041\106\042\107\043\uffe4\001\002\000\006\041\104" +
    "\043\uffe1\001\002\000\004\043\103\001\002\000\006\007" +
    "\uffe5\034\uffe5\001\002\000\042\043\uffdf\046\032\054\050" +
    "\055\031\056\045\057\046\062\034\063\033\064\043\065" +
    "\042\066\052\067\040\070\044\071\053\072\030\113\041" +
    "\001\002\000\004\043\uffe0\001\002\000\044\013\116\043" +
    "\uffdf\046\032\054\050\055\031\056\045\057\046\062\034" +
    "\063\033\064\043\065\042\066\052\067\040\070\044\071" +
    "\053\072\030\113\041\001\002\000\004\037\110\001\002" +
    "\000\004\043\111\001\002\000\004\042\112\001\002\000" +
    "\042\043\uffde\046\uffde\054\uffde\055\uffde\056\uffde\057\uffde" +
    "\062\uffde\063\uffde\064\uffde\065\uffde\066\uffde\067\uffde\070" +
    "\uffde\071\uffde\072\uffde\113\uffde\001\002\000\042\043\uffdf" +
    "\046\032\054\050\055\031\056\045\057\046\062\034\063" +
    "\033\064\043\065\042\066\052\067\040\070\044\071\053" +
    "\072\030\113\041\001\002\000\004\043\115\001\002\000" +
    "\006\041\uffdd\043\uffdd\001\002\000\004\043\uffe2\001\002" +
    "\000\004\043\uffe3\001\002\000\042\043\uffef\046\uffef\054" +
    "\uffef\055\uffef\056\uffef\057\uffef\062\uffef\063\uffef\064\uffef" +
    "\065\uffef\066\uffef\067\uffef\070\uffef\071\uffef\072\uffef\113" +
    "\uffef\001\002\000\042\043\uffdf\046\032\054\050\055\031" +
    "\056\045\057\046\062\034\063\033\064\043\065\042\066" +
    "\052\067\040\070\044\071\053\072\030\113\041\001\002" +
    "\000\004\043\123\001\002\000\004\034\uffee\001\002\000" +
    "\016\007\uffcf\037\uffcf\041\uffcf\042\uffcf\043\uffcf\113\uffcf" +
    "\001\002\000\006\047\132\113\124\001\002\000\012\007" +
    "\067\037\065\042\066\113\131\001\002\000\006\007\060" +
    "\034\130\001\002\000\030\002\ufffb\004\ufffb\006\ufffb\044" +
    "\ufffb\045\ufffb\046\ufffb\105\ufffb\106\ufffb\107\ufffb\110\ufffb" +
    "\111\ufffb\001\002\000\006\007\uffe9\034\uffe9\001\002\000" +
    "\050\046\032\054\050\055\031\056\045\057\046\062\034" +
    "\063\033\064\043\065\042\066\052\067\040\070\044\071" +
    "\053\072\030\105\006\106\017\107\014\110\020\113\041" +
    "\001\002\000\052\046\032\050\137\054\050\055\031\056" +
    "\045\057\046\062\034\063\033\064\043\065\042\066\052" +
    "\067\040\070\044\071\053\072\030\105\006\106\017\107" +
    "\014\110\020\113\041\001\002\000\006\007\060\034\136" +
    "\001\002\000\052\046\uffec\050\uffec\054\uffec\055\uffec\056" +
    "\uffec\057\uffec\062\uffec\063\uffec\064\uffec\065\uffec\066\uffec" +
    "\067\uffec\070\uffec\071\uffec\072\uffec\105\uffec\106\uffec\107" +
    "\uffec\110\uffec\113\uffec\001\002\000\052\046\uffed\050\uffed" +
    "\054\uffed\055\uffed\056\uffed\057\uffed\062\uffed\063\uffed\064" +
    "\uffed\065\uffed\066\uffed\067\uffed\070\uffed\071\uffed\072\uffed" +
    "\105\uffed\106\uffed\107\uffed\110\uffed\113\uffed\001\002\000" +
    "\004\113\143\001\002\000\006\007\060\034\142\001\002" +
    "\000\052\046\uffeb\050\uffeb\054\uffeb\055\uffeb\056\uffeb\057" +
    "\uffeb\062\uffeb\063\uffeb\064\uffeb\065\uffeb\066\uffeb\067\uffeb" +
    "\070\uffeb\071\uffeb\072\uffeb\105\uffeb\106\uffeb\107\uffeb\110" +
    "\uffeb\113\uffeb\001\002\000\052\046\uffea\050\uffea\054\uffea" +
    "\055\uffea\056\uffea\057\uffea\062\uffea\063\uffea\064\uffea\065" +
    "\uffea\066\uffea\067\uffea\070\uffea\071\uffea\072\uffea\105\uffea" +
    "\106\uffea\107\uffea\110\uffea\113\uffea\001\002\000\004\034" +
    "\144\001\002\000\030\002\ufffa\004\ufffa\006\ufffa\044\ufffa" +
    "\045\ufffa\046\ufffa\105\ufffa\106\ufffa\107\ufffa\110\ufffa\111" +
    "\ufffa\001\002\000\030\002\001\004\001\006\001\044\001" +
    "\045\001\046\001\105\001\106\001\107\001\110\001\111" +
    "\001\001\002\000\004\002\000\001\002\000\004\113\150" +
    "\001\002\000\004\047\151\001\002\000\050\046\032\054" +
    "\050\055\031\056\045\057\046\062\034\063\033\064\043" +
    "\065\042\066\052\067\040\070\044\071\053\072\030\105" +
    "\006\106\017\107\014\110\020\113\041\001\002\000\052" +
    "\046\032\050\153\054\050\055\031\056\045\057\046\062" +
    "\034\063\033\064\043\065\042\066\052\067\040\070\044" +
    "\071\053\072\030\105\006\106\017\107\014\110\020\113" +
    "\041\001\002\000\004\034\154\001\002\000\030\002\ufff8" +
    "\004\ufff8\006\ufff8\044\ufff8\045\ufff8\046\ufff8\105\ufff8\106" +
    "\ufff8\107\ufff8\110\ufff8\111\ufff8\001\002\000\066\002\ufff3" +
    "\004\ufff3\006\ufff3\044\ufff3\045\ufff3\046\ufff3\050\ufff3\054" +
    "\ufff3\055\ufff3\056\ufff3\057\ufff3\062\ufff3\063\ufff3\064\ufff3" +
    "\065\ufff3\066\ufff3\067\ufff3\070\ufff3\071\ufff3\072\ufff3\105" +
    "\ufff3\106\ufff3\107\ufff3\110\ufff3\111\ufff3\113\ufff3\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\153\000\010\003\010\004\004\022\014\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\026\146\001\001\000\006\004\144\022" +
    "\014\001\001\000\012\006\126\023\125\024\046\025\050" +
    "\001\001\000\014\006\035\010\036\023\034\024\046\025" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\024\054\025\050\001\001\000\006\024\053\025\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\030\076\001\001\000\014\005\101" +
    "\011\100\023\077\024\046\025\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\005\104\011\100\023\077\024\046\025\050\001" +
    "\001\000\002\001\001\000\014\005\116\011\100\023\077" +
    "\024\046\025\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\031\112\001\001\000\014" +
    "\005\113\011\100\023\077\024\046\025\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\027\120\001\001\000\014\005\121\011" +
    "\100\023\077\024\046\025\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\006\133\007\132\022\134\023\125\024" +
    "\046\025\050\001\001\000\014\006\137\022\140\023\125" +
    "\024\046\025\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\006\133\007\151\022" +
    "\134\023\125\024\046\025\050\001\001\000\014\006\137" +
    "\022\140\023\125\024\046\025\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public CodeGenerator cg = new CodeGenerator();
	public void report_error(String message, Object info) {
		StringBuilder m = new StringBuilder("Error");
		if (info instanceof java_cup.runtime.Symbol) {
			java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
			if (s.left >= 0) {                
				m.append(" in line "+(s.left+1));   
				if (s.right >= 0)                    
					m.append(", column "+(s.right+1));
			}
		}
   
        	m.append(" : "+message);
   
        	System.err.println(m);
    	}
	
	public void report_fatal_error(String message, Object info) {
	report_error(message, info);
	System.exit(0);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // type ::= type STAR 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=t + "*"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // type ::= type LBRACKET NUMBER RBRACKET 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=t + "[" + n + "]"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // type ::= type LBRACKET RBRACKET 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT=t + "[]"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // type ::= pre_type 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // pre_type ::= CONST pre_type 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT="const " + p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_type",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // pre_type ::= UN_SIGNED pre_type 
            {
              String RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= u + " " + p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_type",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // pre_type ::= STRUCT ID 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= "struct " + i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_type",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // pre_type ::= ID 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_type",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // pre_type ::= c_type 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_type",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // c_type ::= LDOUBLE 
            {
              String RESULT =null;
		 RESULT= "long double"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // c_type ::= DOUBLE 
            {
              String RESULT =null;
		 RESULT= "double"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // c_type ::= FLOAT 
            {
              String RESULT =null;
		 RESULT= "float"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // c_type ::= LLINT 
            {
              String RESULT =null;
		 RESULT= "long long int"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // c_type ::= LLONG 
            {
              String RESULT =null;
		 RESULT= "long long"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // c_type ::= LONG 
            {
              String RESULT =null;
		 RESULT="long"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // c_type ::= SHORT 
            {
              String RESULT =null;
		 RESULT="short"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // c_type ::= LINT 
            {
              String RESULT =null;
		 RESULT= "long int"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // c_type ::= SINT 
            {
              String RESULT =null;
		 RESULT= "short int"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // c_type ::= INT 
            {
              String RESULT =null;
		 RESULT= "int"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // c_type ::= CHAR 
            {
              String RESULT =null;
		 RESULT= "char"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ident_funcpointer ::= type LPAREN STAR RPAREN LPAREN NT$3 params RPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String p4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ps2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ps2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ps2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			Function funcp = parser.cg.paramsowner;
			funcp.pointer = true;
			parser.cg.paramsowner = parser.cg.params_owners.pop();
			RESULT = funcp;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident_funcpointer",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$3 ::= 
            {
              Object RESULT =null;
		int p4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String p4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

			Function funcp = new Function();
			funcp.pointer = true;
			funcp.setReturn_type(p4);
			parser.cg.params_owners.push(parser.cg.paramsowner);
			parser.cg.paramsowner = funcp;  
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // params ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // params ::= ident_funcpointer COMMA params 
            {
              Object RESULT =null;
		int p5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object p5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ps2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ps2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ps2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			parser.cg.paramsowner.pushParam(p5);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // params ::= ident_funcpointer 
            {
              Object RESULT =null;
		int p4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			parser.cg.paramsowner.pushParam(p4);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // params ::= type COMMA DOTS 
            {
              Object RESULT =null;
		int p3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
			parser.cg.paramsowner.pushParam(p3);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // params ::= type COMMA params 
            {
              Object RESULT =null;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int psright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ps = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			parser.cg.paramsowner.pushParam(p2);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // params ::= type 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			parser.cg.paramsowner.pushParam(p);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // definition ::= type LPAREN STAR ID RPAREN LPAREN NT$2 params RPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int i7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int i7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String i7 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int i8left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i8right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i8 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ps = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			Function funcp = parser.cg.paramsowner;
			funcp.pointer = true;
			parser.cg.var.setFuncpointer(funcp);
			parser.cg.paramsowner = parser.cg.params_owners.pop();
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("definition",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$2 ::= 
            {
              Object RESULT =null;
		int i7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i7 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int i8left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i8right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i8 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 
			parser.cg.var.setType(i7+"*");
			parser.cg.var.setID(i8);
			Function funcp = new Function();
			funcp.setID(i8);
			funcp.setReturn_type(i7+"*");
			parser.cg.params_owners.push(parser.cg.paramsowner);
			parser.cg.paramsowner = funcp;  
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // definition ::= definition LBRACKET NUMBER RBRACKET 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			parser.cg.var.addArray(n);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("definition",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // definition ::= definition LBRACKET RBRACKET 
            {
              Object RESULT =null;
		
			parser.cg.var.addArray(0);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("definition",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // definition ::= type ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			parser.cg.var.setType(i);
			parser.cg.var.setID(i2);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("definition",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // struct_body ::= struct_body definition SEMI 
            {
              Object RESULT =null;
		
			if (parser.cg.structblock)
				parser.cg.addDeclaration(parser.cg.var);
			else
				parser.cg.struct.addMember(parser.cg.var);

		        parser.cg.var = new Variable();  
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("struct_body",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // struct_body ::= struct_body ConditionKeys 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("struct_body",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // struct_body ::= ConditionKeys 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("struct_body",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // struct_body ::= definition SEMI 
            {
              Object RESULT =null;
		
			if (parser.cg.structblock)
				parser.cg.addDeclaration(parser.cg.var);
			else
				parser.cg.struct.addMember(parser.cg.var);
		        parser.cg.var = new Variable(); 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("struct_body",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // func ::= type ID LPAREN NT$1 params RPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
			RESULT = e + " " + e2 + "(" + p + ");"; 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$1 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 
			parser.cg.func.setReturn_type(e);
			parser.cg.func.setID(e2);
			parser.cg.paramsowner = parser.cg.func;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ConditionKeys ::= ENDIF 
            {
              Object RESULT =null;
		
			parser.cg.declareConditionalBlock();
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConditionKeys",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ConditionKeys ::= ELSE 
            {
              Object RESULT =null;
		
			parser.cg.conditionalBlocks.peek().condition = false;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConditionKeys",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ConditionKeys ::= IFNDEF ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			ConditionalBlock cb = new ConditionalBlock();
			cb.setID(i);
			parser.cg.conditionalBlocks.push(cb);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConditionKeys",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ConditionKeys ::= IFDEF ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			ConditionalBlock cb = new ConditionalBlock();
			cb.setID(i);
			if (parser.cg.structflag && !parser.cg.structblock)
			{
				cb.inStruct = true;
				parser.cg.structblock = true;
			}
			parser.cg.conditionalBlocks.push(cb);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConditionKeys",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // code_part ::= INCLUDE LESS ID GREATER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.cg.addDeclaration(new Include(i)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_part",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // code_part ::= INCLUDE LESS ID DOT ID GREATER 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.cg.addDeclaration(new Include(i1+"."+i2)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_part",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // code_part ::= ConditionKeys 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_part",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // code_part ::= DEFINE 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			parser.cg.define.setExp(d);
			parser.cg.define.setID("");
			parser.cg.declareDefine();
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_part",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // code_part ::= STRUCT NT$0 ID LQ struct_body RQ SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
			parser.cg.struct.setID(i);
			parser.cg.declareStruct();
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_part",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$0 ::= 
            {
              Object RESULT =null;

			parser.cg.structflag = true;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // code_part ::= TYPEDEF STRUCT LQ struct_body RQ ID SEMI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.cg.declareTypedef_struct(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_part",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // code_part ::= TYPEDEF definition SEMI 
            {
              Object RESULT =null;
		int d2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.cg.declareTypedef_var(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_part",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // code_part ::= EXTERN definition SEMI 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.cg.declareVar(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_part",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // code_part ::= EXTERN func SEMI 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.cg.declareFunc(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_part",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // code_part ::= SHARPIF 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			System.out.println("aaaaaaa{" + s + "}");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_part",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= code_part 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= program code_part 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

