
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Jan 06 14:57:33 CET 2015
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Jan 06 14:57:33 CET 2015
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\113\000\002\004\004\000\002\002\004\000\002\004" +
    "\003\000\002\005\003\000\002\005\004\000\002\005\005" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\004\000\002\002\004\000\002" +
    "\002\003\000\002\002\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\004" +
    "\000\002\024\004\000\002\024\010\000\002\024\006\000" +
    "\002\034\002\000\002\023\010\000\002\023\004\000\002" +
    "\023\005\000\002\026\003\000\002\035\002\000\002\010" +
    "\010\000\002\036\002\000\002\010\010\000\002\007\004" +
    "\000\002\007\005\000\002\007\003\000\002\007\004\000" +
    "\002\025\004\000\002\025\004\000\002\025\005\000\002" +
    "\025\006\000\002\037\002\000\002\025\013\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\004" +
    "\000\002\006\003\000\002\006\005\000\002\006\002\000" +
    "\002\040\002\000\002\011\012\000\002\012\003\000\002" +
    "\012\003\000\002\012\005\000\002\012\004\000\002\012" +
    "\004\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\033\003\000\002\032\003\000\002\032" +
    "\003\000\002\032\004\000\002\032\004\000\002\032\004" +
    "\000\002\031\003\000\002\031\005\000\002\031\006\000" +
    "\002\031\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\175\000\062\004\031\005\042\006\020\044\027\045" +
    "\030\046\046\054\006\055\044\056\021\057\010\062\011" +
    "\063\016\064\017\065\025\066\005\067\036\070\043\071" +
    "\013\072\024\105\037\106\026\111\034\112\023\114\032" +
    "\001\002\000\064\002\176\004\031\005\042\006\020\044" +
    "\027\045\030\046\046\054\006\055\044\056\021\057\010" +
    "\062\011\063\016\064\017\065\025\066\005\067\036\070" +
    "\043\071\013\072\024\105\037\106\026\111\034\112\023" +
    "\114\032\001\002\000\020\007\uffc4\037\uffc4\041\uffc4\042" +
    "\uffc4\043\uffc4\112\uffc4\114\uffc4\001\002\000\020\007\uffc6" +
    "\037\uffc6\041\uffc6\042\uffc6\043\uffc6\112\uffc6\114\uffc6\001" +
    "\002\000\020\007\uffbf\037\uffbf\041\uffbf\042\uffbf\043\uffbf" +
    "\112\uffbf\114\uffbf\001\002\000\040\046\065\054\006\055" +
    "\044\056\021\057\010\062\011\063\016\064\017\065\025" +
    "\066\005\067\036\070\043\071\013\072\024\114\032\001" +
    "\002\000\020\007\uffca\037\uffca\041\uffca\042\uffca\043\uffca" +
    "\112\uffca\114\uffca\001\002\000\064\002\ufffe\004\ufffe\005" +
    "\ufffe\006\ufffe\044\ufffe\045\ufffe\046\ufffe\054\ufffe\055\ufffe" +
    "\056\ufffe\057\ufffe\062\ufffe\063\ufffe\064\ufffe\065\ufffe\066" +
    "\ufffe\067\ufffe\070\ufffe\071\ufffe\072\ufffe\105\ufffe\106\ufffe" +
    "\111\ufffe\112\ufffe\114\ufffe\001\002\000\020\007\uffc1\037" +
    "\uffc1\041\uffc1\042\uffc1\043\uffc1\112\uffc1\114\uffc1\001\002" +
    "\000\020\007\uffba\037\uffba\041\uffba\042\uffba\043\uffba\112" +
    "\uffba\114\uffba\001\002\000\006\034\ufff0\112\ufff0\001\002" +
    "\000\020\007\uffc9\037\uffc9\041\uffc9\042\uffc9\043\uffc9\112" +
    "\uffc9\114\uffc9\001\002\000\020\007\uffc8\037\uffc8\041\uffc8" +
    "\042\uffc8\043\uffc8\112\uffc8\114\uffc8\001\002\000\066\002" +
    "\ufff8\004\ufff8\005\ufff8\006\ufff8\044\ufff8\045\ufff8\046\ufff8" +
    "\050\ufff8\054\ufff8\055\ufff8\056\ufff8\057\ufff8\062\ufff8\063" +
    "\ufff8\064\ufff8\065\ufff8\066\ufff8\067\ufff8\070\ufff8\071\ufff8" +
    "\072\ufff8\105\ufff8\106\ufff8\111\ufff8\112\ufff8\114\ufff8\001" +
    "\002\000\040\046\065\054\006\055\044\056\021\057\010" +
    "\062\011\063\016\064\017\065\025\066\005\067\036\070" +
    "\043\071\013\072\024\114\032\001\002\000\006\034\uffe7" +
    "\112\uffe7\001\002\000\064\002\ufff4\004\ufff4\005\ufff4\006" +
    "\ufff4\044\ufff4\045\ufff4\046\ufff4\054\ufff4\055\ufff4\056\ufff4" +
    "\057\ufff4\062\ufff4\063\ufff4\064\ufff4\065\ufff4\066\ufff4\067" +
    "\ufff4\070\ufff4\071\ufff4\072\ufff4\105\ufff4\106\ufff4\111\ufff4" +
    "\112\ufff4\114\167\001\002\000\020\007\uffc0\037\uffc0\041" +
    "\uffc0\042\uffc0\043\uffc0\112\uffc0\114\uffc0\001\002\000\020" +
    "\007\uffc7\037\uffc7\041\uffc7\042\uffc7\043\uffc7\112\uffc7\114" +
    "\uffc7\001\002\000\066\002\ufff9\004\ufff9\005\ufff9\006\ufff9" +
    "\044\ufff9\045\ufff9\046\ufff9\050\ufff9\054\ufff9\055\ufff9\056" +
    "\ufff9\057\ufff9\062\ufff9\063\ufff9\064\ufff9\065\ufff9\066\ufff9" +
    "\067\ufff9\070\ufff9\071\ufff9\072\ufff9\105\ufff9\106\ufff9\111" +
    "\ufff9\112\ufff9\114\ufff9\001\002\000\044\045\030\046\046" +
    "\054\006\055\044\056\021\057\010\062\011\063\016\064" +
    "\017\065\025\066\005\067\036\070\043\071\013\072\024" +
    "\112\164\114\032\001\002\000\042\046\154\054\006\055" +
    "\044\056\021\057\010\062\011\063\016\064\017\065\025" +
    "\066\005\067\036\070\043\071\013\072\024\112\153\114" +
    "\032\001\002\000\066\002\ufffb\004\ufffb\005\ufffb\006\ufffb" +
    "\044\ufffb\045\ufffb\046\ufffb\050\ufffb\054\ufffb\055\ufffb\056" +
    "\ufffb\057\ufffb\062\ufffb\063\ufffb\064\ufffb\065\ufffb\066\ufffb" +
    "\067\ufffb\070\ufffb\071\ufffb\072\ufffb\105\ufffb\106\ufffb\111" +
    "\ufffb\112\ufffb\114\ufffb\001\002\000\020\007\uffbe\037\uffbe" +
    "\041\uffbe\042\uffbe\043\uffbe\112\uffbe\114\uffbe\001\002\000" +
    "\006\034\ufff2\112\ufff2\001\002\000\066\002\ufff5\004\ufff5" +
    "\005\ufff5\006\ufff5\044\ufff5\045\ufff5\046\ufff5\050\ufff5\054" +
    "\ufff5\055\ufff5\056\ufff5\057\ufff5\062\ufff5\063\ufff5\064\ufff5" +
    "\065\ufff5\066\ufff5\067\ufff5\070\ufff5\071\ufff5\072\ufff5\105" +
    "\ufff5\106\ufff5\111\ufff5\112\ufff5\114\ufff5\001\002\000\064" +
    "\002\uffff\004\uffff\005\uffff\006\uffff\044\uffff\045\uffff\046" +
    "\uffff\054\uffff\055\uffff\056\uffff\057\uffff\062\uffff\063\uffff" +
    "\064\uffff\065\uffff\066\uffff\067\uffff\070\uffff\071\uffff\072" +
    "\uffff\105\uffff\106\uffff\111\uffff\112\uffff\114\uffff\001\002" +
    "\000\020\007\uffc3\037\uffc3\041\uffc3\042\uffc3\043\uffc3\112" +
    "\uffc3\114\uffc3\001\002\000\066\002\ufffa\004\ufffa\005\ufffa" +
    "\006\ufffa\044\ufffa\045\ufffa\046\ufffa\050\ufffa\054\ufffa\055" +
    "\ufffa\056\ufffa\057\ufffa\062\ufffa\063\ufffa\064\ufffa\065\ufffa" +
    "\066\ufffa\067\ufffa\070\ufffa\071\ufffa\072\ufffa\105\ufffa\106" +
    "\ufffa\111\ufffa\112\ufffa\114\ufffa\001\002\000\006\034\ufff3" +
    "\112\ufff3\001\002\000\006\034\152\112\151\001\002\000" +
    "\006\107\147\110\150\001\002\000\020\007\uffc2\037\uffc2" +
    "\041\uffc2\042\uffc2\043\uffc2\112\uffc2\114\uffc2\001\002\000" +
    "\020\007\uffc5\037\uffc5\041\uffc5\042\uffc5\043\uffc5\112\uffc5" +
    "\114\uffc5\001\002\000\010\007\133\034\ufff1\112\ufff1\001" +
    "\002\000\004\114\112\001\002\000\012\007\053\037\051" +
    "\042\052\114\050\001\002\000\012\007\uffde\034\uffde\042" +
    "\106\112\uffde\001\002\000\020\007\uffb7\037\uffb7\041\uffb7" +
    "\042\uffb7\043\uffb7\112\uffb7\114\uffb7\001\002\000\004\037" +
    "\057\001\002\000\006\010\054\113\055\001\002\000\020" +
    "\007\uffb9\037\uffb9\041\uffb9\042\uffb9\043\uffb9\112\uffb9\114" +
    "\uffb9\001\002\000\004\010\056\001\002\000\020\007\uffb8" +
    "\037\uffb8\041\uffb8\042\uffb8\043\uffb8\112\uffb8\114\uffb8\001" +
    "\002\000\004\114\060\001\002\000\004\043\061\001\002" +
    "\000\004\042\062\001\002\000\044\043\uffda\046\uffda\054" +
    "\uffda\055\uffda\056\uffda\057\uffda\062\uffda\063\uffda\064\uffda" +
    "\065\uffda\066\uffda\067\uffda\070\uffda\071\uffda\072\uffda\112" +
    "\uffda\114\uffda\001\002\000\044\043\uffd2\046\065\054\006" +
    "\055\044\056\021\057\010\062\011\063\016\064\017\065" +
    "\025\066\005\067\036\070\043\071\013\072\024\112\064" +
    "\114\032\001\002\000\010\041\uffd6\043\uffd6\112\uffd6\001" +
    "\002\000\004\114\105\001\002\000\016\007\053\037\051" +
    "\041\uffd8\042\076\043\uffd8\112\uffd8\001\002\000\010\041" +
    "\074\043\uffd4\112\073\001\002\000\010\041\uffd7\043\uffd7" +
    "\112\uffd7\001\002\000\004\043\072\001\002\000\010\007" +
    "\uffd9\034\uffd9\112\uffd9\001\002\000\010\041\uffd5\043\uffd5" +
    "\112\uffd5\001\002\000\044\043\uffd2\046\065\054\006\055" +
    "\044\056\021\057\010\062\011\063\016\064\017\065\025" +
    "\066\005\067\036\070\043\071\013\072\024\112\064\114" +
    "\032\001\002\000\004\043\uffd3\001\002\000\004\037\077" +
    "\001\002\000\004\043\100\001\002\000\004\042\101\001" +
    "\002\000\044\043\uffd1\046\uffd1\054\uffd1\055\uffd1\056\uffd1" +
    "\057\uffd1\062\uffd1\063\uffd1\064\uffd1\065\uffd1\066\uffd1\067" +
    "\uffd1\070\uffd1\071\uffd1\072\uffd1\112\uffd1\114\uffd1\001\002" +
    "\000\044\043\uffd2\046\065\054\006\055\044\056\021\057" +
    "\010\062\011\063\016\064\017\065\025\066\005\067\036" +
    "\070\043\071\013\072\024\112\064\114\032\001\002\000" +
    "\004\043\104\001\002\000\010\041\uffd0\043\uffd0\112\uffd0" +
    "\001\002\000\020\007\uffbd\037\uffbd\041\uffbd\042\uffbd\043" +
    "\uffbd\112\uffbd\114\uffbd\001\002\000\044\043\uffe6\046\uffe6" +
    "\054\uffe6\055\uffe6\056\uffe6\057\uffe6\062\uffe6\063\uffe6\064" +
    "\uffe6\065\uffe6\066\uffe6\067\uffe6\070\uffe6\071\uffe6\072\uffe6" +
    "\112\uffe6\114\uffe6\001\002\000\044\043\uffd2\046\065\054" +
    "\006\055\044\056\021\057\010\062\011\063\016\064\017" +
    "\065\025\066\005\067\036\070\043\071\013\072\024\112" +
    "\064\114\032\001\002\000\004\043\111\001\002\000\006" +
    "\034\uffe5\112\uffe5\001\002\000\022\007\uffbd\034\uffe9\037" +
    "\uffbd\042\uffbd\047\uffeb\060\115\112\uffe9\114\uffbd\001\002" +
    "\000\010\034\uffcf\043\uffcf\112\uffcf\001\002\000\010\034" +
    "\uffce\043\uffce\112\uffce\001\002\000\014\037\116\042\120" +
    "\060\115\112\114\114\113\001\002\000\014\037\116\042" +
    "\120\060\115\112\114\114\113\001\002\000\004\047\124" +
    "\001\002\000\014\037\116\042\120\060\115\112\114\114" +
    "\113\001\002\000\006\034\uffe8\112\uffe8\001\002\000\004" +
    "\043\123\001\002\000\010\034\uffcd\043\uffcd\112\uffcd\001" +
    "\002\000\056\004\031\005\042\006\020\046\065\054\006" +
    "\055\044\056\021\057\010\062\011\063\016\064\017\065" +
    "\025\066\005\067\036\070\043\071\013\072\024\105\037" +
    "\106\026\111\034\112\125\114\032\001\002\000\060\004" +
    "\ufff4\005\ufff4\006\ufff4\046\ufff4\050\ufff4\054\ufff4\055\ufff4" +
    "\056\ufff4\057\ufff4\062\ufff4\063\ufff4\064\ufff4\065\ufff4\066" +
    "\ufff4\067\ufff4\070\ufff4\071\ufff4\072\ufff4\105\ufff4\106\ufff4" +
    "\111\ufff4\112\ufff4\114\144\001\002\000\012\007\053\037" +
    "\051\042\052\114\143\001\002\000\060\004\031\005\042" +
    "\006\020\046\065\050\137\054\006\055\044\056\021\057" +
    "\010\062\011\063\016\064\017\065\025\066\005\067\036" +
    "\070\043\071\013\072\024\105\037\106\026\111\034\112" +
    "\125\114\032\001\002\000\060\004\uffe0\005\uffe0\006\uffe0" +
    "\046\uffe0\050\uffe0\054\uffe0\055\uffe0\056\uffe0\057\uffe0\062" +
    "\uffe0\063\uffe0\064\uffe0\065\uffe0\066\uffe0\067\uffe0\070\uffe0" +
    "\071\uffe0\072\uffe0\105\uffe0\106\uffe0\111\uffe0\112\uffe0\114" +
    "\uffe0\001\002\000\006\007\133\034\132\001\002\000\060" +
    "\004\uffe2\005\uffe2\006\uffe2\046\uffe2\050\uffe2\054\uffe2\055" +
    "\uffe2\056\uffe2\057\uffe2\062\uffe2\063\uffe2\064\uffe2\065\uffe2" +
    "\066\uffe2\067\uffe2\070\uffe2\071\uffe2\072\uffe2\105\uffe2\106" +
    "\uffe2\111\uffe2\112\uffe2\114\uffe2\001\002\000\006\010\135" +
    "\113\134\001\002\000\004\010\136\001\002\000\010\007" +
    "\uffdc\034\uffdc\112\uffdc\001\002\000\010\007\uffdb\034\uffdb" +
    "\112\uffdb\001\002\000\006\034\uffea\112\uffea\001\002\000" +
    "\060\004\uffdf\005\uffdf\006\uffdf\046\uffdf\050\uffdf\054\uffdf" +
    "\055\uffdf\056\uffdf\057\uffdf\062\uffdf\063\uffdf\064\uffdf\065" +
    "\uffdf\066\uffdf\067\uffdf\070\uffdf\071\uffdf\072\uffdf\105\uffdf" +
    "\106\uffdf\111\uffdf\112\uffdf\114\uffdf\001\002\000\006\007" +
    "\133\034\142\001\002\000\060\004\uffe1\005\uffe1\006\uffe1" +
    "\046\uffe1\050\uffe1\054\uffe1\055\uffe1\056\uffe1\057\uffe1\062" +
    "\uffe1\063\uffe1\064\uffe1\065\uffe1\066\uffe1\067\uffe1\070\uffe1" +
    "\071\uffe1\072\uffe1\105\uffe1\106\uffe1\111\uffe1\112\uffe1\114" +
    "\uffe1\001\002\000\010\007\uffde\034\uffde\112\uffde\001\002" +
    "\000\010\007\uffdd\034\uffdd\112\uffdd\001\002\000\010\034" +
    "\uffcc\043\uffcc\112\uffcc\001\002\000\010\034\uffcb\043\uffcb" +
    "\112\uffcb\001\002\000\066\002\ufff7\004\ufff7\005\ufff7\006" +
    "\ufff7\044\ufff7\045\ufff7\046\ufff7\050\ufff7\054\ufff7\055\ufff7" +
    "\056\ufff7\057\ufff7\062\ufff7\063\ufff7\064\ufff7\065\ufff7\066" +
    "\ufff7\067\ufff7\070\ufff7\071\ufff7\072\ufff7\105\ufff7\106\ufff7" +
    "\111\ufff7\112\ufff7\114\ufff7\001\002\000\066\002\ufff6\004" +
    "\ufff6\005\ufff6\006\ufff6\044\ufff6\045\ufff6\046\ufff6\050\ufff6" +
    "\054\ufff6\055\ufff6\056\ufff6\057\ufff6\062\ufff6\063\ufff6\064" +
    "\ufff6\065\ufff6\066\ufff6\067\ufff6\070\ufff6\071\ufff6\072\ufff6" +
    "\105\ufff6\106\ufff6\111\ufff6\112\ufff6\114\ufff6\001\002\000" +
    "\006\034\uffef\112\uffef\001\002\000\064\002\ufffd\004\ufffd" +
    "\005\ufffd\006\ufffd\044\ufffd\045\ufffd\046\ufffd\054\ufffd\055" +
    "\ufffd\056\ufffd\057\ufffd\062\ufffd\063\ufffd\064\ufffd\065\ufffd" +
    "\066\ufffd\067\ufffd\070\ufffd\071\ufffd\072\ufffd\105\ufffd\106" +
    "\ufffd\111\ufffd\112\ufffd\114\ufffd\001\002\000\004\114\144" +
    "\001\002\000\006\047\157\114\156\001\002\000\010\007" +
    "\133\034\uffee\112\uffee\001\002\000\016\007\uffbd\037\uffbd" +
    "\042\uffbd\060\115\112\114\114\uffbd\001\002\000\056\004" +
    "\031\005\042\006\020\046\065\054\006\055\044\056\021" +
    "\057\010\062\011\063\016\064\017\065\025\066\005\067" +
    "\036\070\043\071\013\072\024\105\037\106\026\111\034" +
    "\112\125\114\032\001\002\000\060\004\031\005\042\006" +
    "\020\046\065\050\161\054\006\055\044\056\021\057\010" +
    "\062\011\063\016\064\017\065\025\066\005\067\036\070" +
    "\043\071\013\072\024\105\037\106\026\111\034\112\125" +
    "\114\032\001\002\000\004\114\162\001\002\000\006\034" +
    "\uffed\112\uffed\001\002\000\006\034\uffec\112\uffec\001\002" +
    "\000\004\114\167\001\002\000\006\034\166\112\151\001" +
    "\002\000\064\002\ufffc\004\ufffc\005\ufffc\006\ufffc\044\ufffc" +
    "\045\ufffc\046\ufffc\054\ufffc\055\ufffc\056\ufffc\057\ufffc\062" +
    "\ufffc\063\ufffc\064\ufffc\065\ufffc\066\ufffc\067\ufffc\070\ufffc" +
    "\071\ufffc\072\ufffc\105\ufffc\106\ufffc\111\ufffc\112\ufffc\114" +
    "\ufffc\001\002\000\012\007\uffdd\034\uffdd\042\170\112\uffdd" +
    "\001\002\000\044\043\uffe4\046\uffe4\054\uffe4\055\uffe4\056" +
    "\uffe4\057\uffe4\062\uffe4\063\uffe4\064\uffe4\065\uffe4\066\uffe4" +
    "\067\uffe4\070\uffe4\071\uffe4\072\uffe4\112\uffe4\114\uffe4\001" +
    "\002\000\044\043\uffd2\046\065\054\006\055\044\056\021" +
    "\057\010\062\011\063\016\064\017\065\025\066\005\067" +
    "\036\070\043\071\013\072\024\112\064\114\032\001\002" +
    "\000\004\043\173\001\002\000\006\034\uffe3\112\uffe3\001" +
    "\002\000\020\007\uffbc\037\uffbc\041\uffbc\042\uffbc\043\uffbc" +
    "\112\uffbc\114\uffbc\001\002\000\020\007\uffbb\037\uffbb\041" +
    "\uffbb\042\uffbb\043\uffbb\112\uffbb\114\uffbb\001\002\000\004" +
    "\002\000\001\002\000\064\002\001\004\001\005\001\006" +
    "\001\044\001\045\001\046\001\054\001\055\001\056\001" +
    "\057\001\062\001\063\001\064\001\065\001\066\001\067" +
    "\001\070\001\071\001\072\001\105\001\106\001\111\001" +
    "\112\001\114\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\175\000\032\002\011\004\003\005\034\010\021\022" +
    "\040\023\032\024\037\025\044\026\014\031\046\032\013" +
    "\033\006\001\001\000\030\002\011\005\176\010\021\022" +
    "\040\023\032\024\037\025\044\026\014\031\046\032\013" +
    "\033\006\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\032\174\033\006\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\032\173\033\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\010\021\022\164\023" +
    "\032\024\037\025\044\026\014\031\046\032\013\033\006" +
    "\001\001\000\012\025\154\031\125\032\013\033\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\037" +
    "\062\001\001\000\016\006\070\011\067\027\066\031\065" +
    "\032\013\033\006\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\006\074\011\067\027\066\031\065\032\013\033\006" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\040\101\001\001\000\016" +
    "\006\102\011\067\027\066\031\065\032\013\033\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\035\106\001\001\000\016\006\107\011\067\027" +
    "\066\031\065\032\013\033\006\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\120\034\116\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\145\001\001" +
    "\000\004\012\144\001\001\000\002\001\001\000\004\012" +
    "\121\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\002\127\007\126\025\130\031\125\032" +
    "\013\033\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\002\137\025\140\031\125\032\013\033\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\162\001\001\000\016\002\127\007\157\025\130\031" +
    "\125\032\013\033\006\001\001\000\014\002\137\025\140" +
    "\031\125\032\013\033\006\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\036" +
    "\170\001\001\000\016\006\171\011\067\027\066\031\065" +
    "\032\013\033\006\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public CodeGenerator cg = new CodeGenerator();
	public void report_error(String message, Object info) {
		StringBuilder m = new StringBuilder("Error");
		if (info instanceof java_cup.runtime.Symbol) {
			java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
			if (s.left >= 0) {                
				m.append(" in line "+(s.left+1));   
				if (s.right >= 0)                    
					m.append(", column "+(s.right+1));
			}
		}
   
        	m.append(" : "+message);
   
        	System.err.println(m);
    	}
	
	public void report_fatal_error(String message, Object info) {
	report_error(message, info);
	System.exit(0);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // type ::= type STAR 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=t + "*"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // type ::= type LBRACKET NUMBER RBRACKET 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=t + "[" + n + "]"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // type ::= type LBRACKET RBRACKET 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT=t + "[]"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // type ::= pre_type 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // pre_type ::= CONST pre_type 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT="const " + p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_type",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // pre_type ::= UN_SIGNED pre_type 
            {
              String RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= u + " " + p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_type",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // pre_type ::= STRUCT ID 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= "struct " + i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_type",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // pre_type ::= ID 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_type",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // pre_type ::= c_type 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_type",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // c_type ::= LDOUBLE 
            {
              String RESULT =null;
		 RESULT= "long double"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // c_type ::= DOUBLE 
            {
              String RESULT =null;
		 RESULT= "double"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // c_type ::= FLOAT 
            {
              String RESULT =null;
		 RESULT= "float"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // c_type ::= LLINT 
            {
              String RESULT =null;
		 RESULT= "long long int"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // c_type ::= LLONG 
            {
              String RESULT =null;
		 RESULT= "long long"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // c_type ::= LONG 
            {
              String RESULT =null;
		 RESULT="long"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // c_type ::= SHORT 
            {
              String RESULT =null;
		 RESULT="short"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // c_type ::= LINT 
            {
              String RESULT =null;
		 RESULT= "long int"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // c_type ::= SINT 
            {
              String RESULT =null;
		 RESULT= "short int"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // c_type ::= INT 
            {
              String RESULT =null;
		 RESULT= "int"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // c_type ::= CHAR 
            {
              String RESULT =null;
		 RESULT= "char"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expression ::= AMPERSAND expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "&" + e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expression ::= STAR expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "*"+e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expression ::= LPAREN expression RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "("+e+")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expression ::= COMPWORD 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expression ::= ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ident_funcpointer ::= type LPAREN STAR RPAREN LPAREN NT$4 params RPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String p4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ps2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ps2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ps2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			Function funcp = parser.cg.paramsowner;
			funcp.pointer = true;
			parser.cg.paramsowner = parser.cg.params_owners.pop();
			RESULT = funcp;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident_funcpointer",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$4 ::= 
            {
              Object RESULT =null;
		int p4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String p4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

			Function funcp = new Function();
			funcp.pointer = true;
			funcp.setReturn_type(p4);
			parser.cg.params_owners.push(parser.cg.paramsowner);
			parser.cg.paramsowner = funcp;  
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // params ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // params ::= parameter COMMA params 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int psright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ps = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.cg.paramsowner.pushParam(p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // params ::= parameter 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.cg.paramsowner.pushParam(p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // parameter ::= parameter COMPWORD 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // parameter ::= COMPWORD 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // parameter ::= ident_funcpointer 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // parameter ::= type 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = t;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // var_declaration ::= type LPAREN STAR ID RPAREN LPAREN NT$3 params RPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int i7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int i7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String i7 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int i8left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i8right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i8 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ps = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			Function funcp = parser.cg.paramsowner;
			funcp.pointer = true;
			parser.cg.var.setFuncpointer(funcp);
			parser.cg.paramsowner = parser.cg.params_owners.pop();
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declaration",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$3 ::= 
            {
              Object RESULT =null;
		int i7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i7 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int i8left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i8right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i8 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 
			parser.cg.var.setType(i7+"*");
			parser.cg.var.setID(i8);
			Function funcp = new Function();
			funcp.setID(i8);
			funcp.setReturn_type(i7+"*");
			parser.cg.params_owners.push(parser.cg.paramsowner);
			parser.cg.paramsowner = funcp;  
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // var_declaration ::= var_declaration LBRACKET NUMBER RBRACKET 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			parser.cg.var.addArray(n);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declaration",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // var_declaration ::= var_declaration LBRACKET RBRACKET 
            {
              Object RESULT =null;
		
			parser.cg.var.addArray(0);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declaration",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // var_declaration ::= COMPWORD ID 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			parser.cg.var.setType((String) c);
			parser.cg.var.setID(i);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declaration",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // var_declaration ::= type ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			parser.cg.var.setType(i);
			parser.cg.var.setID(i2);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declaration",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // struct_body ::= struct_body pre_process_step 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("struct_body",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // struct_body ::= pre_process_step 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("struct_body",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // struct_body ::= struct_body var_declaration SEMI 
            {
              Object RESULT =null;
		
				if (parser.cg.structblock)
					parser.cg.addDeclaration(parser.cg.var);
				else
					parser.cg.struct.addMember(parser.cg.var);
	
			        parser.cg.var = new Variable();
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("struct_body",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // struct_body ::= var_declaration SEMI 
            {
              Object RESULT =null;
		
				if (parser.cg.structblock)
					parser.cg.addDeclaration(parser.cg.var);
				else
					parser.cg.struct.addMember(parser.cg.var);
			        parser.cg.var = new Variable();
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("struct_body",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // func ::= COMPWORD ID LPAREN NT$2 params RPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$2 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 
			parser.cg.func.setReturn_type(e);
			parser.cg.func.setID(e2);
			parser.cg.paramsowner = parser.cg.func;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // func ::= type ID LPAREN NT$1 params RPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$1 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 
			parser.cg.func.setReturn_type(e);
			parser.cg.func.setID(e2);
			parser.cg.paramsowner = parser.cg.func;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // function_declaration ::= func 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.cg.declareFunc(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // struct_declaration ::= STRUCT ID expression 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
					parser.cg.struct.setID(i);
					parser.cg.declareStruct();
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("struct_declaration",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // struct_declaration ::= STRUCT ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
					parser.cg.struct.setID(i);
					parser.cg.declareStruct();
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("struct_declaration",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // struct_declaration ::= STRUCT ID NT$0 LQ struct_body RQ 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.cg.declareStruct(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("struct_declaration",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$0 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 
					parser.cg.structflag = true;
					parser.cg.struct.setID(i);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // typedef_declaration ::= TYPEDEF STRUCT ID expression 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.cg.declareTypedef_struct(i, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typedef_declaration",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // typedef_declaration ::= TYPEDEF STRUCT LQ struct_body RQ ID 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.cg.declareTypedef_struct(i, ""); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typedef_declaration",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // typedef_declaration ::= TYPEDEF var_declaration 
            {
              Object RESULT =null;
		int d2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.cg.declareTypedef_var(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typedef_declaration",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // general_declaration ::= general_declaration COMPWORD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("general_declaration",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // general_declaration ::= function_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("general_declaration",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // general_declaration ::= var_declaration 
            {
              Object RESULT =null;
		 parser.cg.declareVar(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("general_declaration",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // general_declaration ::= struct_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("general_declaration",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // general_declaration ::= typedef_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("general_declaration",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // pre_process_step ::= COMPWORD 
            {
              Object RESULT =null;
		 /*DO NOTHING*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_process_step",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // pre_process_step ::= INCLUDE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("include" + i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_process_step",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // pre_process_step ::= SHARP ENDIF 
            {
              Object RESULT =null;
		 parser.cg.declareConditionalBlock(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_process_step",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // pre_process_step ::= SHARP ELSE 
            {
              Object RESULT =null;
		 parser.cg.conditionalBlocks.peek().condition = false; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_process_step",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // pre_process_step ::= DEFINE 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					parser.cg.define.setExp(d);
					parser.cg.define.setID("");
					parser.cg.declareDefine();
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_process_step",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // pre_process_step ::= IFNDEF 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.cg.newConditionalBlock(i,false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_process_step",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // pre_process_step ::= IFDEF 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.cg.newConditionalBlock(i,true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_process_step",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // pre_process_step ::= IF 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.cg.newConditionalBlock(i,true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_process_step",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // code_part ::= EXTERN general_declaration SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_part",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // code_part ::= general_declaration SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_part",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // code_part ::= pre_process_step 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_part",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= code_part 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= program code_part 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

