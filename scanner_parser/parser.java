
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Oct 08 00:21:23 CEST 2014
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Oct 08 00:21:23 CEST 2014
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\151\000\002\003\004\000\002\002\004\000\002\003" +
    "\003\000\002\004\005\000\002\004\005\000\002\004\005" +
    "\000\002\004\011\000\002\004\010\000\002\004\004\000" +
    "\002\002\004\000\002\002\005\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\006\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\004\000\002\012\004\000\002\012\005\000" +
    "\002\020\004\000\002\020\006\000\002\020\004\000\002" +
    "\020\006\000\002\020\004\000\002\020\006\000\002\020" +
    "\004\000\002\020\006\000\002\020\004\000\002\020\006" +
    "\000\002\020\004\000\002\020\006\000\002\020\004\000" +
    "\002\020\006\000\002\020\003\000\002\021\005\000\002" +
    "\021\007\000\002\021\005\000\002\021\007\000\002\021" +
    "\011\000\002\021\013\000\002\021\010\000\002\021\012" +
    "\000\002\021\007\000\002\021\011\000\002\021\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\013\006\000\002\013" +
    "\005\000\002\014\005\000\002\014\003\000\002\023\004" +
    "\000\002\023\005\000\002\023\005\000\002\023\002\000" +
    "\002\022\003\000\002\022\004\000\002\022\004\000\002" +
    "\026\002\000\002\010\010\000\002\007\004\000\002\007" +
    "\005\000\002\006\004\000\002\006\005\000\002\006\006" +
    "\000\002\027\002\000\002\006\013\000\002\005\003\000" +
    "\002\005\005\000\002\005\005\000\002\005\003\000\002" +
    "\005\005\000\002\005\002\000\002\030\002\000\002\011" +
    "\012\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\004\000\002\025\004\000\002\025\004\000" +
    "\002\025\004\000\002\024\003\000\002\024\005\000\002" +
    "\024\006\000\002\024\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\343\000\012\004\007\042\005\043\010\044\006\001" +
    "\002\000\014\002\345\004\007\042\005\043\010\044\006" +
    "\001\002\000\016\044\023\052\021\053\012\054\020\055" +
    "\022\061\015\001\002\000\004\061\325\001\002\000\004" +
    "\061\102\001\002\000\016\044\014\052\021\053\012\054" +
    "\020\055\022\061\015\001\002\000\014\002\uffff\004\uffff" +
    "\042\uffff\043\uffff\044\uffff\001\002\000\020\005\uffa1\035" +
    "\uffa1\037\uffa1\040\uffa1\041\uffa1\053\101\061\uffa1\001\002" +
    "\000\016\005\uff9c\035\uff9c\037\uff9c\040\uff9c\041\uff9c\061" +
    "\uff9c\001\002\000\006\045\070\061\025\001\002\000\016" +
    "\005\uffa3\035\uffa3\037\uffa3\040\uffa3\041\uffa3\061\uffa3\001" +
    "\002\000\012\005\037\035\035\040\036\061\034\001\002" +
    "\000\006\005\030\032\027\001\002\000\016\044\023\052" +
    "\021\053\012\054\020\055\022\061\015\001\002\000\016" +
    "\005\uffa2\035\uffa2\037\uffa2\040\uffa2\041\uffa2\061\uffa2\001" +
    "\002\000\016\044\023\052\021\053\012\054\020\055\022" +
    "\061\015\001\002\000\004\061\025\001\002\000\016\005" +
    "\uff9d\035\uff9d\037\uff9d\040\uff9d\041\uff9d\061\uff9d\001\002" +
    "\000\016\005\uff9f\035\uff9f\037\uff9f\040\uff9f\041\uff9f\061" +
    "\uff9f\001\002\000\016\005\uff9e\035\uff9e\037\uff9e\040\uff9e" +
    "\041\uff9e\061\uff9e\001\002\000\014\002\ufffc\004\ufffc\042" +
    "\ufffc\043\ufffc\044\ufffc\001\002\000\006\006\031\060\032" +
    "\001\002\000\006\005\uffaf\032\uffaf\001\002\000\004\006" +
    "\033\001\002\000\006\005\uffae\032\uffae\001\002\000\006" +
    "\005\uffb0\032\uffb0\001\002\000\016\005\uff99\035\uff99\037" +
    "\uff99\040\uff99\041\uff99\061\uff99\001\002\000\004\035\043" +
    "\001\002\000\006\006\040\060\041\001\002\000\016\005" +
    "\uff9b\035\uff9b\037\uff9b\040\uff9b\041\uff9b\061\uff9b\001\002" +
    "\000\004\006\042\001\002\000\016\005\uff9a\035\uff9a\037" +
    "\uff9a\040\uff9a\041\uff9a\061\uff9a\001\002\000\004\061\044" +
    "\001\002\000\004\041\045\001\002\000\004\040\046\001" +
    "\002\000\020\041\uffad\044\uffad\052\uffad\053\uffad\054\uffad" +
    "\055\uffad\061\uffad\001\002\000\020\041\uffa6\044\023\052" +
    "\021\053\012\054\020\055\022\061\015\001\002\000\004" +
    "\041\067\001\002\000\006\037\065\041\uffa8\001\002\000" +
    "\014\005\037\035\035\037\053\040\054\041\uffab\001\002" +
    "\000\022\011\064\041\uffa6\044\023\052\021\053\012\054" +
    "\020\055\022\061\015\001\002\000\004\035\055\001\002" +
    "\000\004\041\056\001\002\000\004\040\057\001\002\000" +
    "\020\041\uffa5\044\uffa5\052\uffa5\053\uffa5\054\uffa5\055\uffa5" +
    "\061\uffa5\001\002\000\020\041\uffa6\044\023\052\021\053" +
    "\012\054\020\055\022\061\015\001\002\000\004\041\062" +
    "\001\002\000\006\037\uffa4\041\uffa4\001\002\000\004\041" +
    "\uffaa\001\002\000\004\041\uffa9\001\002\000\020\041\uffa6" +
    "\044\023\052\021\053\012\054\020\055\022\061\015\001" +
    "\002\000\004\041\uffa7\001\002\000\006\005\uffac\032\uffac" +
    "\001\002\000\016\044\023\052\021\053\012\054\020\055" +
    "\022\061\015\001\002\000\020\044\023\046\075\052\021" +
    "\053\012\054\020\055\022\061\015\001\002\000\006\005" +
    "\030\032\073\001\002\000\020\044\uffb2\046\uffb2\052\uffb2" +
    "\053\uffb2\054\uffb2\055\uffb2\061\uffb2\001\002\000\006\005" +
    "\030\032\100\001\002\000\004\061\076\001\002\000\004" +
    "\032\077\001\002\000\014\002\ufffb\004\ufffb\042\ufffb\043" +
    "\ufffb\044\ufffb\001\002\000\020\044\uffb1\046\uffb1\052\uffb1" +
    "\053\uffb1\054\uffb1\055\uffb1\061\uffb1\001\002\000\016\005" +
    "\uffa0\035\uffa0\037\uffa0\040\uffa0\041\uffa0\061\uffa0\001\002" +
    "\000\032\013\117\021\121\022\116\033\111\034\104\035" +
    "\110\040\122\044\107\056\123\057\112\060\105\061\115" +
    "\001\002\000\014\002\ufff9\004\ufff9\042\ufff9\043\ufff9\044" +
    "\ufff9\001\002\000\026\021\121\022\116\033\111\034\104" +
    "\035\110\040\125\056\123\057\112\060\105\061\115\001" +
    "\002\000\104\002\ufff6\004\ufff6\005\ufff6\006\ufff6\007\ufff6" +
    "\010\ufff6\012\ufff6\014\ufff6\015\ufff6\016\ufff6\017\ufff6\020" +
    "\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6\025\ufff6\026\ufff6" +
    "\027\ufff6\030\ufff6\031\ufff6\033\ufff6\034\ufff6\036\ufff6\037" +
    "\ufff6\041\ufff6\042\ufff6\043\ufff6\044\ufff6\047\ufff6\050\ufff6" +
    "\051\ufff6\056\ufff6\001\002\000\104\002\uffdd\004\uffdd\005" +
    "\156\006\uffdd\007\uffdd\010\160\012\uffdd\014\uffdd\015\uffdd" +
    "\016\uffdd\017\uffdd\020\155\021\157\022\153\023\uffdd\024" +
    "\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\033\uffdd" +
    "\034\uffdd\036\uffdd\037\uffdd\041\uffdd\042\uffdd\043\uffdd\044" +
    "\uffdd\047\uffdd\050\uffdd\051\uffdd\056\uffdd\001\002\000\004" +
    "\061\323\001\002\000\026\021\121\022\116\033\111\034" +
    "\104\035\110\040\125\056\123\057\112\060\105\061\115" +
    "\001\002\000\026\021\121\022\116\033\111\034\104\035" +
    "\110\040\125\056\123\057\112\060\105\061\115\001\002" +
    "\000\026\021\121\022\116\033\111\034\104\035\110\040" +
    "\125\056\123\057\112\060\105\061\115\001\002\000\014" +
    "\002\ufff8\004\ufff8\042\ufff8\043\ufff8\044\ufff8\001\002\000" +
    "\070\002\uffd2\004\uffd2\007\245\012\247\014\234\015\250" +
    "\016\241\017\233\023\243\024\235\025\223\026\227\027" +
    "\232\030\230\031\uffd2\033\226\034\244\036\240\037\uffd2" +
    "\041\uffd2\042\uffd2\043\uffd2\044\uffd2\047\225\050\231\051" +
    "\304\056\246\001\002\000\106\002\ufff5\004\ufff5\005\ufff5" +
    "\006\ufff5\007\ufff5\010\ufff5\012\ufff5\014\ufff5\015\ufff5\016" +
    "\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5\023\ufff5\024\ufff5" +
    "\025\ufff5\026\ufff5\027\ufff5\030\ufff5\031\ufff5\033\ufff5\034" +
    "\ufff5\036\ufff5\037\ufff5\040\163\041\ufff5\042\ufff5\043\ufff5" +
    "\044\ufff5\047\ufff5\050\ufff5\051\ufff5\056\ufff5\001\002\000" +
    "\026\021\121\022\116\033\111\034\104\035\110\040\125" +
    "\056\123\057\112\060\105\061\115\001\002\000\026\021" +
    "\121\022\116\033\111\034\104\035\110\040\125\056\123" +
    "\057\112\060\105\061\115\001\002\000\104\002\ufff4\004" +
    "\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\012\ufff4\014\ufff4" +
    "\015\ufff4\016\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4\023" +
    "\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4" +
    "\033\ufff4\034\ufff4\036\ufff4\037\ufff4\041\ufff4\042\ufff4\043" +
    "\ufff4\044\ufff4\047\ufff4\050\ufff4\051\ufff4\056\ufff4\001\002" +
    "\000\026\021\121\022\116\033\111\034\104\035\110\040" +
    "\125\056\123\057\112\060\105\061\115\001\002\000\030" +
    "\013\207\021\210\022\206\033\203\034\200\035\202\040" +
    "\125\056\211\057\204\060\105\061\115\001\002\000\026" +
    "\021\121\022\116\033\111\034\104\035\110\040\125\056" +
    "\123\057\112\060\105\061\115\001\002\000\072\002\uffe1" +
    "\004\uffe1\006\uffe1\007\uffe1\012\uffe1\014\uffe1\015\uffe1\016" +
    "\uffe1\017\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1" +
    "\030\uffe1\031\uffe1\033\uffe1\034\uffe1\036\uffe1\037\uffe1\041" +
    "\uffe1\042\uffe1\043\uffe1\044\uffe1\047\uffe1\050\uffe1\051\uffe1" +
    "\056\uffe1\001\002\000\026\021\134\022\133\033\131\034" +
    "\126\035\130\040\135\056\136\057\132\060\105\061\115" +
    "\001\002\000\026\021\121\022\116\033\111\034\104\035" +
    "\110\040\125\056\123\057\112\060\105\061\115\001\002" +
    "\000\016\005\156\010\160\020\155\021\157\022\153\041" +
    "\154\001\002\000\026\021\121\022\116\033\111\034\104" +
    "\035\110\040\125\056\123\057\112\060\105\061\115\001" +
    "\002\000\026\021\121\022\116\033\111\034\104\035\110" +
    "\040\125\056\123\057\112\060\105\061\115\001\002\000" +
    "\026\021\121\022\116\033\111\034\104\035\110\040\125" +
    "\056\123\057\112\060\105\061\115\001\002\000\026\021" +
    "\121\022\116\033\111\034\104\035\110\040\125\056\123" +
    "\057\112\060\105\061\115\001\002\000\026\021\121\022" +
    "\116\033\111\034\104\035\110\040\125\056\123\057\112" +
    "\060\105\061\115\001\002\000\010\040\135\060\105\061" +
    "\115\001\002\000\026\021\121\022\116\033\111\034\104" +
    "\035\110\040\125\056\123\057\112\060\105\061\115\001" +
    "\002\000\004\041\140\001\002\000\072\002\uffe0\004\uffe0" +
    "\006\uffe0\007\uffe0\012\uffe0\014\uffe0\015\uffe0\016\uffe0\017" +
    "\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0" +
    "\031\uffe0\033\uffe0\034\uffe0\036\uffe0\037\uffe0\041\uffe0\042" +
    "\uffe0\043\uffe0\044\uffe0\047\uffe0\050\uffe0\051\uffe0\056\uffe0" +
    "\001\002\000\004\041\142\001\002\000\072\002\uffe4\004" +
    "\uffe4\006\uffe4\007\uffe4\012\uffe4\014\uffe4\015\uffe4\016\uffe4" +
    "\017\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030" +
    "\uffe4\031\uffe4\033\uffe4\034\uffe4\036\uffe4\037\uffe4\041\uffe4" +
    "\042\uffe4\043\uffe4\044\uffe4\047\uffe4\050\uffe4\051\uffe4\056" +
    "\uffe4\001\002\000\004\041\144\001\002\000\072\002\uffe6" +
    "\004\uffe6\006\uffe6\007\uffe6\012\uffe6\014\uffe6\015\uffe6\016" +
    "\uffe6\017\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6" +
    "\030\uffe6\031\uffe6\033\uffe6\034\uffe6\036\uffe6\037\uffe6\041" +
    "\uffe6\042\uffe6\043\uffe6\044\uffe6\047\uffe6\050\uffe6\051\uffe6" +
    "\056\uffe6\001\002\000\004\041\146\001\002\000\072\002" +
    "\uffde\004\uffde\006\uffde\007\uffde\012\uffde\014\uffde\015\uffde" +
    "\016\uffde\017\uffde\023\uffde\024\uffde\025\uffde\026\uffde\027" +
    "\uffde\030\uffde\031\uffde\033\uffde\034\uffde\036\uffde\037\uffde" +
    "\041\uffde\042\uffde\043\uffde\044\uffde\047\uffde\050\uffde\051" +
    "\uffde\056\uffde\001\002\000\004\041\150\001\002\000\072" +
    "\002\uffe8\004\uffe8\006\uffe8\007\uffe8\012\uffe8\014\uffe8\015" +
    "\uffe8\016\uffe8\017\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8" +
    "\027\uffe8\030\uffe8\031\uffe8\033\uffe8\034\uffe8\036\uffe8\037" +
    "\uffe8\041\uffe8\042\uffe8\043\uffe8\044\uffe8\047\uffe8\050\uffe8" +
    "\051\uffe8\056\uffe8\001\002\000\004\041\152\001\002\000" +
    "\072\002\uffe2\004\uffe2\006\uffe2\007\uffe2\012\uffe2\014\uffe2" +
    "\015\uffe2\016\uffe2\017\uffe2\023\uffe2\024\uffe2\025\uffe2\026" +
    "\uffe2\027\uffe2\030\uffe2\031\uffe2\033\uffe2\034\uffe2\036\uffe2" +
    "\037\uffe2\041\uffe2\042\uffe2\043\uffe2\044\uffe2\047\uffe2\050" +
    "\uffe2\051\uffe2\056\uffe2\001\002\000\104\002\uffed\004\uffed" +
    "\005\uffed\006\uffed\007\uffed\010\uffed\012\uffed\014\uffed\015" +
    "\uffed\016\uffed\017\uffed\020\uffed\021\uffed\022\uffed\023\uffed" +
    "\024\uffed\025\uffed\026\uffed\027\uffed\030\uffed\031\uffed\033" +
    "\uffed\034\uffed\036\uffed\037\uffed\041\uffed\042\uffed\043\uffed" +
    "\044\uffed\047\uffed\050\uffed\051\uffed\056\uffed\001\002\000" +
    "\104\002\uffec\004\uffec\005\uffec\006\uffec\007\uffec\010\uffec" +
    "\012\uffec\014\uffec\015\uffec\016\uffec\017\uffec\020\uffec\021" +
    "\uffec\022\uffec\023\uffec\024\uffec\025\uffec\026\uffec\027\uffec" +
    "\030\uffec\031\uffec\033\uffec\034\uffec\036\uffec\037\uffec\041" +
    "\uffec\042\uffec\043\uffec\044\uffec\047\uffec\050\uffec\051\uffec" +
    "\056\uffec\001\002\000\004\061\174\001\002\000\026\021" +
    "\121\022\116\033\111\034\104\035\110\040\125\056\123" +
    "\057\112\060\105\061\115\001\002\000\104\002\uffee\004" +
    "\uffee\005\uffee\006\uffee\007\uffee\010\uffee\012\uffee\014\uffee" +
    "\015\uffee\016\uffee\017\uffee\020\uffee\021\uffee\022\uffee\023" +
    "\uffee\024\uffee\025\uffee\026\uffee\027\uffee\030\uffee\031\uffee" +
    "\033\uffee\034\uffee\036\uffee\037\uffee\041\uffee\042\uffee\043" +
    "\uffee\044\uffee\047\uffee\050\uffee\051\uffee\056\uffee\001\002" +
    "\000\004\061\161\001\002\000\106\002\ufff1\004\ufff1\005" +
    "\ufff1\006\ufff1\007\ufff1\010\ufff1\012\ufff1\014\ufff1\015\ufff1" +
    "\016\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\024" +
    "\ufff1\025\ufff1\026\ufff1\027\ufff1\030\ufff1\031\ufff1\033\ufff1" +
    "\034\ufff1\036\ufff1\037\ufff1\040\163\041\ufff1\042\ufff1\043" +
    "\ufff1\044\ufff1\047\ufff1\050\ufff1\051\ufff1\056\ufff1\001\002" +
    "\000\104\002\ufff2\004\ufff2\005\ufff2\006\ufff2\007\ufff2\010" +
    "\ufff2\012\ufff2\014\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2" +
    "\021\ufff2\022\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2\027" +
    "\ufff2\030\ufff2\031\ufff2\033\ufff2\034\ufff2\036\ufff2\037\ufff2" +
    "\041\ufff2\042\ufff2\043\ufff2\044\ufff2\047\ufff2\050\ufff2\051" +
    "\ufff2\056\ufff2\001\002\000\032\013\117\021\121\022\116" +
    "\033\111\034\104\035\110\040\122\041\166\056\123\057" +
    "\112\060\105\061\115\001\002\000\006\037\uffbc\041\uffbc" +
    "\001\002\000\006\037\167\041\170\001\002\000\104\002" +
    "\uffbe\004\uffbe\005\uffbe\006\uffbe\007\uffbe\010\uffbe\012\uffbe" +
    "\014\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022" +
    "\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe" +
    "\031\uffbe\033\uffbe\034\uffbe\036\uffbe\037\uffbe\041\uffbe\042" +
    "\uffbe\043\uffbe\044\uffbe\047\uffbe\050\uffbe\051\uffbe\056\uffbe" +
    "\001\002\000\030\013\117\021\121\022\116\033\111\034" +
    "\104\035\110\040\122\056\123\057\112\060\105\061\115" +
    "\001\002\000\104\002\uffbf\004\uffbf\005\uffbf\006\uffbf\007" +
    "\uffbf\010\uffbf\012\uffbf\014\uffbf\015\uffbf\016\uffbf\017\uffbf" +
    "\020\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf\026" +
    "\uffbf\027\uffbf\030\uffbf\031\uffbf\033\uffbf\034\uffbf\036\uffbf" +
    "\037\uffbf\041\uffbf\042\uffbf\043\uffbf\044\uffbf\047\uffbf\050" +
    "\uffbf\051\uffbf\056\uffbf\001\002\000\006\037\uffbd\041\uffbd" +
    "\001\002\000\004\006\173\001\002\000\104\002\ufff3\004" +
    "\ufff3\005\ufff3\006\ufff3\007\ufff3\010\ufff3\012\ufff3\014\ufff3" +
    "\015\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3\023" +
    "\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3\030\ufff3\031\ufff3" +
    "\033\ufff3\034\ufff3\036\ufff3\037\ufff3\041\ufff3\042\ufff3\043" +
    "\ufff3\044\ufff3\047\ufff3\050\ufff3\051\ufff3\056\ufff3\001\002" +
    "\000\106\002\uffef\004\uffef\005\uffef\006\uffef\007\uffef\010" +
    "\uffef\012\uffef\014\uffef\015\uffef\016\uffef\017\uffef\020\uffef" +
    "\021\uffef\022\uffef\023\uffef\024\uffef\025\uffef\026\uffef\027" +
    "\uffef\030\uffef\031\uffef\033\uffef\034\uffef\036\uffef\037\uffef" +
    "\040\163\041\uffef\042\uffef\043\uffef\044\uffef\047\uffef\050" +
    "\uffef\051\uffef\056\uffef\001\002\000\104\002\ufff0\004\ufff0" +
    "\005\ufff0\006\ufff0\007\ufff0\010\ufff0\012\ufff0\014\ufff0\015" +
    "\ufff0\016\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0" +
    "\024\ufff0\025\ufff0\026\ufff0\027\ufff0\030\ufff0\031\ufff0\033" +
    "\ufff0\034\ufff0\036\ufff0\037\ufff0\041\ufff0\042\ufff0\043\ufff0" +
    "\044\ufff0\047\ufff0\050\ufff0\051\ufff0\056\ufff0\001\002\000" +
    "\004\041\177\001\002\000\072\002\uffea\004\uffea\006\uffea" +
    "\007\uffea\012\uffea\014\uffea\015\uffea\016\uffea\017\uffea\023" +
    "\uffea\024\uffea\025\uffea\026\uffea\027\uffea\030\uffea\031\uffea" +
    "\033\uffea\034\uffea\036\uffea\037\uffea\041\uffea\042\uffea\043" +
    "\uffea\044\uffea\047\uffea\050\uffea\051\uffea\056\uffea\001\002" +
    "\000\026\021\121\022\116\033\111\034\104\035\110\040" +
    "\125\056\123\057\112\060\105\061\115\001\002\000\064" +
    "\005\156\007\uffdd\010\160\012\uffdd\014\uffdd\015\uffdd\016" +
    "\uffdd\017\uffdd\020\155\021\157\022\153\023\uffdd\024\uffdd" +
    "\025\uffdd\026\uffdd\027\uffdd\030\uffdd\033\uffdd\034\uffdd\036" +
    "\uffdd\041\154\047\uffdd\050\uffdd\051\uffdd\056\uffdd\001\002" +
    "\000\026\021\121\022\116\033\111\034\104\035\110\040" +
    "\125\056\123\057\112\060\105\061\115\001\002\000\026" +
    "\021\121\022\116\033\111\034\104\035\110\040\125\056" +
    "\123\057\112\060\105\061\115\001\002\000\026\021\121" +
    "\022\116\033\111\034\104\035\110\040\125\056\123\057" +
    "\112\060\105\061\115\001\002\000\050\007\245\012\247" +
    "\014\234\015\250\016\241\017\233\023\243\024\235\025" +
    "\223\026\227\027\232\030\230\033\226\034\244\036\240" +
    "\047\225\050\231\051\237\056\246\001\002\000\026\021" +
    "\121\022\116\033\111\034\104\035\110\040\125\056\123" +
    "\057\112\060\105\061\115\001\002\000\026\021\121\022" +
    "\116\033\111\034\104\035\110\040\125\056\123\057\112" +
    "\060\105\061\115\001\002\000\026\021\121\022\116\033" +
    "\111\034\104\035\110\040\125\056\123\057\112\060\105" +
    "\061\115\001\002\000\026\021\121\022\116\033\111\034" +
    "\104\035\110\040\125\056\123\057\112\060\105\061\115" +
    "\001\002\000\052\007\uffe1\012\uffe1\014\uffe1\015\uffe1\016" +
    "\uffe1\017\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1" +
    "\030\uffe1\033\uffe1\034\uffe1\036\uffe1\041\140\047\uffe1\050" +
    "\uffe1\051\uffe1\056\uffe1\001\002\000\052\007\uffe5\012\uffe5" +
    "\014\uffe5\015\uffe5\016\uffe5\017\uffe5\023\uffe5\024\uffe5\025" +
    "\uffe5\026\uffe5\027\uffe5\030\uffe5\033\uffe5\034\uffe5\036\uffe5" +
    "\041\142\047\uffe5\050\uffe5\051\uffe5\056\uffe5\001\002\000" +
    "\004\051\215\001\002\000\030\013\117\021\121\022\116" +
    "\033\111\034\104\035\110\040\122\056\123\057\112\060" +
    "\105\061\115\001\002\000\004\031\217\001\002\000\030" +
    "\013\117\021\121\022\116\033\111\034\104\035\110\040" +
    "\122\056\123\057\112\060\105\061\115\001\002\000\004" +
    "\041\221\001\002\000\022\002\uffd5\004\uffd5\031\uffd5\037" +
    "\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5\001\002\000\052" +
    "\007\uffe7\012\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7\023" +
    "\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7\033\uffe7" +
    "\034\uffe7\036\uffe7\041\144\047\uffe7\050\uffe7\051\uffe7\056" +
    "\uffe7\001\002\000\026\021\uffc1\022\uffc1\033\uffc1\034\uffc1" +
    "\035\uffc1\040\uffc1\056\uffc1\057\uffc1\060\uffc1\061\uffc1\001" +
    "\002\000\026\021\121\022\116\033\111\034\104\035\110" +
    "\040\125\056\123\057\112\060\105\061\115\001\002\000" +
    "\030\013\uffcf\021\uffcf\022\uffcf\033\uffcf\034\uffcf\035\uffcf" +
    "\040\uffcf\056\uffcf\057\uffcf\060\uffcf\061\uffcf\001\002\000" +
    "\030\013\uffce\021\uffce\022\uffce\033\uffce\034\uffce\035\uffce" +
    "\040\uffce\056\uffce\057\uffce\060\uffce\061\uffce\001\002\000" +
    "\026\021\uffc0\022\uffc0\033\uffc0\034\uffc0\035\uffc0\040\uffc0" +
    "\056\uffc0\057\uffc0\060\uffc0\061\uffc0\001\002\000\026\021" +
    "\uffc3\022\uffc3\033\uffc3\034\uffc3\035\uffc3\040\uffc3\056\uffc3" +
    "\057\uffc3\060\uffc3\061\uffc3\001\002\000\030\013\uffca\021" +
    "\uffca\022\uffca\033\uffca\034\uffca\035\uffca\040\uffca\056\uffca" +
    "\057\uffca\060\uffca\061\uffca\001\002\000\026\021\uffc2\022" +
    "\uffc2\033\uffc2\034\uffc2\035\uffc2\040\uffc2\056\uffc2\057\uffc2" +
    "\060\uffc2\061\uffc2\001\002\000\030\013\uffcc\021\uffcc\022" +
    "\uffcc\033\uffcc\034\uffcc\035\uffcc\040\uffcc\056\uffcc\057\uffcc" +
    "\060\uffcc\061\uffcc\001\002\000\026\021\uffc5\022\uffc5\033" +
    "\uffc5\034\uffc5\035\uffc5\040\uffc5\056\uffc5\057\uffc5\060\uffc5" +
    "\061\uffc5\001\002\000\026\021\uffc6\022\uffc6\033\uffc6\034" +
    "\uffc6\035\uffc6\040\uffc6\056\uffc6\057\uffc6\060\uffc6\061\uffc6" +
    "\001\002\000\030\013\117\021\121\022\116\033\111\034" +
    "\104\035\110\040\122\056\123\057\112\060\105\061\115" +
    "\001\002\000\030\013\117\021\121\022\116\033\111\034" +
    "\104\035\110\040\122\056\123\057\112\060\105\061\115" +
    "\001\002\000\030\013\uffd0\021\uffd0\022\uffd0\033\uffd0\034" +
    "\uffd0\035\uffd0\040\uffd0\056\uffd0\057\uffd0\060\uffd0\061\uffd0" +
    "\001\002\000\030\013\uffcb\021\uffcb\022\uffcb\033\uffcb\034" +
    "\uffcb\035\uffcb\040\uffcb\056\uffcb\057\uffcb\060\uffcb\061\uffcb" +
    "\001\002\000\030\013\117\021\121\022\116\033\111\034" +
    "\104\035\110\040\122\056\123\057\112\060\105\061\115" +
    "\001\002\000\026\021\uffc4\022\uffc4\033\uffc4\034\uffc4\035" +
    "\uffc4\040\uffc4\056\uffc4\057\uffc4\060\uffc4\061\uffc4\001\002" +
    "\000\030\013\uffcd\021\uffcd\022\uffcd\033\uffcd\034\uffcd\035" +
    "\uffcd\040\uffcd\056\uffcd\057\uffcd\060\uffcd\061\uffcd\001\002" +
    "\000\030\013\uffd1\021\uffd1\022\uffd1\033\uffd1\034\uffd1\035" +
    "\uffd1\040\uffd1\056\uffd1\057\uffd1\060\uffd1\061\uffd1\001\002" +
    "\000\030\013\uffc8\021\uffc8\022\uffc8\033\uffc8\034\uffc8\035" +
    "\uffc8\040\uffc8\056\uffc8\057\uffc8\060\uffc8\061\uffc8\001\002" +
    "\000\030\013\uffc9\021\uffc9\022\uffc9\033\uffc9\034\uffc9\035" +
    "\uffc9\040\uffc9\056\uffc9\057\uffc9\060\uffc9\061\uffc9\001\002" +
    "\000\026\021\uffc7\022\uffc7\033\uffc7\034\uffc7\035\uffc7\040" +
    "\uffc7\056\uffc7\057\uffc7\060\uffc7\061\uffc7\001\002\000\004" +
    "\041\252\001\002\000\022\002\uffdb\004\uffdb\031\uffdb\037" +
    "\uffdb\041\uffdb\042\uffdb\043\uffdb\044\uffdb\001\002\000\004" +
    "\031\254\001\002\000\030\013\117\021\121\022\116\033" +
    "\111\034\104\035\110\040\122\056\123\057\112\060\105" +
    "\061\115\001\002\000\004\041\256\001\002\000\022\002" +
    "\uffd3\004\uffd3\031\uffd3\037\uffd3\041\uffd3\042\uffd3\043\uffd3" +
    "\044\uffd3\001\002\000\004\041\260\001\002\000\022\002" +
    "\uffd9\004\uffd9\031\uffd9\037\uffd9\041\uffd9\042\uffd9\043\uffd9" +
    "\044\uffd9\001\002\000\004\051\262\001\002\000\030\013" +
    "\117\021\121\022\116\033\111\034\104\035\110\040\122" +
    "\056\123\057\112\060\105\061\115\001\002\000\004\031" +
    "\264\001\002\000\030\013\117\021\121\022\116\033\111" +
    "\034\104\035\110\040\122\056\123\057\112\060\105\061" +
    "\115\001\002\000\004\041\266\001\002\000\022\002\uffd7" +
    "\004\uffd7\031\uffd7\037\uffd7\041\uffd7\042\uffd7\043\uffd7\044" +
    "\uffd7\001\002\000\052\007\uffdf\012\uffdf\014\uffdf\015\uffdf" +
    "\016\uffdf\017\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027" +
    "\uffdf\030\uffdf\033\uffdf\034\uffdf\036\uffdf\041\146\047\uffdf" +
    "\050\uffdf\051\uffdf\056\uffdf\001\002\000\052\007\uffe9\012" +
    "\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\023\uffe9\024\uffe9" +
    "\025\uffe9\026\uffe9\027\uffe9\030\uffe9\033\uffe9\034\uffe9\036" +
    "\uffe9\041\150\047\uffe9\050\uffe9\051\uffe9\056\uffe9\001\002" +
    "\000\052\007\uffe3\012\uffe3\014\uffe3\015\uffe3\016\uffe3\017" +
    "\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3" +
    "\033\uffe3\034\uffe3\036\uffe3\041\152\047\uffe3\050\uffe3\051" +
    "\uffe3\056\uffe3\001\002\000\052\007\uffeb\012\uffeb\014\uffeb" +
    "\015\uffeb\016\uffeb\017\uffeb\023\uffeb\024\uffeb\025\uffeb\026" +
    "\uffeb\027\uffeb\030\uffeb\033\uffeb\034\uffeb\036\uffeb\041\177" +
    "\047\uffeb\050\uffeb\051\uffeb\056\uffeb\001\002\000\072\002" +
    "\uffe5\004\uffe5\006\uffe5\007\uffe5\012\uffe5\014\uffe5\015\uffe5" +
    "\016\uffe5\017\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027" +
    "\uffe5\030\uffe5\031\uffe5\033\uffe5\034\uffe5\036\uffe5\037\uffe5" +
    "\041\uffe5\042\uffe5\043\uffe5\044\uffe5\047\uffe5\050\uffe5\051" +
    "\uffe5\056\uffe5\001\002\000\004\051\275\001\002\000\030" +
    "\013\117\021\121\022\116\033\111\034\104\035\110\040" +
    "\122\056\123\057\112\060\105\061\115\001\002\000\004" +
    "\031\277\001\002\000\030\013\117\021\121\022\116\033" +
    "\111\034\104\035\110\040\122\056\123\057\112\060\105" +
    "\061\115\001\002\000\022\002\uffd6\004\uffd6\031\uffd6\037" +
    "\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6\001\002\000\072" +
    "\002\uffe7\004\uffe7\006\uffe7\007\uffe7\012\uffe7\014\uffe7\015" +
    "\uffe7\016\uffe7\017\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7" +
    "\027\uffe7\030\uffe7\031\uffe7\033\uffe7\034\uffe7\036\uffe7\037" +
    "\uffe7\041\uffe7\042\uffe7\043\uffe7\044\uffe7\047\uffe7\050\uffe7" +
    "\051\uffe7\056\uffe7\001\002\000\026\021\121\022\116\033" +
    "\111\034\104\035\110\040\125\056\123\057\112\060\105" +
    "\061\115\001\002\000\030\013\117\021\121\022\116\033" +
    "\111\034\104\035\110\040\122\056\123\057\112\060\105" +
    "\061\115\001\002\000\030\013\117\021\121\022\116\033" +
    "\111\034\104\035\110\040\122\056\123\057\112\060\105" +
    "\061\115\001\002\000\030\013\117\021\121\022\116\033" +
    "\111\034\104\035\110\040\122\056\123\057\112\060\105" +
    "\061\115\001\002\000\022\002\uffdc\004\uffdc\031\uffdc\037" +
    "\uffdc\041\uffdc\042\uffdc\043\uffdc\044\uffdc\001\002\000\004" +
    "\031\310\001\002\000\030\013\117\021\121\022\116\033" +
    "\111\034\104\035\110\040\122\056\123\057\112\060\105" +
    "\061\115\001\002\000\022\002\uffd4\004\uffd4\031\uffd4\037" +
    "\uffd4\041\uffd4\042\uffd4\043\uffd4\044\uffd4\001\002\000\022" +
    "\002\uffda\004\uffda\031\uffda\037\uffda\041\uffda\042\uffda\043" +
    "\uffda\044\uffda\001\002\000\004\051\314\001\002\000\030" +
    "\013\117\021\121\022\116\033\111\034\104\035\110\040" +
    "\122\056\123\057\112\060\105\061\115\001\002\000\004" +
    "\031\316\001\002\000\030\013\117\021\121\022\116\033" +
    "\111\034\104\035\110\040\122\056\123\057\112\060\105" +
    "\061\115\001\002\000\022\002\uffd8\004\uffd8\031\uffd8\037" +
    "\uffd8\041\uffd8\042\uffd8\043\uffd8\044\uffd8\001\002\000\072" +
    "\002\uffdf\004\uffdf\006\uffdf\007\uffdf\012\uffdf\014\uffdf\015" +
    "\uffdf\016\uffdf\017\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf" +
    "\027\uffdf\030\uffdf\031\uffdf\033\uffdf\034\uffdf\036\uffdf\037" +
    "\uffdf\041\uffdf\042\uffdf\043\uffdf\044\uffdf\047\uffdf\050\uffdf" +
    "\051\uffdf\056\uffdf\001\002\000\072\002\uffe9\004\uffe9\006" +
    "\uffe9\007\uffe9\012\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9" +
    "\023\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9\031" +
    "\uffe9\033\uffe9\034\uffe9\036\uffe9\037\uffe9\041\uffe9\042\uffe9" +
    "\043\uffe9\044\uffe9\047\uffe9\050\uffe9\051\uffe9\056\uffe9\001" +
    "\002\000\072\002\uffe3\004\uffe3\006\uffe3\007\uffe3\012\uffe3" +
    "\014\uffe3\015\uffe3\016\uffe3\017\uffe3\023\uffe3\024\uffe3\025" +
    "\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\033\uffe3\034\uffe3" +
    "\036\uffe3\037\uffe3\041\uffe3\042\uffe3\043\uffe3\044\uffe3\047" +
    "\uffe3\050\uffe3\051\uffe3\056\uffe3\001\002\000\014\002\ufff7" +
    "\004\ufff7\042\ufff7\043\ufff7\044\ufff7\001\002\000\072\002" +
    "\uffeb\004\uffeb\006\uffeb\007\uffeb\012\uffeb\014\uffeb\015\uffeb" +
    "\016\uffeb\017\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027" +
    "\uffeb\030\uffeb\031\uffeb\033\uffeb\034\uffeb\036\uffeb\037\uffeb" +
    "\041\uffeb\042\uffeb\043\uffeb\044\uffeb\047\uffeb\050\uffeb\051" +
    "\uffeb\056\uffeb\001\002\000\004\045\326\001\002\000\016" +
    "\044\023\052\021\053\012\054\020\055\022\061\015\001" +
    "\002\000\020\044\023\046\330\052\021\053\012\054\020" +
    "\055\022\061\015\001\002\000\004\032\331\001\002\000" +
    "\014\002\ufffa\004\ufffa\042\ufffa\043\ufffa\044\ufffa\001\002" +
    "\000\004\032\343\001\002\000\012\005\037\035\035\040" +
    "\036\061\336\001\002\000\006\005\030\032\335\001\002" +
    "\000\014\002\ufffd\004\ufffd\042\ufffd\043\ufffd\044\ufffd\001" +
    "\002\000\010\005\uffb0\032\uffb0\040\337\001\002\000\020" +
    "\041\uffb4\044\uffb4\052\uffb4\053\uffb4\054\uffb4\055\uffb4\061" +
    "\uffb4\001\002\000\020\041\uffa6\044\023\052\021\053\012" +
    "\054\020\055\022\061\015\001\002\000\004\041\342\001" +
    "\002\000\004\032\uffb3\001\002\000\014\002\ufffe\004\ufffe" +
    "\042\ufffe\043\ufffe\044\ufffe\001\002\000\014\002\001\004" +
    "\001\042\001\043\001\044\001\001\002\000\004\002\000" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\343\000\006\003\003\004\010\001\001\000\004\004" +
    "\343\001\001\000\012\006\333\010\331\024\332\025\012" +
    "\001\001\000\002\001\001\000\004\002\102\001\001\000" +
    "\010\006\016\024\015\025\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\025\025\001\001\000\002\001\001\000\004\025\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\046\001\001\000\012\005\047\011\050\024\051" +
    "\025\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\005\062\011\050\024\051\025\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\030\057\001\001\000\012\005\060\011\050" +
    "\024\051\025\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\005\065" +
    "\011\050\024\051\025\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\006\071\007\070\024\015\025\012" +
    "\001\001\000\010\006\073\024\015\025\012\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\012\105\013\117\020\113" +
    "\021\112\001\001\000\002\001\001\000\010\012\105\013" +
    "\117\020\323\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\012\105\013\117\020\321\001" +
    "\001\000\010\012\105\013\117\020\320\001\001\000\010" +
    "\012\105\013\117\020\317\001\001\000\002\001\001\000" +
    "\010\015\304\016\302\017\301\001\001\000\002\001\001" +
    "\000\010\012\105\013\117\020\300\001\001\000\010\012" +
    "\105\013\117\020\273\001\001\000\002\001\001\000\010" +
    "\012\105\013\117\020\272\001\001\000\010\012\200\013" +
    "\117\020\204\001\001\000\010\012\105\013\117\020\123" +
    "\001\001\000\002\001\001\000\006\012\126\013\117\001" +
    "\001\000\010\012\105\013\117\020\175\001\001\000\002" +
    "\001\001\000\010\012\105\013\117\020\150\001\001\000" +
    "\010\012\105\013\117\020\146\001\001\000\010\012\105" +
    "\013\117\020\144\001\001\000\010\012\105\013\117\020" +
    "\142\001\001\000\010\012\105\013\117\020\140\001\001" +
    "\000\006\012\126\013\117\001\001\000\010\012\105\013" +
    "\117\020\136\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\174" +
    "\001\001\000\010\012\105\013\117\020\171\001\001\000" +
    "\002\001\001\000\004\013\161\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\012\105\013\117\014\164\020" +
    "\113\021\163\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\012\105\013\117\020\113\021" +
    "\170\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\012\105" +
    "\013\117\020\271\001\001\000\002\001\001\000\010\012" +
    "\105\013\117\020\270\001\001\000\010\012\105\013\117" +
    "\020\267\001\001\000\010\012\105\013\117\020\266\001" +
    "\001\000\010\015\241\016\235\017\223\001\001\000\010" +
    "\012\105\013\117\020\221\001\001\000\010\012\105\013" +
    "\117\020\213\001\001\000\010\012\105\013\117\020\212" +
    "\001\001\000\010\012\105\013\117\020\211\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\012\105\013\117\020\113\021\215\001\001\000\002\001" +
    "\001\000\012\012\105\013\117\020\113\021\217\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\012\105\013\117\020\260\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\012" +
    "\105\013\117\020\113\021\256\001\001\000\012\012\105" +
    "\013\117\020\113\021\252\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\012\105\013\117\020\113\021\250" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\012\105\013\117\020\113\021\254\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\012\105\013\117\020\113" +
    "\021\262\001\001\000\002\001\001\000\012\012\105\013" +
    "\117\020\113\021\264\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\012\105\013\117\020\113\021\275\001\001\000" +
    "\002\001\001\000\012\012\105\013\117\020\113\021\277" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\012" +
    "\105\013\117\020\312\001\001\000\012\012\105\013\117" +
    "\020\113\021\311\001\001\000\012\012\105\013\117\020" +
    "\113\021\306\001\001\000\012\012\105\013\117\020\113" +
    "\021\305\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\012\105\013\117\020\113\021\310\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\012" +
    "\105\013\117\020\113\021\314\001\001\000\002\001\001" +
    "\000\012\012\105\013\117\020\113\021\316\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\006\071\007\326\024\015\025\012\001\001" +
    "\000\010\006\073\024\015\025\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\337\001\001\000\012\005\340\011\050\024\051" +
    "\025\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



   
	public CodeGenerator cg = new CodeGenerator();

    public void report_error(String message, Object info) {
   
       
        StringBuilder m = new StringBuilder("Error");
   
        if (info instanceof java_cup.runtime.Symbol) {
     
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {                
                       m.append(" in line "+(s.left+1));   
     
                if (s.right >= 0)                    
                       m.append(", column "+(s.right+1));
            }
        }
   
        m.append(" : "+message);
   
        System.err.println(m);
    }
   
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // type ::= type STAR 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=t + "*"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // type ::= type LBRACKET NUMBER RBRACKET 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=t + "[" + n + "]"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // type ::= type LBRACKET RBRACKET 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT=t + "[]"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // type ::= pre_type 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // pre_type ::= CONST pre_type 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT="const" + p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // pre_type ::= UN_SIGNED pre_type 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT="signed" + " " + p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // pre_type ::= STRUCT ID 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= "struct " + i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // pre_type ::= LONG LONG 
            {
              String RESULT =null;
		 RESULT="long long"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // pre_type ::= LONG 
            {
              String RESULT =null;
		 RESULT="long"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // pre_type ::= SHORT 
            {
              String RESULT =null;
		 RESULT="short"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // pre_type ::= ID 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ident_funcpointer ::= type LPAREN STAR RPAREN LPAREN NT$2 params RPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String p4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ps2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ps2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ps2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			func_decl funcp = parser.cg.paramsowner;
			funcp.pointer = true;
			parser.cg.paramsowner = parser.cg.params_owners.pop();
			RESULT = funcp;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident_funcpointer",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // NT$2 ::= 
            {
              Object RESULT =null;
		int p4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String p4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

			func_decl funcp = new func_decl();
			funcp.pointer = true;
			funcp.setReturn_type(p4);
			parser.cg.params_owners.push(parser.cg.paramsowner);
			parser.cg.paramsowner = funcp;  
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // params ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // params ::= ident_funcpointer COMMA params 
            {
              Object RESULT =null;
		int p5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object p5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ps2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ps2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ps2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			parser.cg.paramsowner.pushParam(p5);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // params ::= ident_funcpointer 
            {
              Object RESULT =null;
		int p4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			parser.cg.paramsowner.pushParam(p4);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // params ::= type COMMA DOTS 
            {
              Object RESULT =null;
		int p3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
			parser.cg.paramsowner.pushParam(p3);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // params ::= type COMMA params 
            {
              Object RESULT =null;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int psright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ps = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			parser.cg.paramsowner.pushParam(p2);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // params ::= type 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			parser.cg.paramsowner.pushParam(p);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // defin ::= type LPAREN STAR ID RPAREN LPAREN NT$1 params RPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int i7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int i7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String i7 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int i8left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i8right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i8 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ps = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			func_decl funcp = parser.cg.paramsowner;
			funcp.pointer = true;
			parser.cg.var.setFuncpointer(funcp);
			parser.cg.paramsowner = parser.cg.params_owners.pop();
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("defin",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // NT$1 ::= 
            {
              Object RESULT =null;
		int i7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i7 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int i8left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i8right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i8 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 
			parser.cg.var.setType(i7+"*");
			parser.cg.var.setID(i8);
			func_decl funcp = new func_decl();
			funcp.setID(i8);
			funcp.setReturn_type(i7+"*");
			parser.cg.params_owners.push(parser.cg.paramsowner);
			parser.cg.paramsowner = funcp;  
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // defin ::= defin LBRACKET NUMBER RBRACKET 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			parser.cg.var.addArray(n);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("defin",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // defin ::= defin LBRACKET RBRACKET 
            {
              Object RESULT =null;
		
			parser.cg.var.addArray(0);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("defin",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // defin ::= type ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			parser.cg.var.setType(i);
			parser.cg.var.setID(i2);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("defin",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // st_body ::= st_body defin SEMI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
			parser.cg.struct.addMember(parser.cg.var);
		        parser.cg.var = new var_decl();  
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("st_body",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // st_body ::= defin SEMI 
            {
              Object RESULT =null;
		
			parser.cg.struct.addMember(parser.cg.var);
		        parser.cg.var = new var_decl(); 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("st_body",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // func ::= type ID LPAREN NT$0 params RPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
			RESULT = e + " " + e2 + "(" + p + ");"; 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$0 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 
			parser.cg.func.setReturn_type(e);
			parser.cg.func.setID(e2);
			parser.cg.paramsowner = parser.cg.func;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // macro ::= macro RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("macro",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // macro ::= macro COMMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("macro",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // macro ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("macro",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // macro_params ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("macro_params",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // macro_params ::= LPAREN ID macro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("macro_params",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // macro_params ::= LPAREN ID RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("macro_params",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // macro_params ::= LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("macro_params",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // args ::= exp3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // args ::= args COMMA exp3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // func_call ::= ID LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_call",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // func_call ::= ID LPAREN args RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_call",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // LogicalS ::= OR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalS",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // LogicalS ::= AND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalS",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // LogicalS ::= NOTEQUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalS",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // LogicalS ::= EQUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalS",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // LogicalS ::= GE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalS",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // LogicalS ::= GREATER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalS",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // LogicalS ::= LE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalS",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // LogicalS ::= LESS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalS",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // B2 ::= AMPERSAND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("B2",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // B2 ::= BAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("B2",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // B2 ::= HAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("B2",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // B2 ::= GG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("B2",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // B2 ::= LL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("B2",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Ar2 ::= MINUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ar2",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Ar2 ::= PLUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ar2",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Ar2 ::= PERCENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ar2",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Ar2 ::= DIVIDE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ar2",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Ar2 ::= ASSIGN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ar2",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp3 ::= exp2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp3 ::= LPAREN exp2 QUESTIONMARK exp3 COLON exp3 RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp3 ::= exp2 QUESTIONMARK exp3 COLON exp3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp3 ::= LPAREN BARDOT exp2 QUESTIONMARK exp3 COLON exp3 RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp3 ::= BARDOT exp2 QUESTIONMARK exp3 COLON exp3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp3 ::= LPAREN exp2 LogicalS exp2 QUESTIONMARK exp3 COLON exp3 RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp3 ::= exp2 LogicalS exp2 QUESTIONMARK exp3 COLON exp3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp3 ::= LPAREN exp2 B2 exp3 RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exp3 ::= exp2 B2 exp3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exp3 ::= LPAREN exp2 Ar2 exp3 RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exp3 ::= exp2 Ar2 exp3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exp2 ::= exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exp2 ::= LPAREN TILDE exp2 RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exp2 ::= TILDE exp2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exp2 ::= LPAREN AMPERSAND exp2 RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exp2 ::= AMPERSAND exp2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // exp2 ::= LPAREN STAR exp2 RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exp2 ::= STAR exp2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp2 ::= LPAREN MM exp2 RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp2 ::= MM exp2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // exp2 ::= LPAREN PP exp2 RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // exp2 ::= PP exp2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // exp2 ::= LPAREN PLUS exp2 RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // exp2 ::= PLUS exp2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // exp2 ::= LPAREN MINUS exp2 RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // exp2 ::= MINUS exp2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // exp ::= LPAREN exp RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // exp ::= exp PP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // exp ::= exp MM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // exp ::= exp PREF ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // exp ::= exp PREF func_call 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // exp ::= exp DOT ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // exp ::= exp DOT func_call 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // exp ::= exp LBRACKET exp2 RBRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // exp ::= func_call 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // exp ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // exp ::= NUMBER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // def_body ::= ID STRUCT ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			def_expr dx = new def_expr();
			dx.ID = i;
			dx.exp = v;
			dx.isStruct = true;
			parser.cg.defines.add(dx);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_body",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // def_body ::= ID exp3 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			def_expr dx = new def_expr();
			dx.ID = i;
			//dx.exp = v;
			parser.cg.defines.add(dx);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_body",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // code_part ::= DEFINE def_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_part",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // code_part ::= STRUCT ID LQ st_body RQ SEMI 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
			parser.cg.struct.setName(i);
			parser.cg.declareStruct(); 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_part",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // code_part ::= TYPEDEF STRUCT LQ st_body RQ ID SEMI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.cg.declareTypedef_struct(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_part",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // code_part ::= TYPEDEF defin SEMI 
            {
              Object RESULT =null;
		int d2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.cg.declareTypedef_var(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_part",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // code_part ::= EXTERN defin SEMI 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.cg.declareVar(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_part",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // code_part ::= EXTERN func SEMI 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.cg.declareFunc(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_part",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= code_part 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= program code_part 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

