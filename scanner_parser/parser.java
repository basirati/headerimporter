
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Oct 27 12:35:21 CET 2014
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Oct 27 12:35:21 CET 2014
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\167\000\002\003\004\000\002\002\004\000\002\003" +
    "\003\000\002\004\005\000\002\004\005\000\002\004\005" +
    "\000\002\004\011\000\002\004\010\000\002\004\004\000" +
    "\002\002\004\000\002\002\007\000\002\002\005\000\002" +
    "\021\003\000\002\021\003\000\002\021\006\000\002\021" +
    "\005\000\002\021\005\000\002\021\005\000\002\021\005" +
    "\000\002\021\004\000\002\021\004\000\002\021\004\000" +
    "\002\021\004\000\002\021\004\000\002\021\004\000\002" +
    "\021\004\000\002\021\004\000\002\021\005\000\002\021" +
    "\005\000\002\021\005\000\002\021\007\000\002\021\004" +
    "\000\002\021\004\000\002\021\005\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\006\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\004\000\002\012\004\000\002\012\004" +
    "\000\002\012\004\000\002\012\004\000\002\012\004\000" +
    "\002\012\004\000\002\012\004\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\007\000\002\012" +
    "\004\000\002\012\004\000\002\012\005\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\013\006\000\002\013\005\000\002" +
    "\014\005\000\002\014\003\000\002\020\005\000\002\020" +
    "\003\000\002\020\002\000\002\025\002\000\002\010\010" +
    "\000\002\007\004\000\002\007\005\000\002\006\004\000" +
    "\002\006\005\000\002\006\006\000\002\026\002\000\002" +
    "\006\013\000\002\005\003\000\002\005\005\000\002\005" +
    "\005\000\002\005\003\000\002\005\005\000\002\005\002" +
    "\000\002\027\002\000\002\011\012\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\004\000" +
    "\002\023\004\000\002\023\004\000\002\022\003\000\002" +
    "\022\005\000\002\022\006\000\002\022\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\324\000\012\004\007\042\005\043\010\044\006\001" +
    "\002\000\014\002\326\004\007\042\005\043\010\044\006" +
    "\001\002\000\040\044\036\052\031\053\013\054\025\055" +
    "\027\060\016\061\015\062\023\063\022\064\033\065\020" +
    "\066\024\067\034\070\012\072\021\001\002\000\004\072" +
    "\306\001\002\000\004\072\113\001\002\000\040\044\014" +
    "\052\031\053\013\054\025\055\027\060\016\061\015\062" +
    "\023\063\022\064\033\065\020\066\024\067\034\070\012" +
    "\072\021\001\002\000\014\002\uffff\004\uffff\042\uffff\043" +
    "\uffff\044\uffff\001\002\000\016\005\uff94\035\uff94\037\uff94" +
    "\040\uff94\041\uff94\072\uff94\001\002\000\016\005\uff99\035" +
    "\uff99\037\uff99\040\uff99\041\uff99\072\uff99\001\002\000\006" +
    "\045\102\072\037\001\002\000\016\005\uff9d\035\uff9d\037" +
    "\uff9d\040\uff9d\041\uff9d\072\uff9d\001\002\000\016\005\uff9e" +
    "\035\uff9e\037\uff9e\040\uff9e\041\uff9e\072\uff9e\001\002\000" +
    "\012\005\051\035\047\040\050\072\046\001\002\000\016" +
    "\005\uff97\035\uff97\037\uff97\040\uff97\041\uff97\072\uff97\001" +
    "\002\000\016\005\uff92\035\uff92\037\uff92\040\uff92\041\uff92" +
    "\072\uff92\001\002\000\016\005\uff9b\035\uff9b\037\uff9b\040" +
    "\uff9b\041\uff9b\072\uff9b\001\002\000\016\005\uff9c\035\uff9c" +
    "\037\uff9c\040\uff9c\041\uff9c\072\uff9c\001\002\000\016\005" +
    "\uff96\035\uff96\037\uff96\040\uff96\041\uff96\072\uff96\001\002" +
    "\000\040\044\036\052\031\053\013\054\025\055\027\060" +
    "\016\061\015\062\023\063\022\064\033\065\020\066\024" +
    "\067\034\070\012\072\021\001\002\000\006\005\041\032" +
    "\040\001\002\000\040\044\036\052\031\053\013\054\025" +
    "\055\027\060\016\061\015\062\023\063\022\064\033\065" +
    "\020\066\024\067\034\070\012\072\021\001\002\000\016" +
    "\005\uff8e\035\uff8e\037\uff8e\040\uff8e\041\uff8e\072\uff8e\001" +
    "\002\000\016\005\uff9a\035\uff9a\037\uff9a\040\uff9a\041\uff9a" +
    "\072\uff9a\001\002\000\016\005\uff93\035\uff93\037\uff93\040" +
    "\uff93\041\uff93\072\uff93\001\002\000\016\005\uff98\035\uff98" +
    "\037\uff98\040\uff98\041\uff98\072\uff98\001\002\000\016\005" +
    "\uff95\035\uff95\037\uff95\040\uff95\041\uff95\072\uff95\001\002" +
    "\000\016\005\uff8f\035\uff8f\037\uff8f\040\uff8f\041\uff8f\072" +
    "\uff8f\001\002\000\004\072\037\001\002\000\016\005\uff91" +
    "\035\uff91\037\uff91\040\uff91\041\uff91\072\uff91\001\002\000" +
    "\014\002\ufffc\004\ufffc\042\ufffc\043\ufffc\044\ufffc\001\002" +
    "\000\006\006\043\071\042\001\002\000\004\006\044\001" +
    "\002\000\006\005\uffaa\032\uffaa\001\002\000\006\005\uffa9" +
    "\032\uffa9\001\002\000\016\005\uff90\035\uff90\037\uff90\040" +
    "\uff90\041\uff90\072\uff90\001\002\000\006\005\uffab\032\uffab" +
    "\001\002\000\016\005\uff8b\035\uff8b\037\uff8b\040\uff8b\041" +
    "\uff8b\072\uff8b\001\002\000\004\035\055\001\002\000\006" +
    "\006\052\071\053\001\002\000\016\005\uff8d\035\uff8d\037" +
    "\uff8d\040\uff8d\041\uff8d\072\uff8d\001\002\000\004\006\054" +
    "\001\002\000\016\005\uff8c\035\uff8c\037\uff8c\040\uff8c\041" +
    "\uff8c\072\uff8c\001\002\000\004\072\056\001\002\000\004" +
    "\041\057\001\002\000\004\040\060\001\002\000\042\041" +
    "\uffa8\044\uffa8\052\uffa8\053\uffa8\054\uffa8\055\uffa8\060\uffa8" +
    "\061\uffa8\062\uffa8\063\uffa8\064\uffa8\065\uffa8\066\uffa8\067" +
    "\uffa8\070\uffa8\072\uffa8\001\002\000\042\041\uffa1\044\036" +
    "\052\031\053\013\054\025\055\027\060\016\061\015\062" +
    "\023\063\022\064\033\065\020\066\024\067\034\070\012" +
    "\072\021\001\002\000\014\005\051\035\047\037\070\040" +
    "\071\041\uffa6\001\002\000\006\037\066\041\uffa3\001\002" +
    "\000\004\041\065\001\002\000\006\005\uffa7\032\uffa7\001" +
    "\002\000\042\041\uffa1\044\036\052\031\053\013\054\025" +
    "\055\027\060\016\061\015\062\023\063\022\064\033\065" +
    "\020\066\024\067\034\070\012\072\021\001\002\000\004" +
    "\041\uffa2\001\002\000\044\011\100\041\uffa1\044\036\052" +
    "\031\053\013\054\025\055\027\060\016\061\015\062\023" +
    "\063\022\064\033\065\020\066\024\067\034\070\012\072" +
    "\021\001\002\000\004\035\072\001\002\000\004\041\073" +
    "\001\002\000\004\040\074\001\002\000\042\041\uffa0\044" +
    "\uffa0\052\uffa0\053\uffa0\054\uffa0\055\uffa0\060\uffa0\061\uffa0" +
    "\062\uffa0\063\uffa0\064\uffa0\065\uffa0\066\uffa0\067\uffa0\070" +
    "\uffa0\072\uffa0\001\002\000\042\041\uffa1\044\036\052\031" +
    "\053\013\054\025\055\027\060\016\061\015\062\023\063" +
    "\022\064\033\065\020\066\024\067\034\070\012\072\021" +
    "\001\002\000\004\041\077\001\002\000\006\037\uff9f\041" +
    "\uff9f\001\002\000\004\041\uffa4\001\002\000\004\041\uffa5" +
    "\001\002\000\040\044\036\052\031\053\013\054\025\055" +
    "\027\060\016\061\015\062\023\063\022\064\033\065\020" +
    "\066\024\067\034\070\012\072\021\001\002\000\006\005" +
    "\041\032\112\001\002\000\042\044\036\046\105\052\031" +
    "\053\013\054\025\055\027\060\016\061\015\062\023\063" +
    "\022\064\033\065\020\066\024\067\034\070\012\072\021" +
    "\001\002\000\004\072\110\001\002\000\006\005\041\032" +
    "\107\001\002\000\042\044\uffac\046\uffac\052\uffac\053\uffac" +
    "\054\uffac\055\uffac\060\uffac\061\uffac\062\uffac\063\uffac\064" +
    "\uffac\065\uffac\066\uffac\067\uffac\070\uffac\072\uffac\001\002" +
    "\000\004\032\111\001\002\000\014\002\ufffb\004\ufffb\042" +
    "\ufffb\043\ufffb\044\ufffb\001\002\000\042\044\uffad\046\uffad" +
    "\052\uffad\053\uffad\054\uffad\055\uffad\060\uffad\061\uffad\062" +
    "\uffad\063\uffad\064\uffad\065\uffad\066\uffad\067\uffad\070\uffad" +
    "\072\uffad\001\002\000\032\013\124\021\130\022\125\033" +
    "\121\034\115\035\120\040\131\044\117\056\132\057\122" +
    "\071\116\072\123\001\002\000\014\002\ufff9\004\ufff9\042" +
    "\ufff9\043\ufff9\044\ufff9\001\002\000\030\013\142\021\145" +
    "\022\143\033\137\034\133\035\136\040\146\056\147\057" +
    "\140\071\134\072\141\001\002\000\076\002\ufff5\004\ufff5" +
    "\005\ufff5\007\ufff5\010\ufff5\012\ufff5\014\ufff5\015\ufff5\016" +
    "\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5\023\ufff5\024\ufff5" +
    "\025\ufff5\026\ufff5\027\ufff5\030\ufff5\033\ufff5\034\ufff5\036" +
    "\ufff5\041\ufff5\042\ufff5\043\ufff5\044\ufff5\047\ufff5\050\ufff5" +
    "\051\ufff5\056\ufff5\001\002\000\004\072\304\001\002\000" +
    "\030\013\142\021\145\022\143\033\137\034\133\035\136" +
    "\040\146\056\147\057\140\071\134\072\141\001\002\000" +
    "\030\013\142\021\145\022\143\033\137\034\133\035\136" +
    "\040\146\056\147\057\140\071\134\072\141\001\002\000" +
    "\030\013\142\021\145\022\143\033\137\034\133\035\136" +
    "\040\146\056\147\057\140\071\134\072\141\001\002\000" +
    "\004\040\206\001\002\000\030\013\142\021\145\022\143" +
    "\033\137\034\133\035\136\040\146\056\147\057\140\071" +
    "\134\072\141\001\002\000\030\013\142\021\145\022\143" +
    "\033\137\034\133\035\136\040\146\056\147\057\140\071" +
    "\134\072\141\001\002\000\074\002\ufff8\004\ufff8\005\247" +
    "\007\200\010\255\012\202\014\163\015\203\016\173\017" +
    "\161\020\246\021\253\022\252\023\176\024\167\025\151" +
    "\026\155\027\160\030\157\033\154\034\174\036\172\042" +
    "\ufff8\043\ufff8\044\ufff8\047\153\050\156\051\251\056\201" +
    "\001\002\000\076\002\ufff4\004\ufff4\005\ufff4\007\ufff4\010" +
    "\ufff4\012\ufff4\014\ufff4\015\ufff4\016\ufff4\017\ufff4\020\ufff4" +
    "\021\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4\027" +
    "\ufff4\030\ufff4\033\ufff4\034\ufff4\036\ufff4\041\ufff4\042\ufff4" +
    "\043\ufff4\044\ufff4\047\ufff4\050\ufff4\051\ufff4\056\ufff4\001" +
    "\002\000\030\013\142\021\145\022\143\033\137\034\133" +
    "\035\136\040\146\056\147\057\140\071\134\072\141\001" +
    "\002\000\034\013\124\021\130\022\125\033\121\034\115" +
    "\035\120\037\uffb0\040\243\041\uffb0\056\132\057\122\071" +
    "\116\072\241\001\002\000\030\013\142\021\145\022\143" +
    "\033\137\034\133\035\136\040\146\056\147\057\140\071" +
    "\134\072\141\001\002\000\030\013\142\021\145\022\143" +
    "\033\137\034\133\035\136\040\146\056\147\057\140\071" +
    "\134\072\141\001\002\000\104\002\uffdf\004\uffdf\005\uffdf" +
    "\006\uffdf\007\uffdf\010\uffdf\012\uffdf\014\uffdf\015\uffdf\016" +
    "\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf" +
    "\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\033\uffdf\034" +
    "\uffdf\036\uffdf\037\uffdf\041\uffdf\042\uffdf\043\uffdf\044\uffdf" +
    "\047\uffdf\050\uffdf\051\uffdf\056\uffdf\001\002\000\076\002" +
    "\uffe7\004\uffe7\005\164\007\uffe7\010\177\012\uffe7\014\uffe7" +
    "\015\uffe7\016\uffe7\017\uffe7\020\162\021\171\022\170\023" +
    "\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7\033\uffe7" +
    "\034\uffe7\036\uffe7\041\uffe7\042\uffe7\043\uffe7\044\uffe7\047" +
    "\uffe7\050\uffe7\051\uffe7\056\uffe7\001\002\000\030\013\142" +
    "\021\145\022\143\033\137\034\133\035\136\040\146\056" +
    "\147\057\140\071\134\072\141\001\002\000\030\013\142" +
    "\021\145\022\143\033\137\034\133\035\136\040\146\056" +
    "\147\057\140\071\134\072\141\001\002\000\030\013\142" +
    "\021\145\022\143\033\137\034\133\035\136\040\146\056" +
    "\147\057\140\071\134\072\141\001\002\000\106\002\uffde" +
    "\004\uffde\005\uffde\006\uffde\007\uffde\010\uffde\012\uffde\014" +
    "\uffde\015\uffde\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde" +
    "\023\uffde\024\uffde\025\uffde\026\uffde\027\uffde\030\uffde\031" +
    "\uffde\033\uffde\034\uffde\036\uffde\037\uffde\040\206\041\uffde" +
    "\042\uffde\043\uffde\044\uffde\047\uffde\050\uffde\051\uffde\056" +
    "\uffde\001\002\000\030\013\142\021\145\022\143\033\137" +
    "\034\133\035\136\040\146\056\147\057\140\071\134\072" +
    "\141\001\002\000\030\013\142\021\145\022\143\033\137" +
    "\034\133\035\136\040\146\056\147\057\140\071\134\072" +
    "\141\001\002\000\104\002\uffdd\004\uffdd\005\uffdd\006\uffdd" +
    "\007\uffdd\010\uffdd\012\uffdd\014\uffdd\015\uffdd\016\uffdd\017" +
    "\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd" +
    "\026\uffdd\027\uffdd\030\uffdd\031\uffdd\033\uffdd\034\uffdd\036" +
    "\uffdd\037\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd\047\uffdd" +
    "\050\uffdd\051\uffdd\056\uffdd\001\002\000\030\013\142\021" +
    "\145\022\143\033\137\034\133\035\136\040\146\056\147" +
    "\057\140\071\134\072\141\001\002\000\030\013\142\021" +
    "\145\022\143\033\137\034\133\035\136\040\146\056\147" +
    "\057\140\071\134\072\141\001\002\000\030\013\142\021" +
    "\145\022\143\033\137\034\133\035\136\040\146\056\147" +
    "\057\140\071\134\072\141\001\002\000\104\002\uffd0\004" +
    "\uffd0\005\164\006\uffd0\007\uffd0\010\177\012\uffd0\014\uffd0" +
    "\015\uffd0\016\uffd0\017\uffd0\020\162\021\171\022\170\023" +
    "\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0" +
    "\033\uffd0\034\uffd0\036\uffd0\037\uffd0\041\uffd0\042\uffd0\043" +
    "\uffd0\044\uffd0\047\uffd0\050\uffd0\051\uffd0\056\uffd0\001\002" +
    "\000\030\013\uffb8\021\uffb8\022\uffb8\033\uffb8\034\uffb8\035" +
    "\uffb8\040\uffb8\056\uffb8\057\uffb8\071\uffb8\072\uffb8\001\002" +
    "\000\030\013\142\021\145\022\143\033\137\034\133\035" +
    "\136\040\146\056\147\057\140\071\134\072\141\001\002" +
    "\000\030\013\uffc6\021\uffc6\022\uffc6\033\uffc6\034\uffc6\035" +
    "\uffc6\040\uffc6\056\uffc6\057\uffc6\071\uffc6\072\uffc6\001\002" +
    "\000\030\013\uffc5\021\uffc5\022\uffc5\033\uffc5\034\uffc5\035" +
    "\uffc5\040\uffc5\056\uffc5\057\uffc5\071\uffc5\072\uffc5\001\002" +
    "\000\030\013\uffb7\021\uffb7\022\uffb7\033\uffb7\034\uffb7\035" +
    "\uffb7\040\uffb7\056\uffb7\057\uffb7\071\uffb7\072\uffb7\001\002" +
    "\000\030\013\uffc1\021\uffc1\022\uffc1\033\uffc1\034\uffc1\035" +
    "\uffc1\040\uffc1\056\uffc1\057\uffc1\071\uffc1\072\uffc1\001\002" +
    "\000\030\013\uffba\021\uffba\022\uffba\033\uffba\034\uffba\035" +
    "\uffba\040\uffba\056\uffba\057\uffba\071\uffba\072\uffba\001\002" +
    "\000\030\013\uffb9\021\uffb9\022\uffb9\033\uffb9\034\uffb9\035" +
    "\uffb9\040\uffb9\056\uffb9\057\uffb9\071\uffb9\072\uffb9\001\002" +
    "\000\030\013\uffc3\021\uffc3\022\uffc3\033\uffc3\034\uffc3\035" +
    "\uffc3\040\uffc3\056\uffc3\057\uffc3\071\uffc3\072\uffc3\001\002" +
    "\000\004\072\224\001\002\000\030\013\uffbc\021\uffbc\022" +
    "\uffbc\033\uffbc\034\uffbc\035\uffbc\040\uffbc\056\uffbc\057\uffbc" +
    "\071\uffbc\072\uffbc\001\002\000\030\013\142\021\145\022" +
    "\143\033\137\034\133\035\136\040\146\056\147\057\140" +
    "\071\134\072\141\001\002\000\030\013\142\021\145\022" +
    "\143\033\137\034\133\035\136\040\146\056\147\057\140" +
    "\071\134\072\141\001\002\000\030\013\142\021\145\022" +
    "\143\033\137\034\133\035\136\040\146\056\147\057\140" +
    "\071\134\072\141\001\002\000\030\013\uffbd\021\uffbd\022" +
    "\uffbd\033\uffbd\034\uffbd\035\uffbd\040\uffbd\056\uffbd\057\uffbd" +
    "\071\uffbd\072\uffbd\001\002\000\104\002\uffd7\004\uffd7\005" +
    "\uffd7\006\uffd7\007\uffd7\010\uffd7\012\uffd7\014\uffd7\015\uffd7" +
    "\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024" +
    "\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\033\uffd7" +
    "\034\uffd7\036\uffd7\037\uffd7\041\uffd7\042\uffd7\043\uffd7\044" +
    "\uffd7\047\uffd7\050\uffd7\051\uffd7\056\uffd7\001\002\000\104" +
    "\002\uffd6\004\uffd6\005\uffd6\006\uffd6\007\uffd6\010\uffd6\012" +
    "\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6" +
    "\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030" +
    "\uffd6\031\uffd6\033\uffd6\034\uffd6\036\uffd6\037\uffd6\041\uffd6" +
    "\042\uffd6\043\uffd6\044\uffd6\047\uffd6\050\uffd6\051\uffd6\056" +
    "\uffd6\001\002\000\030\013\uffc7\021\uffc7\022\uffc7\033\uffc7" +
    "\034\uffc7\035\uffc7\040\uffc7\056\uffc7\057\uffc7\071\uffc7\072" +
    "\uffc7\001\002\000\030\013\uffc2\021\uffc2\022\uffc2\033\uffc2" +
    "\034\uffc2\035\uffc2\040\uffc2\056\uffc2\057\uffc2\071\uffc2\072" +
    "\uffc2\001\002\000\030\013\uffc4\021\uffc4\022\uffc4\033\uffc4" +
    "\034\uffc4\035\uffc4\040\uffc4\056\uffc4\057\uffc4\071\uffc4\072" +
    "\uffc4\001\002\000\030\013\142\021\145\022\143\033\137" +
    "\034\133\035\136\040\146\056\147\057\140\071\134\072" +
    "\141\001\002\000\030\013\uffbb\021\uffbb\022\uffbb\033\uffbb" +
    "\034\uffbb\035\uffbb\040\uffbb\056\uffbb\057\uffbb\071\uffbb\072" +
    "\uffbb\001\002\000\004\072\204\001\002\000\030\013\uffc8" +
    "\021\uffc8\022\uffc8\033\uffc8\034\uffc8\035\uffc8\040\uffc8\056" +
    "\uffc8\057\uffc8\071\uffc8\072\uffc8\001\002\000\030\013\uffbf" +
    "\021\uffbf\022\uffbf\033\uffbf\034\uffbf\035\uffbf\040\uffbf\056" +
    "\uffbf\057\uffbf\071\uffbf\072\uffbf\001\002\000\030\013\uffc0" +
    "\021\uffc0\022\uffc0\033\uffc0\034\uffc0\035\uffc0\040\uffc0\056" +
    "\uffc0\057\uffc0\071\uffc0\072\uffc0\001\002\000\030\013\uffbe" +
    "\021\uffbe\022\uffbe\033\uffbe\034\uffbe\035\uffbe\040\uffbe\056" +
    "\uffbe\057\uffbe\071\uffbe\072\uffbe\001\002\000\106\002\uffda" +
    "\004\uffda\005\uffda\006\uffda\007\uffda\010\uffda\012\uffda\014" +
    "\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021\uffda\022\uffda" +
    "\023\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031" +
    "\uffda\033\uffda\034\uffda\036\uffda\037\uffda\040\206\041\uffda" +
    "\042\uffda\043\uffda\044\uffda\047\uffda\050\uffda\051\uffda\056" +
    "\uffda\001\002\000\104\002\uffdb\004\uffdb\005\uffdb\006\uffdb" +
    "\007\uffdb\010\uffdb\012\uffdb\014\uffdb\015\uffdb\016\uffdb\017" +
    "\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb" +
    "\026\uffdb\027\uffdb\030\uffdb\031\uffdb\033\uffdb\034\uffdb\036" +
    "\uffdb\037\uffdb\041\uffdb\042\uffdb\043\uffdb\044\uffdb\047\uffdb" +
    "\050\uffdb\051\uffdb\056\uffdb\001\002\000\032\013\142\021" +
    "\145\022\143\033\137\034\133\035\136\040\146\041\211" +
    "\056\147\057\140\071\134\072\141\001\002\000\066\005" +
    "\164\007\200\010\177\012\202\014\163\015\203\016\173" +
    "\017\161\020\162\021\171\022\170\023\176\024\167\025" +
    "\151\026\155\027\160\030\157\033\154\034\174\036\172" +
    "\037\uffb3\041\uffb3\047\153\050\156\051\166\056\201\001" +
    "\002\000\006\037\212\041\213\001\002\000\104\002\uffb5" +
    "\004\uffb5\005\uffb5\006\uffb5\007\uffb5\010\uffb5\012\uffb5\014" +
    "\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\022\uffb5" +
    "\023\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5\031" +
    "\uffb5\033\uffb5\034\uffb5\036\uffb5\037\uffb5\041\uffb5\042\uffb5" +
    "\043\uffb5\044\uffb5\047\uffb5\050\uffb5\051\uffb5\056\uffb5\001" +
    "\002\000\030\013\142\021\145\022\143\033\137\034\133" +
    "\035\136\040\146\056\147\057\140\071\134\072\141\001" +
    "\002\000\104\002\uffb6\004\uffb6\005\uffb6\006\uffb6\007\uffb6" +
    "\010\uffb6\012\uffb6\014\uffb6\015\uffb6\016\uffb6\017\uffb6\020" +
    "\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6\026\uffb6" +
    "\027\uffb6\030\uffb6\031\uffb6\033\uffb6\034\uffb6\036\uffb6\037" +
    "\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6\047\uffb6\050\uffb6" +
    "\051\uffb6\056\uffb6\001\002\000\066\005\164\007\200\010" +
    "\177\012\202\014\163\015\203\016\173\017\161\020\162" +
    "\021\171\022\170\023\176\024\167\025\151\026\155\027" +
    "\160\030\157\033\154\034\174\036\172\037\uffb4\041\uffb4" +
    "\047\153\050\156\051\166\056\201\001\002\000\104\002" +
    "\uffcf\004\uffcf\005\164\006\uffcf\007\200\010\177\012\202" +
    "\014\163\015\203\016\173\017\161\020\162\021\171\022" +
    "\170\023\176\024\167\025\151\026\155\027\160\030\157" +
    "\031\uffcf\033\154\034\174\036\172\037\uffcf\041\uffcf\042" +
    "\uffcf\043\uffcf\044\uffcf\047\153\050\156\051\166\056\201" +
    "\001\002\000\064\005\164\007\200\010\177\012\202\014" +
    "\163\015\203\016\173\017\161\020\162\021\171\022\170" +
    "\023\176\024\167\025\151\026\155\027\160\030\157\031" +
    "\217\033\154\034\174\036\172\047\153\050\156\051\166" +
    "\056\201\001\002\000\030\013\142\021\145\022\143\033" +
    "\137\034\133\035\136\040\146\056\147\057\140\071\134" +
    "\072\141\001\002\000\104\002\uffcc\004\uffcc\005\164\006" +
    "\uffcc\007\uffcc\010\177\012\202\014\163\015\203\016\173" +
    "\017\161\020\162\021\171\022\170\023\176\024\167\025" +
    "\151\026\155\027\160\030\157\031\uffcc\033\154\034\174" +
    "\036\172\037\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc\047" +
    "\153\050\156\051\uffcc\056\201\001\002\000\104\002\uffce" +
    "\004\uffce\005\164\006\uffce\007\200\010\177\012\202\014" +
    "\163\015\203\016\173\017\161\020\162\021\171\022\170" +
    "\023\176\024\167\025\151\026\155\027\160\030\157\031" +
    "\uffce\033\154\034\174\036\172\037\uffce\041\uffce\042\uffce" +
    "\043\uffce\044\uffce\047\153\050\156\051\166\056\201\001" +
    "\002\000\064\005\164\006\223\007\200\010\177\012\202" +
    "\014\163\015\203\016\173\017\161\020\162\021\171\022" +
    "\170\023\176\024\167\025\151\026\155\027\160\030\157" +
    "\033\154\034\174\036\172\047\153\050\156\051\166\056" +
    "\201\001\002\000\104\002\uffdc\004\uffdc\005\uffdc\006\uffdc" +
    "\007\uffdc\010\uffdc\012\uffdc\014\uffdc\015\uffdc\016\uffdc\017" +
    "\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc" +
    "\026\uffdc\027\uffdc\030\uffdc\031\uffdc\033\uffdc\034\uffdc\036" +
    "\uffdc\037\uffdc\041\uffdc\042\uffdc\043\uffdc\044\uffdc\047\uffdc" +
    "\050\uffdc\051\uffdc\056\uffdc\001\002\000\106\002\uffd8\004" +
    "\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8\012\uffd8\014\uffd8" +
    "\015\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023" +
    "\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8" +
    "\033\uffd8\034\uffd8\036\uffd8\037\uffd8\040\206\041\uffd8\042" +
    "\uffd8\043\uffd8\044\uffd8\047\uffd8\050\uffd8\051\uffd8\056\uffd8" +
    "\001\002\000\104\002\uffd9\004\uffd9\005\uffd9\006\uffd9\007" +
    "\uffd9\010\uffd9\012\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9" +
    "\020\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026" +
    "\uffd9\027\uffd9\030\uffd9\031\uffd9\033\uffd9\034\uffd9\036\uffd9" +
    "\037\uffd9\041\uffd9\042\uffd9\043\uffd9\044\uffd9\047\uffd9\050" +
    "\uffd9\051\uffd9\056\uffd9\001\002\000\104\002\uffcd\004\uffcd" +
    "\005\164\006\uffcd\007\200\010\177\012\202\014\163\015" +
    "\203\016\173\017\161\020\162\021\171\022\170\023\176" +
    "\024\167\025\151\026\155\027\160\030\157\031\uffcd\033" +
    "\154\034\174\036\172\037\uffcd\041\uffcd\042\uffcd\043\uffcd" +
    "\044\uffcd\047\153\050\156\051\166\056\201\001\002\000" +
    "\064\005\164\007\200\010\177\012\202\014\163\015\203" +
    "\016\173\017\161\020\162\021\171\022\170\023\176\024" +
    "\167\025\151\026\155\027\160\030\157\033\154\034\174" +
    "\036\172\041\230\047\153\050\156\051\166\056\201\001" +
    "\002\000\104\002\uffc9\004\uffc9\005\uffc9\006\uffc9\007\uffc9" +
    "\010\uffc9\012\uffc9\014\uffc9\015\uffc9\016\uffc9\017\uffc9\020" +
    "\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9" +
    "\027\uffc9\030\uffc9\031\uffc9\033\uffc9\034\uffc9\036\uffc9\037" +
    "\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9\047\uffc9\050\uffc9" +
    "\051\uffc9\056\uffc9\001\002\000\104\002\uffd2\004\uffd2\005" +
    "\uffd2\006\uffd2\007\uffd2\010\uffd2\012\uffd2\014\uffd2\015\uffd2" +
    "\016\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024" +
    "\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\033\uffd2" +
    "\034\uffd2\036\uffd2\037\uffd2\041\uffd2\042\uffd2\043\uffd2\044" +
    "\uffd2\047\uffd2\050\uffd2\051\uffd2\056\uffd2\001\002\000\104" +
    "\002\uffd3\004\uffd3\005\uffd3\006\uffd3\007\uffd3\010\uffd3\012" +
    "\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3" +
    "\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030" +
    "\uffd3\031\uffd3\033\uffd3\034\uffd3\036\uffd3\037\uffd3\041\uffd3" +
    "\042\uffd3\043\uffd3\044\uffd3\047\uffd3\050\uffd3\051\uffd3\056" +
    "\uffd3\001\002\000\104\002\uffcb\004\uffcb\005\164\006\uffcb" +
    "\007\uffcb\010\177\012\uffcb\014\uffcb\015\uffcb\016\uffcb\017" +
    "\uffcb\020\162\021\171\022\170\023\uffcb\024\uffcb\025\uffcb" +
    "\026\uffcb\027\uffcb\030\uffcb\031\uffcb\033\uffcb\034\uffcb\036" +
    "\uffcb\037\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb\047\uffcb" +
    "\050\uffcb\051\uffcb\056\uffcb\001\002\000\104\002\uffca\004" +
    "\uffca\005\164\006\uffca\007\uffca\010\177\012\uffca\014\uffca" +
    "\015\uffca\016\uffca\017\uffca\020\162\021\171\022\170\023" +
    "\uffca\024\uffca\025\uffca\026\uffca\027\uffca\030\uffca\031\uffca" +
    "\033\uffca\034\uffca\036\uffca\037\uffca\041\uffca\042\uffca\043" +
    "\uffca\044\uffca\047\uffca\050\uffca\051\uffca\056\uffca\001\002" +
    "\000\104\002\uffd4\004\uffd4\005\164\006\uffd4\007\uffd4\010" +
    "\177\012\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4\020\162" +
    "\021\171\022\170\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027" +
    "\uffd4\030\uffd4\031\uffd4\033\uffd4\034\uffd4\036\172\037\uffd4" +
    "\041\uffd4\042\uffd4\043\uffd4\044\uffd4\047\153\050\uffd4\051" +
    "\uffd4\056\201\001\002\000\104\002\uffd1\004\uffd1\005\164" +
    "\006\uffd1\007\uffd1\010\177\012\uffd1\014\uffd1\015\uffd1\016" +
    "\uffd1\017\uffd1\020\162\021\171\022\170\023\uffd1\024\uffd1" +
    "\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\033\uffd1\034" +
    "\uffd1\036\uffd1\037\uffd1\041\uffd1\042\uffd1\043\uffd1\044\uffd1" +
    "\047\uffd1\050\uffd1\051\uffd1\056\uffd1\001\002\000\104\002" +
    "\uffd5\004\uffd5\005\164\006\uffd5\007\uffd5\010\177\012\uffd5" +
    "\014\uffd5\015\uffd5\016\uffd5\017\uffd5\020\162\021\171\022" +
    "\170\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5" +
    "\031\uffd5\033\uffd5\034\uffd5\036\172\037\uffd5\041\uffd5\042" +
    "\uffd5\043\uffd5\044\uffd5\047\153\050\uffd5\051\uffd5\056\201" +
    "\001\002\000\006\037\272\041\273\001\002\000\010\037" +
    "\uffb1\040\206\041\uffb1\001\002\000\064\005\247\007\200" +
    "\010\255\012\202\014\163\015\203\016\173\017\161\020" +
    "\246\021\253\022\252\023\176\024\167\025\151\026\155" +
    "\027\160\030\157\033\154\034\174\036\172\041\245\047" +
    "\153\050\156\051\251\056\201\001\002\000\030\013\124" +
    "\021\130\022\125\033\121\034\115\035\120\040\243\056" +
    "\132\057\122\071\116\072\123\001\002\000\030\013\142" +
    "\021\145\022\143\033\137\034\133\035\136\040\146\056" +
    "\147\057\140\071\134\072\141\001\002\000\076\002\uffe0" +
    "\004\uffe0\005\uffe0\007\uffe0\010\uffe0\012\uffe0\014\uffe0\015" +
    "\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0" +
    "\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\033\uffe0\034" +
    "\uffe0\036\uffe0\041\uffe0\042\uffe0\043\uffe0\044\uffe0\047\uffe0" +
    "\050\uffe0\051\uffe0\056\uffe0\001\002\000\004\072\267\001" +
    "\002\000\030\013\142\021\145\022\143\033\137\034\133" +
    "\035\136\040\146\056\147\057\140\071\134\072\141\001" +
    "\002\000\030\013\142\021\145\022\143\033\137\034\133" +
    "\035\136\040\146\056\147\057\140\071\134\072\141\001" +
    "\002\000\030\013\142\021\145\022\143\033\137\034\133" +
    "\035\136\040\146\056\147\057\140\071\134\072\141\001" +
    "\002\000\076\002\uffee\004\uffee\005\uffee\007\uffee\010\uffee" +
    "\012\uffee\014\uffee\015\uffee\016\uffee\017\uffee\020\uffee\021" +
    "\uffee\022\uffee\023\uffee\024\uffee\025\uffee\026\uffee\027\uffee" +
    "\030\uffee\033\uffee\034\uffee\036\uffee\041\uffee\042\uffee\043" +
    "\uffee\044\uffee\047\uffee\050\uffee\051\uffee\056\uffee\001\002" +
    "\000\076\002\uffed\004\uffed\005\uffed\007\uffed\010\uffed\012" +
    "\uffed\014\uffed\015\uffed\016\uffed\017\uffed\020\uffed\021\uffed" +
    "\022\uffed\023\uffed\024\uffed\025\uffed\026\uffed\027\uffed\030" +
    "\uffed\033\uffed\034\uffed\036\uffed\041\uffed\042\uffed\043\uffed" +
    "\044\uffed\047\uffed\050\uffed\051\uffed\056\uffed\001\002\000" +
    "\030\013\142\021\145\022\143\033\137\034\133\035\136" +
    "\040\146\056\147\057\140\071\134\072\141\001\002\000" +
    "\004\072\256\001\002\000\100\002\ufff1\004\ufff1\005\ufff1" +
    "\007\ufff1\010\ufff1\012\ufff1\014\ufff1\015\ufff1\016\ufff1\017" +
    "\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1\025\ufff1" +
    "\026\ufff1\027\ufff1\030\ufff1\033\ufff1\034\ufff1\036\ufff1\040" +
    "\206\041\ufff1\042\ufff1\043\ufff1\044\ufff1\047\ufff1\050\ufff1" +
    "\051\ufff1\056\ufff1\001\002\000\076\002\ufff2\004\ufff2\005" +
    "\ufff2\007\ufff2\010\ufff2\012\ufff2\014\ufff2\015\ufff2\016\ufff2" +
    "\017\ufff2\020\ufff2\021\ufff2\022\ufff2\023\ufff2\024\ufff2\025" +
    "\ufff2\026\ufff2\027\ufff2\030\ufff2\033\ufff2\034\ufff2\036\ufff2" +
    "\041\ufff2\042\ufff2\043\ufff2\044\ufff2\047\ufff2\050\ufff2\051" +
    "\ufff2\056\ufff2\001\002\000\076\002\uffe6\004\uffe6\005\164" +
    "\007\200\010\177\012\202\014\163\015\203\016\173\017" +
    "\161\020\162\021\171\022\170\023\176\024\167\025\151" +
    "\026\155\027\160\030\157\033\154\034\174\036\172\041" +
    "\uffe6\042\uffe6\043\uffe6\044\uffe6\047\153\050\156\051\166" +
    "\056\201\001\002\000\064\005\164\007\200\010\177\012" +
    "\202\014\163\015\203\016\173\017\161\020\162\021\171" +
    "\022\170\023\176\024\167\025\151\026\155\027\160\030" +
    "\157\031\262\033\154\034\174\036\172\047\153\050\156" +
    "\051\166\056\201\001\002\000\030\013\142\021\145\022" +
    "\143\033\137\034\133\035\136\040\146\056\147\057\140" +
    "\071\134\072\141\001\002\000\076\002\uffe3\004\uffe3\005" +
    "\164\007\uffe3\010\177\012\202\014\163\015\203\016\173" +
    "\017\161\020\162\021\171\022\170\023\176\024\167\025" +
    "\151\026\155\027\160\030\157\033\154\034\174\036\172" +
    "\041\uffe3\042\uffe3\043\uffe3\044\uffe3\047\153\050\156\051" +
    "\uffe3\056\201\001\002\000\076\002\uffe5\004\uffe5\005\164" +
    "\007\200\010\177\012\202\014\163\015\203\016\173\017" +
    "\161\020\162\021\171\022\170\023\176\024\167\025\151" +
    "\026\155\027\160\030\157\033\154\034\174\036\172\041" +
    "\uffe5\042\uffe5\043\uffe5\044\uffe5\047\153\050\156\051\166" +
    "\056\201\001\002\000\064\005\164\006\266\007\200\010" +
    "\177\012\202\014\163\015\203\016\173\017\161\020\162" +
    "\021\171\022\170\023\176\024\167\025\151\026\155\027" +
    "\160\030\157\033\154\034\174\036\172\047\153\050\156" +
    "\051\166\056\201\001\002\000\076\002\ufff3\004\ufff3\005" +
    "\ufff3\007\ufff3\010\ufff3\012\ufff3\014\ufff3\015\ufff3\016\ufff3" +
    "\017\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3\025" +
    "\ufff3\026\ufff3\027\ufff3\030\ufff3\033\ufff3\034\ufff3\036\ufff3" +
    "\041\ufff3\042\ufff3\043\ufff3\044\ufff3\047\ufff3\050\ufff3\051" +
    "\ufff3\056\ufff3\001\002\000\100\002\uffef\004\uffef\005\uffef" +
    "\007\uffef\010\uffef\012\uffef\014\uffef\015\uffef\016\uffef\017" +
    "\uffef\020\uffef\021\uffef\022\uffef\023\uffef\024\uffef\025\uffef" +
    "\026\uffef\027\uffef\030\uffef\033\uffef\034\uffef\036\uffef\040" +
    "\206\041\uffef\042\uffef\043\uffef\044\uffef\047\uffef\050\uffef" +
    "\051\uffef\056\uffef\001\002\000\076\002\ufff0\004\ufff0\005" +
    "\ufff0\007\ufff0\010\ufff0\012\ufff0\014\ufff0\015\ufff0\016\ufff0" +
    "\017\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025" +
    "\ufff0\026\ufff0\027\ufff0\030\ufff0\033\ufff0\034\ufff0\036\ufff0" +
    "\041\ufff0\042\ufff0\043\ufff0\044\ufff0\047\ufff0\050\ufff0\051" +
    "\ufff0\056\ufff0\001\002\000\076\002\uffe4\004\uffe4\005\164" +
    "\007\200\010\177\012\202\014\163\015\203\016\173\017" +
    "\161\020\162\021\171\022\170\023\176\024\167\025\151" +
    "\026\155\027\160\030\157\033\154\034\174\036\172\041" +
    "\uffe4\042\uffe4\043\uffe4\044\uffe4\047\153\050\156\051\166" +
    "\056\201\001\002\000\004\072\275\001\002\000\030\013" +
    "\142\021\145\022\143\033\137\034\133\035\136\040\146" +
    "\056\147\057\140\071\134\072\141\001\002\000\074\002" +
    "\ufff7\004\ufff7\005\164\007\200\010\177\012\202\014\163" +
    "\015\203\016\173\017\161\020\162\021\171\022\170\023" +
    "\176\024\167\025\151\026\155\027\160\030\157\033\154" +
    "\034\174\036\172\042\ufff7\043\ufff7\044\ufff7\047\153\050" +
    "\156\051\166\056\201\001\002\000\006\037\uffb2\041\uffb2" +
    "\001\002\000\076\002\uffe9\004\uffe9\005\uffe9\007\uffe9\010" +
    "\uffe9\012\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9" +
    "\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9\027" +
    "\uffe9\030\uffe9\033\uffe9\034\uffe9\036\uffe9\041\uffe9\042\uffe9" +
    "\043\uffe9\044\uffe9\047\uffe9\050\uffe9\051\uffe9\056\uffe9\001" +
    "\002\000\076\002\uffea\004\uffea\005\uffea\007\uffea\010\uffea" +
    "\012\uffea\014\uffea\015\uffea\016\uffea\017\uffea\020\uffea\021" +
    "\uffea\022\uffea\023\uffea\024\uffea\025\uffea\026\uffea\027\uffea" +
    "\030\uffea\033\uffea\034\uffea\036\uffea\041\uffea\042\uffea\043" +
    "\uffea\044\uffea\047\uffea\050\uffea\051\uffea\056\uffea\001\002" +
    "\000\076\002\uffe2\004\uffe2\005\164\007\uffe2\010\177\012" +
    "\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020\162\021\171" +
    "\022\170\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030" +
    "\uffe2\033\uffe2\034\uffe2\036\uffe2\041\uffe2\042\uffe2\043\uffe2" +
    "\044\uffe2\047\uffe2\050\uffe2\051\uffe2\056\uffe2\001\002\000" +
    "\076\002\uffe1\004\uffe1\005\164\007\uffe1\010\177\012\uffe1" +
    "\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020\162\021\171\022" +
    "\170\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1" +
    "\033\uffe1\034\uffe1\036\uffe1\041\uffe1\042\uffe1\043\uffe1\044" +
    "\uffe1\047\uffe1\050\uffe1\051\uffe1\056\uffe1\001\002\000\076" +
    "\002\uffeb\004\uffeb\005\164\007\uffeb\010\177\012\uffeb\014" +
    "\uffeb\015\uffeb\016\uffeb\017\uffeb\020\162\021\171\022\170" +
    "\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb\033" +
    "\uffeb\034\uffeb\036\172\041\uffeb\042\uffeb\043\uffeb\044\uffeb" +
    "\047\153\050\uffeb\051\uffeb\056\201\001\002\000\076\002" +
    "\uffe8\004\uffe8\005\164\007\uffe8\010\177\012\uffe8\014\uffe8" +
    "\015\uffe8\016\uffe8\017\uffe8\020\162\021\171\022\170\023" +
    "\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\033\uffe8" +
    "\034\uffe8\036\uffe8\041\uffe8\042\uffe8\043\uffe8\044\uffe8\047" +
    "\uffe8\050\uffe8\051\uffe8\056\uffe8\001\002\000\014\002\ufff6" +
    "\004\ufff6\042\ufff6\043\ufff6\044\ufff6\001\002\000\076\002" +
    "\uffec\004\uffec\005\164\007\uffec\010\177\012\uffec\014\uffec" +
    "\015\uffec\016\uffec\017\uffec\020\162\021\171\022\170\023" +
    "\uffec\024\uffec\025\uffec\026\uffec\027\uffec\030\uffec\033\uffec" +
    "\034\uffec\036\172\041\uffec\042\uffec\043\uffec\044\uffec\047" +
    "\153\050\uffec\051\uffec\056\201\001\002\000\004\045\307" +
    "\001\002\000\040\044\036\052\031\053\013\054\025\055" +
    "\027\060\016\061\015\062\023\063\022\064\033\065\020" +
    "\066\024\067\034\070\012\072\021\001\002\000\042\044" +
    "\036\046\311\052\031\053\013\054\025\055\027\060\016" +
    "\061\015\062\023\063\022\064\033\065\020\066\024\067" +
    "\034\070\012\072\021\001\002\000\004\032\312\001\002" +
    "\000\014\002\ufffa\004\ufffa\042\ufffa\043\ufffa\044\ufffa\001" +
    "\002\000\012\005\051\035\047\040\050\072\320\001\002" +
    "\000\004\032\317\001\002\000\006\005\041\032\316\001" +
    "\002\000\014\002\ufffd\004\ufffd\042\ufffd\043\ufffd\044\ufffd" +
    "\001\002\000\014\002\ufffe\004\ufffe\042\ufffe\043\ufffe\044" +
    "\ufffe\001\002\000\010\005\uffab\032\uffab\040\321\001\002" +
    "\000\042\041\uffaf\044\uffaf\052\uffaf\053\uffaf\054\uffaf\055" +
    "\uffaf\060\uffaf\061\uffaf\062\uffaf\063\uffaf\064\uffaf\065\uffaf" +
    "\066\uffaf\067\uffaf\070\uffaf\072\uffaf\001\002\000\042\041" +
    "\uffa1\044\036\052\031\053\013\054\025\055\027\060\016" +
    "\061\015\062\023\063\022\064\033\065\020\066\024\067" +
    "\034\070\012\072\021\001\002\000\004\041\324\001\002" +
    "\000\004\032\uffae\001\002\000\014\002\001\004\001\042" +
    "\001\043\001\044\001\001\002\000\004\002\000\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\324\000\006\003\003\004\010\001\001\000\004\004" +
    "\324\001\001\000\014\006\314\010\313\022\312\023\027" +
    "\024\031\001\001\000\002\001\001\000\004\002\113\001" +
    "\001\000\012\006\025\022\016\023\027\024\031\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\023\044" +
    "\024\031\001\001\000\002\001\001\000\006\023\034\024" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\026\060\001" +
    "\001\000\014\005\063\011\062\022\061\023\027\024\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\005\066\011\062\022\061" +
    "\023\027\024\031\001\001\000\002\001\001\000\014\005" +
    "\100\011\062\022\061\023\027\024\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\027" +
    "\074\001\001\000\014\005\075\011\062\022\061\023\027" +
    "\024\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\006\102\007\103" +
    "\022\016\023\027\024\031\001\001\000\002\001\001\000" +
    "\012\006\105\022\016\023\027\024\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\013\126" +
    "\021\125\001\001\000\002\001\001\000\006\012\304\013" +
    "\143\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\302\013\143\001\001\000\006\012\301\013\143\001" +
    "\001\000\006\012\300\013\143\001\001\000\002\001\001" +
    "\000\006\012\277\013\143\001\001\000\006\012\276\013" +
    "\143\001\001\000\010\015\253\016\247\017\243\001\001" +
    "\000\002\001\001\000\006\012\275\013\143\001\001\000" +
    "\010\013\126\020\237\021\241\001\001\000\006\012\134" +
    "\013\143\001\001\000\006\012\236\013\143\001\001\000" +
    "\002\001\001\000\010\015\174\016\164\017\151\001\001" +
    "\000\006\012\235\013\143\001\001\000\006\012\234\013" +
    "\143\001\001\000\006\012\233\013\143\001\001\000\002" +
    "\001\001\000\006\012\232\013\143\001\001\000\006\012" +
    "\231\013\143\001\001\000\002\001\001\000\006\012\230" +
    "\013\143\001\001\000\006\012\226\013\143\001\001\000" +
    "\006\012\147\013\143\001\001\000\010\015\174\016\164" +
    "\017\151\001\001\000\002\001\001\000\006\012\225\013" +
    "\143\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\224\001\001\000\002" +
    "\001\001\000\006\012\221\013\143\001\001\000\006\012" +
    "\220\013\143\001\001\000\006\012\215\013\143\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\214\013\143\001\001\000\002\001\001\000\004\013" +
    "\204\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\012\206\013\143\014\207\001\001\000\010" +
    "\015\174\016\164\017\151\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\213\013\143\001\001\000\002" +
    "\001\001\000\010\015\174\016\164\017\151\001\001\000" +
    "\010\015\174\016\164\017\151\001\001\000\010\015\174" +
    "\016\164\017\151\001\001\000\006\012\217\013\143\001" +
    "\001\000\010\015\174\016\164\017\151\001\001\000\010" +
    "\015\174\016\164\017\151\001\001\000\010\015\174\016" +
    "\164\017\151\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\015\174\016\164\017\151\001" +
    "\001\000\010\015\174\016\164\017\151\001\001\000\002" +
    "\001\001\000\010\015\174\016\164\017\151\001\001\000" +
    "\010\015\174\016\164\017\151\001\001\000\010\015\174" +
    "\016\164\017\151\001\001\000\010\015\174\016\164\017" +
    "\151\001\001\000\010\015\174\016\164\017\151\001\001" +
    "\000\010\015\174\016\164\017\151\001\001\000\010\015" +
    "\174\016\164\017\151\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\015\253\016\247\017\243\001\001\000" +
    "\006\013\126\021\241\001\001\000\006\012\270\013\143" +
    "\001\001\000\002\001\001\000\004\013\267\001\001\000" +
    "\006\012\264\013\143\001\001\000\006\012\263\013\143" +
    "\001\001\000\006\012\260\013\143\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\012\257\013\143\001\001" +
    "\000\004\013\256\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\015\174\016\164\017\151\001\001\000\010" +
    "\015\174\016\164\017\151\001\001\000\006\012\262\013" +
    "\143\001\001\000\010\015\174\016\164\017\151\001\001" +
    "\000\010\015\174\016\164\017\151\001\001\000\010\015" +
    "\174\016\164\017\151\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\015\174\016\164\017" +
    "\151\001\001\000\002\001\001\000\006\012\273\013\143" +
    "\001\001\000\010\015\174\016\164\017\151\001\001\000" +
    "\002\001\001\000\010\015\174\016\164\017\151\001\001" +
    "\000\010\015\174\016\164\017\151\001\001\000\010\015" +
    "\174\016\164\017\151\001\001\000\010\015\174\016\164" +
    "\017\151\001\001\000\010\015\174\016\164\017\151\001" +
    "\001\000\010\015\174\016\164\017\151\001\001\000\002" +
    "\001\001\000\010\015\174\016\164\017\151\001\001\000" +
    "\002\001\001\000\014\006\102\007\307\022\016\023\027" +
    "\024\031\001\001\000\012\006\105\022\016\023\027\024" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\321" +
    "\001\001\000\014\005\322\011\062\022\061\023\027\024" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



   
	public CodeGenerator cg = new CodeGenerator();

    public void report_error(String message, Object info) {
   
       
        StringBuilder m = new StringBuilder("Error");
   
        if (info instanceof java_cup.runtime.Symbol) {
     
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {                
                       m.append(" in line "+(s.left+1));   
     
                if (s.right >= 0)                    
                       m.append(", column "+(s.right+1));
            }
        }
   
        m.append(" : "+message);
   
        System.err.println(m);
    }
   
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // type ::= type STAR 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=t + "*"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // type ::= type LBRACKET NUMBER RBRACKET 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=t + "[" + n + "]"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // type ::= type LBRACKET RBRACKET 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT=t + "[]"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // type ::= pre_type 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // pre_type ::= CONST pre_type 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT="const " + p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_type",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // pre_type ::= UN_SIGNED pre_type 
            {
              String RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= u + " " + p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_type",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // pre_type ::= STRUCT ID 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= "struct " + i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_type",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // pre_type ::= ID 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_type",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // pre_type ::= c_type 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_type",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // c_type ::= LDOUBLE 
            {
              String RESULT =null;
		 RESULT= "long double"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // c_type ::= DOUBLE 
            {
              String RESULT =null;
		 RESULT= "double"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // c_type ::= FLOAT 
            {
              String RESULT =null;
		 RESULT= "float"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // c_type ::= LLINT 
            {
              String RESULT =null;
		 RESULT= "long long int"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // c_type ::= LLONG 
            {
              String RESULT =null;
		 RESULT= "long long"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // c_type ::= LONG 
            {
              String RESULT =null;
		 RESULT="long"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // c_type ::= SHORT 
            {
              String RESULT =null;
		 RESULT="short"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // c_type ::= LINT 
            {
              String RESULT =null;
		 RESULT= "long int"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // c_type ::= SINT 
            {
              String RESULT =null;
		 RESULT= "short int"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // c_type ::= INT 
            {
              String RESULT =null;
		 RESULT= "int"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // c_type ::= CHAR 
            {
              String RESULT =null;
		 RESULT= "char"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ident_funcpointer ::= type LPAREN STAR RPAREN LPAREN NT$2 params RPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String p4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ps2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ps2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ps2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			func_decl funcp = parser.cg.paramsowner;
			funcp.pointer = true;
			parser.cg.paramsowner = parser.cg.params_owners.pop();
			RESULT = funcp;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident_funcpointer",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // NT$2 ::= 
            {
              Object RESULT =null;
		int p4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String p4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

			func_decl funcp = new func_decl();
			funcp.pointer = true;
			funcp.setReturn_type(p4);
			parser.cg.params_owners.push(parser.cg.paramsowner);
			parser.cg.paramsowner = funcp;  
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // params ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // params ::= ident_funcpointer COMMA params 
            {
              Object RESULT =null;
		int p5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object p5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ps2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ps2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ps2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			parser.cg.paramsowner.pushParam(p5);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // params ::= ident_funcpointer 
            {
              Object RESULT =null;
		int p4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			parser.cg.paramsowner.pushParam(p4);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // params ::= type COMMA DOTS 
            {
              Object RESULT =null;
		int p3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
			parser.cg.paramsowner.pushParam(p3);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // params ::= type COMMA params 
            {
              Object RESULT =null;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int psright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ps = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			parser.cg.paramsowner.pushParam(p2);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // params ::= type 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			parser.cg.paramsowner.pushParam(p);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // defin ::= type LPAREN STAR ID RPAREN LPAREN NT$1 params RPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int i7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int i7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String i7 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int i8left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i8right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i8 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ps = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			func_decl funcp = parser.cg.paramsowner;
			funcp.pointer = true;
			parser.cg.var.setFuncpointer(funcp);
			parser.cg.paramsowner = parser.cg.params_owners.pop();
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("defin",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$1 ::= 
            {
              Object RESULT =null;
		int i7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i7 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int i8left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i8right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i8 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 
			parser.cg.var.setType(i7+"*");
			parser.cg.var.setID(i8);
			func_decl funcp = new func_decl();
			funcp.setID(i8);
			funcp.setReturn_type(i7+"*");
			parser.cg.params_owners.push(parser.cg.paramsowner);
			parser.cg.paramsowner = funcp;  
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // defin ::= defin LBRACKET NUMBER RBRACKET 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			parser.cg.var.addArray(n);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("defin",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // defin ::= defin LBRACKET RBRACKET 
            {
              Object RESULT =null;
		
			parser.cg.var.addArray(0);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("defin",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // defin ::= type ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			parser.cg.var.setType(i);
			parser.cg.var.setID(i2);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("defin",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // st_body ::= st_body defin SEMI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
			parser.cg.struct.addMember(parser.cg.var);
		        parser.cg.var = new var_decl();  
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("st_body",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // st_body ::= defin SEMI 
            {
              Object RESULT =null;
		
			parser.cg.struct.addMember(parser.cg.var);
		        parser.cg.var = new var_decl(); 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("st_body",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // func ::= type ID LPAREN NT$0 params RPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
			RESULT = e + " " + e2 + "(" + p + ");"; 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // NT$0 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 
			parser.cg.func.setReturn_type(e);
			parser.cg.func.setID(e2);
			parser.cg.paramsowner = parser.cg.func;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // macro_params ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("macro_params",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // macro_params ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("macro_params",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // macro_params ::= macro_params COMMA ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("macro_params",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // args ::= exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // args ::= args COMMA exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // func_call ::= ID LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_call",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // func_call ::= ID LPAREN args RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_call",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // LogicalS ::= OR 
            {
              Object RESULT =null;
		 RESULT = "||"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalS",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // LogicalS ::= AND 
            {
              Object RESULT =null;
		 RESULT = "&&"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalS",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // LogicalS ::= NOTEQUAL 
            {
              Object RESULT =null;
		 RESULT = "!="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalS",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // LogicalS ::= EQUAL 
            {
              Object RESULT =null;
		 RESULT = "=="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalS",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // LogicalS ::= GE 
            {
              Object RESULT =null;
		 RESULT = ">="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalS",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // LogicalS ::= GREATER 
            {
              Object RESULT =null;
		 RESULT = ">"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalS",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // LogicalS ::= LE 
            {
              Object RESULT =null;
		 RESULT = "<="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalS",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // LogicalS ::= LESS 
            {
              Object RESULT =null;
		 RESULT = "<"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalS",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // B2 ::= AMPERSAND 
            {
              Object RESULT =null;
		 RESULT = "&"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("B2",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // B2 ::= BAR 
            {
              Object RESULT =null;
		 RESULT = "|"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("B2",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // B2 ::= HAT 
            {
              Object RESULT =null;
		 RESULT = "^"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("B2",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // B2 ::= GG 
            {
              Object RESULT =null;
		 RESULT = ">>"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("B2",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // B2 ::= LL 
            {
              Object RESULT =null;
		 RESULT = "<<"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("B2",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Ar2 ::= MINUS 
            {
              Object RESULT =null;
		 RESULT = "-"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ar2",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Ar2 ::= PLUS 
            {
              Object RESULT =null;
		 RESULT = "+"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ar2",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Ar2 ::= PERCENT 
            {
              Object RESULT =null;
		 RESULT = "%"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ar2",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Ar2 ::= DIVIDE 
            {
              Object RESULT =null;
		 RESULT = "/"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ar2",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Ar2 ::= ASSIGN 
            {
              Object RESULT =null;
		 RESULT = "="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ar2",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // exp ::= LPAREN exp RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "("+e+")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exp ::= TILDE exp 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "~"+e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exp ::= BARDOT exp 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "!"+e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp ::= exp QUESTIONMARK exp COLON exp 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = " ? " + e + " " + e1 +" "+e2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp ::= exp LogicalS exp 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e + " " + e2 + " " + o; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= exp B2 exp 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e + " " + e2 + " " + o; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= exp Ar2 exp 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e + " " + e2 + " " + o; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= AMPERSAND exp 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "&"+e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= STAR exp 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "*"+e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp ::= MM exp 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "--"+e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= PP exp 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "++"+e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= PLUS exp 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ""+e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= MINUS exp 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "-"+e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp ::= exp MM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e+"--"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp ::= exp PP 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e+"++"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp ::= exp PREF ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e+"->"+i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp ::= exp PREF func_call 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e+"->"+f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exp ::= exp DOT ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e+"."+i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exp ::= exp DOT func_call 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e+"."+f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exp ::= exp LBRACKET exp RBRACKET 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e+"["+e2+"]"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exp ::= func_call 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exp ::= ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exp ::= NUMBER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // def_val ::= LPAREN def_val RPAREN 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "("+d+")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_val",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // def_val ::= TILDE exp 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "~"+e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_val",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // def_val ::= BARDOT exp 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "!"+e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_val",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // def_val ::= def_val QUESTIONMARK exp COLON exp 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = " ? "+d+" "+e1+" "+e2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_val",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // def_val ::= def_val LogicalS exp 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = d + " " + e + " " + o; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_val",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // def_val ::= def_val B2 exp 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = d + " " + e + " " + o; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_val",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // def_val ::= def_val Ar2 exp 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = d + " " + e + " " + o; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_val",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // def_val ::= AMPERSAND exp 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "&"+e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_val",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // def_val ::= STAR exp 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "*"+e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_val",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // def_val ::= MM exp 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "++"+e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_val",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // def_val ::= PP exp 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "++"+e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_val",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // def_val ::= PLUS exp 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "+"+e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_val",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // def_val ::= MINUS exp 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "-"+e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_val",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // def_val ::= def_val MM 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = d+"--"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_val",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // def_val ::= def_val PP 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = d+"++"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_val",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // def_val ::= def_val PREF ID 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = d+"->"+i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_val",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // def_val ::= def_val PREF func_call 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = d+"->"+f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_val",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // def_val ::= def_val DOT ID 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = d+"."+i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_val",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // def_val ::= def_val DOT func_call 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = d+"."+f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_val",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // def_val ::= def_val LBRACKET exp RBRACKET 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = d+"["+e+"]"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_val",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // def_val ::= func_call 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_val",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // def_val ::= NUMBER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_val",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // def_body ::= ID STRUCT ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			def_expr dx = new def_expr();
			dx.ID = i;
			dx.exp = v;
			dx.isStruct = true;
			parser.cg.defines.add(dx);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_body",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // def_body ::= ID LPAREN macro_params RPAREN exp 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			def_expr dx = new def_expr();
			dx.ID = i;
			dx.exp = v;
			parser.cg.defines.add(dx);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_body",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // def_body ::= ID def_val 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			def_expr dx = new def_expr();
			dx.ID = i;
			dx.exp = v;
			parser.cg.defines.add(dx);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_body",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // code_part ::= DEFINE def_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_part",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // code_part ::= STRUCT ID LQ st_body RQ SEMI 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
			parser.cg.struct.setName(i);
			parser.cg.declareStruct(); 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_part",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // code_part ::= TYPEDEF STRUCT LQ st_body RQ ID SEMI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.cg.declareTypedef_struct(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_part",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // code_part ::= TYPEDEF defin SEMI 
            {
              Object RESULT =null;
		int d2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.cg.declareTypedef_var(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_part",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // code_part ::= EXTERN defin SEMI 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.cg.declareVar(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_part",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // code_part ::= EXTERN func SEMI 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.cg.declareFunc(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_part",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= code_part 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= program code_part 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

