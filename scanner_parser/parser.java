
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Sep 09 11:50:53 CEST 2015
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Sep 09 11:50:53 CEST 2015
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\131\000\002\004\004\000\002\002\004\000\002\004" +
    "\003\000\002\005\003\000\002\005\004\000\002\005\005" +
    "\000\002\005\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\004\000\002" +
    "\002\004\000\002\002\003\000\002\002\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\004\000\002\024\004\000" +
    "\002\024\010\000\002\024\006\000\002\024\005\000\002" +
    "\040\002\000\002\023\010\000\002\023\004\000\002\023" +
    "\005\000\002\041\002\000\002\023\010\000\002\023\004" +
    "\000\002\023\005\000\002\042\002\000\002\031\010\000" +
    "\002\033\003\000\002\033\004\000\002\033\005\000\002" +
    "\032\003\000\002\032\005\000\002\026\003\000\002\043" +
    "\002\000\002\010\010\000\002\044\002\000\002\010\010" +
    "\000\002\007\004\000\002\007\005\000\002\007\003\000" +
    "\002\007\004\000\002\025\004\000\002\025\004\000\002" +
    "\025\005\000\002\025\006\000\002\025\006\000\002\045" +
    "\002\000\002\025\013\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\004\000\002\006\003\000" +
    "\002\006\005\000\002\006\002\000\002\046\002\000\002" +
    "\011\012\000\002\012\003\000\002\012\003\000\002\012" +
    "\005\000\002\012\004\000\002\012\004\000\002\037\003" +
    "\000\002\037\003\000\002\037\003\000\002\037\003\000" +
    "\002\037\003\000\002\037\003\000\002\037\003\000\002" +
    "\037\003\000\002\037\003\000\002\037\003\000\002\037" +
    "\003\000\002\036\003\000\002\036\003\000\002\036\004" +
    "\000\002\036\004\000\002\035\003\000\002\035\005\000" +
    "\002\035\006\000\002\035\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\224\000\066\003\035\004\032\005\045\006\020\044" +
    "\030\045\031\046\051\054\006\055\047\056\021\061\010" +
    "\062\016\063\017\064\026\065\005\066\040\067\046\070" +
    "\013\071\025\104\041\105\027\110\036\111\024\112\022" +
    "\113\043\115\033\001\002\000\070\002\225\003\035\004" +
    "\032\005\045\006\020\044\030\045\031\046\051\054\006" +
    "\055\047\056\021\061\010\062\016\063\017\064\026\065" +
    "\005\066\040\067\046\070\013\071\025\104\041\105\027" +
    "\110\036\111\024\112\022\113\043\115\033\001\002\000" +
    "\020\007\uffb5\037\uffb5\041\uffb5\042\uffb5\043\uffb5\111\uffb5" +
    "\115\uffb5\001\002\000\020\007\uffb7\037\uffb7\041\uffb7\042" +
    "\uffb7\043\uffb7\111\uffb7\115\uffb7\001\002\000\020\007\uffb0" +
    "\037\uffb0\041\uffb0\042\uffb0\043\uffb0\111\uffb0\115\uffb0\001" +
    "\002\000\020\007\uffbb\037\uffbb\041\uffbb\042\uffbb\043\uffbb" +
    "\111\uffbb\115\uffbb\001\002\000\006\034\ufff0\111\ufff0\001" +
    "\002\000\070\002\ufffe\003\ufffe\004\ufffe\005\ufffe\006\ufffe" +
    "\044\ufffe\045\ufffe\046\ufffe\054\ufffe\055\ufffe\056\ufffe\061" +
    "\ufffe\062\ufffe\063\ufffe\064\ufffe\065\ufffe\066\ufffe\067\ufffe" +
    "\070\ufffe\071\ufffe\104\ufffe\105\ufffe\110\ufffe\111\ufffe\112" +
    "\ufffe\113\ufffe\115\ufffe\001\002\000\020\007\uffb2\037\uffb2" +
    "\041\uffb2\042\uffb2\043\uffb2\111\uffb2\115\uffb2\001\002\000" +
    "\020\007\uffac\037\uffac\041\uffac\042\uffac\043\uffac\111\uffac" +
    "\115\uffac\001\002\000\006\034\uffee\111\uffee\001\002\000" +
    "\020\007\uffba\037\uffba\041\uffba\042\uffba\043\uffba\111\uffba" +
    "\115\uffba\001\002\000\020\007\uffb9\037\uffb9\041\uffb9\042" +
    "\uffb9\043\uffb9\111\uffb9\115\uffb9\001\002\000\072\002\ufff7" +
    "\003\ufff7\004\ufff7\005\ufff7\006\ufff7\044\ufff7\045\ufff7\046" +
    "\ufff7\050\ufff7\054\ufff7\055\ufff7\056\ufff7\061\ufff7\062\ufff7" +
    "\063\ufff7\064\ufff7\065\ufff7\066\ufff7\067\ufff7\070\ufff7\071" +
    "\ufff7\104\ufff7\105\ufff7\110\ufff7\111\ufff7\112\ufff7\113\ufff7" +
    "\115\ufff7\001\002\000\036\046\070\054\006\055\047\056" +
    "\021\061\010\062\016\063\017\064\026\065\005\066\040" +
    "\067\046\070\013\071\025\115\033\001\002\000\004\115" +
    "\211\001\002\000\006\034\uffd9\111\uffd9\001\002\000\070" +
    "\002\ufff3\003\ufff3\004\ufff3\005\ufff3\006\ufff3\044\ufff3\045" +
    "\ufff3\046\ufff3\054\ufff3\055\ufff3\056\ufff3\061\ufff3\062\ufff3" +
    "\063\ufff3\064\ufff3\065\ufff3\066\ufff3\067\ufff3\070\ufff3\071" +
    "\ufff3\104\ufff3\105\ufff3\110\ufff3\111\ufff3\112\ufff3\113\ufff3" +
    "\115\204\001\002\000\020\007\uffb1\037\uffb1\041\uffb1\042" +
    "\uffb1\043\uffb1\111\uffb1\115\uffb1\001\002\000\020\007\uffb8" +
    "\037\uffb8\041\uffb8\042\uffb8\043\uffb8\111\uffb8\115\uffb8\001" +
    "\002\000\072\002\ufff8\003\ufff8\004\ufff8\005\ufff8\006\ufff8" +
    "\044\ufff8\045\ufff8\046\ufff8\050\ufff8\054\ufff8\055\ufff8\056" +
    "\ufff8\061\ufff8\062\ufff8\063\ufff8\064\ufff8\065\ufff8\066\ufff8" +
    "\067\ufff8\070\ufff8\071\ufff8\104\ufff8\105\ufff8\110\ufff8\111" +
    "\ufff8\112\ufff8\113\ufff8\115\ufff8\001\002\000\046\045\031" +
    "\046\051\054\006\055\047\056\021\061\010\062\016\063" +
    "\017\064\026\065\005\066\040\067\046\070\013\071\025" +
    "\111\201\112\022\113\043\115\033\001\002\000\042\046" +
    "\167\054\006\055\047\056\021\061\010\062\016\063\017" +
    "\064\026\065\005\066\040\067\046\070\013\071\025\111" +
    "\166\112\022\115\033\001\002\000\072\002\ufffa\003\ufffa" +
    "\004\ufffa\005\ufffa\006\ufffa\044\ufffa\045\ufffa\046\ufffa\050" +
    "\ufffa\054\ufffa\055\ufffa\056\ufffa\061\ufffa\062\ufffa\063\ufffa" +
    "\064\ufffa\065\ufffa\066\ufffa\067\ufffa\070\ufffa\071\ufffa\104" +
    "\ufffa\105\ufffa\110\ufffa\111\ufffa\112\ufffa\113\ufffa\115\ufffa" +
    "\001\002\000\020\007\uffaf\037\uffaf\041\uffaf\042\uffaf\043" +
    "\uffaf\111\uffaf\115\uffaf\001\002\000\006\034\ufff1\111\ufff1" +
    "\001\002\000\070\002\ufffb\003\ufffb\004\ufffb\005\ufffb\006" +
    "\ufffb\044\ufffb\045\ufffb\046\ufffb\054\ufffb\055\ufffb\056\ufffb" +
    "\061\ufffb\062\ufffb\063\ufffb\064\ufffb\065\ufffb\066\ufffb\067" +
    "\ufffb\070\ufffb\071\ufffb\104\ufffb\105\ufffb\110\ufffb\111\ufffb" +
    "\112\ufffb\113\ufffb\115\ufffb\001\002\000\072\002\ufff4\003" +
    "\ufff4\004\ufff4\005\ufff4\006\ufff4\044\ufff4\045\ufff4\046\ufff4" +
    "\050\ufff4\054\ufff4\055\ufff4\056\ufff4\061\ufff4\062\ufff4\063" +
    "\ufff4\064\ufff4\065\ufff4\066\ufff4\067\ufff4\070\ufff4\071\ufff4" +
    "\104\ufff4\105\ufff4\110\ufff4\111\ufff4\112\ufff4\113\ufff4\115" +
    "\ufff4\001\002\000\070\002\uffff\003\uffff\004\uffff\005\uffff" +
    "\006\uffff\044\uffff\045\uffff\046\uffff\054\uffff\055\uffff\056" +
    "\uffff\061\uffff\062\uffff\063\uffff\064\uffff\065\uffff\066\uffff" +
    "\067\uffff\070\uffff\071\uffff\104\uffff\105\uffff\110\uffff\111" +
    "\uffff\112\uffff\113\uffff\115\uffff\001\002\000\020\007\uffb4" +
    "\037\uffb4\041\uffb4\042\uffb4\043\uffb4\111\uffb4\115\uffb4\001" +
    "\002\000\072\002\ufff9\003\ufff9\004\ufff9\005\ufff9\006\ufff9" +
    "\044\ufff9\045\ufff9\046\ufff9\050\ufff9\054\ufff9\055\ufff9\056" +
    "\ufff9\061\ufff9\062\ufff9\063\ufff9\064\ufff9\065\ufff9\066\ufff9" +
    "\067\ufff9\070\ufff9\071\ufff9\104\ufff9\105\ufff9\110\ufff9\111" +
    "\ufff9\112\ufff9\113\ufff9\115\ufff9\001\002\000\006\034\ufff2" +
    "\111\ufff2\001\002\000\004\115\160\001\002\000\006\034" +
    "\157\111\156\001\002\000\006\106\154\107\155\001\002" +
    "\000\020\007\uffb3\037\uffb3\041\uffb3\042\uffb3\043\uffb3\111" +
    "\uffb3\115\uffb3\001\002\000\020\007\uffb6\037\uffb6\041\uffb6" +
    "\042\uffb6\043\uffb6\111\uffb6\115\uffb6\001\002\000\010\007" +
    "\136\034\uffef\111\uffef\001\002\000\004\115\115\001\002" +
    "\000\012\007\056\037\054\042\055\115\053\001\002\000" +
    "\012\007\uffd0\034\uffd0\042\111\111\uffd0\001\002\000\020" +
    "\007\uffa9\037\uffa9\041\uffa9\042\uffa9\043\uffa9\111\uffa9\115" +
    "\uffa9\001\002\000\004\037\062\001\002\000\006\010\057" +
    "\114\060\001\002\000\020\007\uffab\037\uffab\041\uffab\042" +
    "\uffab\043\uffab\111\uffab\115\uffab\001\002\000\004\010\061" +
    "\001\002\000\020\007\uffaa\037\uffaa\041\uffaa\042\uffaa\043" +
    "\uffaa\111\uffaa\115\uffaa\001\002\000\004\115\063\001\002" +
    "\000\004\043\064\001\002\000\004\042\065\001\002\000" +
    "\042\043\uffcb\046\uffcb\054\uffcb\055\uffcb\056\uffcb\061\uffcb" +
    "\062\uffcb\063\uffcb\064\uffcb\065\uffcb\066\uffcb\067\uffcb\070" +
    "\uffcb\071\uffcb\111\uffcb\115\uffcb\001\002\000\042\043\uffc3" +
    "\046\070\054\006\055\047\056\021\061\010\062\016\063" +
    "\017\064\026\065\005\066\040\067\046\070\013\071\025" +
    "\111\067\115\033\001\002\000\010\041\uffc7\043\uffc7\111" +
    "\uffc7\001\002\000\004\115\110\001\002\000\016\007\056" +
    "\037\054\041\uffc9\042\101\043\uffc9\111\uffc9\001\002\000" +
    "\010\041\076\043\uffc5\111\077\001\002\000\010\041\uffc8" +
    "\043\uffc8\111\uffc8\001\002\000\004\043\075\001\002\000" +
    "\010\007\uffca\034\uffca\111\uffca\001\002\000\042\043\uffc3" +
    "\046\070\054\006\055\047\056\021\061\010\062\016\063" +
    "\017\064\026\065\005\066\040\067\046\070\013\071\025" +
    "\111\067\115\033\001\002\000\010\041\uffc6\043\uffc6\111" +
    "\uffc6\001\002\000\004\043\uffc4\001\002\000\004\037\102" +
    "\001\002\000\004\043\103\001\002\000\004\042\104\001" +
    "\002\000\042\043\uffc2\046\uffc2\054\uffc2\055\uffc2\056\uffc2" +
    "\061\uffc2\062\uffc2\063\uffc2\064\uffc2\065\uffc2\066\uffc2\067" +
    "\uffc2\070\uffc2\071\uffc2\111\uffc2\115\uffc2\001\002\000\042" +
    "\043\uffc3\046\070\054\006\055\047\056\021\061\010\062" +
    "\016\063\017\064\026\065\005\066\040\067\046\070\013" +
    "\071\025\111\067\115\033\001\002\000\004\043\107\001" +
    "\002\000\010\041\uffc1\043\uffc1\111\uffc1\001\002\000\020" +
    "\007\uffae\037\uffae\041\uffae\042\uffae\043\uffae\111\uffae\115" +
    "\uffae\001\002\000\042\043\uffd8\046\uffd8\054\uffd8\055\uffd8" +
    "\056\uffd8\061\uffd8\062\uffd8\063\uffd8\064\uffd8\065\uffd8\066" +
    "\uffd8\067\uffd8\070\uffd8\071\uffd8\111\uffd8\115\uffd8\001\002" +
    "\000\042\043\uffc3\046\070\054\006\055\047\056\021\061" +
    "\010\062\016\063\017\064\026\065\005\066\040\067\046" +
    "\070\013\071\025\111\067\115\033\001\002\000\004\043" +
    "\114\001\002\000\006\034\uffd7\111\uffd7\001\002\000\022" +
    "\007\uffae\034\uffe6\037\uffae\042\uffae\047\uffe8\057\116\111" +
    "\uffe6\115\uffae\001\002\000\014\037\121\042\123\057\116" +
    "\111\120\115\117\001\002\000\010\034\uffc0\043\uffc0\111" +
    "\uffc0\001\002\000\010\034\uffbf\043\uffbf\111\uffbf\001\002" +
    "\000\014\037\121\042\123\057\116\111\120\115\117\001" +
    "\002\000\004\047\127\001\002\000\014\037\121\042\123" +
    "\057\116\111\120\115\117\001\002\000\006\034\uffe5\111" +
    "\uffe5\001\002\000\004\043\126\001\002\000\010\034\uffbe" +
    "\043\uffbe\111\uffbe\001\002\000\054\004\032\005\045\006" +
    "\020\046\070\054\006\055\047\056\021\061\010\062\016" +
    "\063\017\064\026\065\005\066\040\067\046\070\013\071" +
    "\025\104\041\105\027\110\036\111\130\115\033\001\002" +
    "\000\056\004\ufff3\005\ufff3\006\ufff3\046\ufff3\050\ufff3\054" +
    "\ufff3\055\ufff3\056\ufff3\061\ufff3\062\ufff3\063\ufff3\064\ufff3" +
    "\065\ufff3\066\ufff3\067\ufff3\070\ufff3\071\ufff3\104\ufff3\105" +
    "\ufff3\110\ufff3\111\ufff3\115\151\001\002\000\012\007\056" +
    "\037\054\042\055\115\150\001\002\000\056\004\032\005" +
    "\045\006\020\046\070\050\144\054\006\055\047\056\021" +
    "\061\010\062\016\063\017\064\026\065\005\066\040\067" +
    "\046\070\013\071\025\104\041\105\027\110\036\111\130" +
    "\115\033\001\002\000\056\004\uffd2\005\uffd2\006\uffd2\046" +
    "\uffd2\050\uffd2\054\uffd2\055\uffd2\056\uffd2\061\uffd2\062\uffd2" +
    "\063\uffd2\064\uffd2\065\uffd2\066\uffd2\067\uffd2\070\uffd2\071" +
    "\uffd2\104\uffd2\105\uffd2\110\uffd2\111\uffd2\115\uffd2\001\002" +
    "\000\006\007\136\034\135\001\002\000\056\004\uffd4\005" +
    "\uffd4\006\uffd4\046\uffd4\050\uffd4\054\uffd4\055\uffd4\056\uffd4" +
    "\061\uffd4\062\uffd4\063\uffd4\064\uffd4\065\uffd4\066\uffd4\067" +
    "\uffd4\070\uffd4\071\uffd4\104\uffd4\105\uffd4\110\uffd4\111\uffd4" +
    "\115\uffd4\001\002\000\010\010\141\114\140\115\137\001" +
    "\002\000\004\010\143\001\002\000\004\010\142\001\002" +
    "\000\010\007\uffce\034\uffce\111\uffce\001\002\000\010\007" +
    "\uffcd\034\uffcd\111\uffcd\001\002\000\010\007\uffcc\034\uffcc" +
    "\111\uffcc\001\002\000\006\034\uffe7\111\uffe7\001\002\000" +
    "\056\004\uffd1\005\uffd1\006\uffd1\046\uffd1\050\uffd1\054\uffd1" +
    "\055\uffd1\056\uffd1\061\uffd1\062\uffd1\063\uffd1\064\uffd1\065" +
    "\uffd1\066\uffd1\067\uffd1\070\uffd1\071\uffd1\104\uffd1\105\uffd1" +
    "\110\uffd1\111\uffd1\115\uffd1\001\002\000\006\007\136\034" +
    "\147\001\002\000\056\004\uffd3\005\uffd3\006\uffd3\046\uffd3" +
    "\050\uffd3\054\uffd3\055\uffd3\056\uffd3\061\uffd3\062\uffd3\063" +
    "\uffd3\064\uffd3\065\uffd3\066\uffd3\067\uffd3\070\uffd3\071\uffd3" +
    "\104\uffd3\105\uffd3\110\uffd3\111\uffd3\115\uffd3\001\002\000" +
    "\010\007\uffd0\034\uffd0\111\uffd0\001\002\000\010\007\uffcf" +
    "\034\uffcf\111\uffcf\001\002\000\010\034\uffbd\043\uffbd\111" +
    "\uffbd\001\002\000\010\034\uffbc\043\uffbc\111\uffbc\001\002" +
    "\000\072\002\ufff6\003\ufff6\004\ufff6\005\ufff6\006\ufff6\044" +
    "\ufff6\045\ufff6\046\ufff6\050\ufff6\054\ufff6\055\ufff6\056\ufff6" +
    "\061\ufff6\062\ufff6\063\ufff6\064\ufff6\065\ufff6\066\ufff6\067" +
    "\ufff6\070\ufff6\071\ufff6\104\ufff6\105\ufff6\110\ufff6\111\ufff6" +
    "\112\ufff6\113\ufff6\115\ufff6\001\002\000\072\002\ufff5\003" +
    "\ufff5\004\ufff5\005\ufff5\006\ufff5\044\ufff5\045\ufff5\046\ufff5" +
    "\050\ufff5\054\ufff5\055\ufff5\056\ufff5\061\ufff5\062\ufff5\063" +
    "\ufff5\064\ufff5\065\ufff5\066\ufff5\067\ufff5\070\ufff5\071\ufff5" +
    "\104\ufff5\105\ufff5\110\ufff5\111\ufff5\112\ufff5\113\ufff5\115" +
    "\ufff5\001\002\000\006\034\uffed\111\uffed\001\002\000\070" +
    "\002\ufffd\003\ufffd\004\ufffd\005\ufffd\006\ufffd\044\ufffd\045" +
    "\ufffd\046\ufffd\054\ufffd\055\ufffd\056\ufffd\061\ufffd\062\ufffd" +
    "\063\ufffd\064\ufffd\065\ufffd\066\ufffd\067\ufffd\070\ufffd\071" +
    "\ufffd\104\ufffd\105\ufffd\110\ufffd\111\ufffd\112\ufffd\113\ufffd" +
    "\115\ufffd\001\002\000\020\034\uffe2\037\121\042\123\047" +
    "\uffe4\057\116\111\uffe2\115\117\001\002\000\004\047\163" +
    "\001\002\000\006\034\uffe1\111\uffe1\001\002\000\054\004" +
    "\032\005\045\006\020\046\070\054\006\055\047\056\021" +
    "\061\010\062\016\063\017\064\026\065\005\066\040\067" +
    "\046\070\013\071\025\104\041\105\027\110\036\111\130" +
    "\115\033\001\002\000\056\004\032\005\045\006\020\046" +
    "\070\050\165\054\006\055\047\056\021\061\010\062\016" +
    "\063\017\064\026\065\005\066\040\067\046\070\013\071" +
    "\025\104\041\105\027\110\036\111\130\115\033\001\002" +
    "\000\006\034\uffe3\111\uffe3\001\002\000\004\115\151\001" +
    "\002\000\006\047\174\115\173\001\002\000\010\007\136" +
    "\034\uffec\111\uffec\001\002\000\004\115\172\001\002\000" +
    "\006\034\uffe9\111\uffe9\001\002\000\016\007\uffae\037\uffae" +
    "\042\uffae\057\116\111\120\115\uffae\001\002\000\054\004" +
    "\032\005\045\006\020\046\070\054\006\055\047\056\021" +
    "\061\010\062\016\063\017\064\026\065\005\066\040\067" +
    "\046\070\013\071\025\104\041\105\027\110\036\111\130" +
    "\115\033\001\002\000\056\004\032\005\045\006\020\046" +
    "\070\050\176\054\006\055\047\056\021\061\010\062\016" +
    "\063\017\064\026\065\005\066\040\067\046\070\013\071" +
    "\025\104\041\105\027\110\036\111\130\115\033\001\002" +
    "\000\004\115\177\001\002\000\006\034\uffeb\111\uffeb\001" +
    "\002\000\006\034\uffea\111\uffea\001\002\000\004\115\204" +
    "\001\002\000\006\034\203\111\156\001\002\000\070\002" +
    "\ufffc\003\ufffc\004\ufffc\005\ufffc\006\ufffc\044\ufffc\045\ufffc" +
    "\046\ufffc\054\ufffc\055\ufffc\056\ufffc\061\ufffc\062\ufffc\063" +
    "\ufffc\064\ufffc\065\ufffc\066\ufffc\067\ufffc\070\ufffc\071\ufffc" +
    "\104\ufffc\105\ufffc\110\ufffc\111\ufffc\112\ufffc\113\ufffc\115" +
    "\ufffc\001\002\000\012\007\uffcf\034\uffcf\042\205\111\uffcf" +
    "\001\002\000\042\043\uffd6\046\uffd6\054\uffd6\055\uffd6\056" +
    "\uffd6\061\uffd6\062\uffd6\063\uffd6\064\uffd6\065\uffd6\066\uffd6" +
    "\067\uffd6\070\uffd6\071\uffd6\111\uffd6\115\uffd6\001\002\000" +
    "\042\043\uffc3\046\070\054\006\055\047\056\021\061\010" +
    "\062\016\063\017\064\026\065\005\066\040\067\046\070" +
    "\013\071\025\111\067\115\033\001\002\000\004\043\210" +
    "\001\002\000\006\034\uffd5\111\uffd5\001\002\000\004\047" +
    "\uffe0\001\002\000\004\047\213\001\002\000\004\115\214" +
    "\001\002\000\010\011\222\041\uffde\050\uffde\001\002\000" +
    "\006\041\220\050\uffdb\001\002\000\004\050\217\001\002" +
    "\000\010\034\uffdf\111\uffdf\115\uffdf\001\002\000\004\115" +
    "\214\001\002\000\004\050\uffda\001\002\000\010\041\uffdd" +
    "\050\uffdd\114\223\001\002\000\006\041\uffdc\050\uffdc\001" +
    "\002\000\020\007\uffad\037\uffad\041\uffad\042\uffad\043\uffad" +
    "\111\uffad\115\uffad\001\002\000\004\002\000\001\002\000" +
    "\070\002\001\003\001\004\001\005\001\006\001\044\001" +
    "\045\001\046\001\054\001\055\001\056\001\061\001\062" +
    "\001\063\001\064\001\065\001\066\001\067\001\070\001" +
    "\071\001\104\001\105\001\110\001\111\001\112\001\113" +
    "\001\115\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\224\000\034\002\011\004\003\005\036\010\022\022" +
    "\043\023\033\024\041\025\047\026\014\031\010\035\051" +
    "\036\013\037\006\001\001\000\032\002\011\005\225\010" +
    "\022\022\043\023\033\024\041\025\047\026\014\031\010" +
    "\035\051\036\013\037\006\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\036\223\037\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\010" +
    "\022\022\201\023\033\024\041\025\047\026\014\031\010" +
    "\035\051\036\013\037\006\001\001\000\014\025\167\031" +
    "\170\035\130\036\013\037\006\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\045\065\001\001\000\016\006\073\011\072\027" +
    "\071\035\070\036\013\037\006\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\006\077\011\072\027\071\035\070\036\013\037\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\046\104\001" +
    "\001\000\016\006\105\011\072\027\071\035\070\036\013" +
    "\037\006\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\043\111\001\001\000\016\006\112" +
    "\011\072\027\071\035\070\036\013\037\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\012\123\040\121" +
    "\001\001\000\004\012\152\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\151\001\001\000\002\001\001" +
    "\000\004\012\124\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\002\132\007\131\025\133" +
    "\035\130\036\013\037\006\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\002\144\025\145\035\130\036\013" +
    "\037\006\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\012" +
    "\161\041\160\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\002\132\007\163\025\133\035\130\036\013\037" +
    "\006\001\001\000\014\002\144\025\145\035\130\036\013" +
    "\037\006\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\177\001\001\000\016\002\132\007" +
    "\174\025\133\035\130\036\013\037\006\001\001\000\014" +
    "\002\144\025\145\035\130\036\013\037\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\044\205\001\001\000\016\006\206\011\072" +
    "\027\071\035\070\036\013\037\006\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\042\211\001\001\000\002" +
    "\001\001\000\006\032\215\033\214\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\032\220\033\214\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public CodeGenerator cg = new CodeGenerator();
	public void report_error(String message, Object info) {
		StringBuilder m = new StringBuilder("Error");
		if (info instanceof java_cup.runtime.Symbol) {
			java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
			if (s.left >= 0) {                
				m.append(" in line "+(s.left+1));   
				if (s.right >= 0)                    
					m.append(", column "+(s.right+1));
			}
		}
   
        	m.append(" : "+message);
   
        	System.err.println(m);
    	}
	
	public void report_fatal_error(String message, Object info) {
	report_error(message, info);
	System.exit(0);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // type ::= type STAR 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=t + "*"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // type ::= type LBRACKET NUMBER RBRACKET 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=t + "[" + n + "]"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // type ::= type LBRACKET RBRACKET 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT=t + "[]"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // type ::= pre_type 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // pre_type ::= UN_SIGNED pre_type 
            {
              String RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= u + " " + p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_type",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // pre_type ::= STRUCT ID 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= "struct " + i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_type",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // pre_type ::= ID 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_type",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // pre_type ::= c_type 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_type",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // c_type ::= LDOUBLE 
            {
              String RESULT =null;
		 RESULT= "long double"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // c_type ::= DOUBLE 
            {
              String RESULT =null;
		 RESULT= "double"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // c_type ::= FLOAT 
            {
              String RESULT =null;
		 RESULT= "float"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // c_type ::= LLINT 
            {
              String RESULT =null;
		 RESULT= "long long int"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // c_type ::= LLONG 
            {
              String RESULT =null;
		 RESULT= "long long"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // c_type ::= LONG 
            {
              String RESULT =null;
		 RESULT="long"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // c_type ::= SHORT 
            {
              String RESULT =null;
		 RESULT="short"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // c_type ::= LINT 
            {
              String RESULT =null;
		 RESULT= "long int"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // c_type ::= SINT 
            {
              String RESULT =null;
		 RESULT= "short int"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // c_type ::= INT 
            {
              String RESULT =null;
		 RESULT= "int"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // c_type ::= CHAR 
            {
              String RESULT =null;
		 RESULT= "char"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expression ::= AMPERSAND expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "&" + e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expression ::= STAR expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "*"+e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expression ::= LPAREN expression RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "("+e+")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expression ::= COMPWORD 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expression ::= ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ident_funcpointer ::= type LPAREN STAR RPAREN LPAREN NT$6 params RPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String p4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ps2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ps2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ps2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			Function funcp = parser.cg.paramsowner;
			funcp.pointer = true;
			parser.cg.paramsowner = parser.cg.params_owners.pop();
			RESULT = funcp;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident_funcpointer",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$6 ::= 
            {
              Object RESULT =null;
		int p4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String p4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

			Function funcp = new Function();
			funcp.pointer = true;
			funcp.setReturn_type(p4);
			parser.cg.params_owners.push(parser.cg.paramsowner);
			parser.cg.paramsowner = funcp;  
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // params ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // params ::= parameter COMMA params 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int psright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ps = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.cg.paramsowner.pushParam(p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // params ::= parameter 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.cg.paramsowner.pushParam(p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // parameter ::= parameter COMPWORD 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // parameter ::= COMPWORD 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // parameter ::= ident_funcpointer 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // parameter ::= type 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = t;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // var_declaration ::= type LPAREN STAR ID RPAREN LPAREN NT$5 params RPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int i7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int i7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String i7 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int i8left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i8right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i8 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ps = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			Function funcp = parser.cg.paramsowner;
			funcp.pointer = true;
			parser.cg.var.setFuncpointer(funcp);
			parser.cg.paramsowner = parser.cg.params_owners.pop();
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declaration",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$5 ::= 
            {
              Object RESULT =null;
		int i7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i7 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int i8left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i8right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i8 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 
			parser.cg.var.setType(i7+"*");
			parser.cg.var.setID(i8);
			Function funcp = new Function();
			funcp.setID(i8);
			funcp.setReturn_type(i7+"*");
			parser.cg.params_owners.push(parser.cg.paramsowner);
			parser.cg.paramsowner = funcp;  
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // var_declaration ::= var_declaration LBRACKET ID RBRACKET 
            {
              Object RESULT =null;
		
			parser.cg.var.addArray(0);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declaration",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // var_declaration ::= var_declaration LBRACKET NUMBER RBRACKET 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			parser.cg.var.addArray(n);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declaration",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // var_declaration ::= var_declaration LBRACKET RBRACKET 
            {
              Object RESULT =null;
		
			parser.cg.var.addArray(0);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declaration",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // var_declaration ::= COMPWORD ID 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			parser.cg.var.setType((String) c);
			parser.cg.var.setID(i);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declaration",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // var_declaration ::= type ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			parser.cg.var.setType(i);
			parser.cg.var.setID(i2);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declaration",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // struct_body ::= struct_body pre_process_step 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("struct_body",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // struct_body ::= pre_process_step 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("struct_body",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // struct_body ::= struct_body var_declaration SEMI 
            {
              Object RESULT =null;
		
				if (parser.cg.structblock)
					parser.cg.addDeclaration(parser.cg.var);
				else
					parser.cg.struct.addMember(parser.cg.var);
	
			        parser.cg.var = new Variable();
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("struct_body",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // struct_body ::= var_declaration SEMI 
            {
              Object RESULT =null;
		
				if (parser.cg.structblock)
					parser.cg.addDeclaration(parser.cg.var);
				else
					parser.cg.struct.addMember(parser.cg.var);
			        parser.cg.var = new Variable();
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("struct_body",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // func ::= COMPWORD ID LPAREN NT$4 params RPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$4 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 
			parser.cg.func.setReturn_type(e);
			parser.cg.func.setID(e2);
			parser.cg.paramsowner = parser.cg.func;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // func ::= type ID LPAREN NT$3 params RPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$3 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 
			parser.cg.func.setReturn_type(e);
			parser.cg.func.setID(e2);
			parser.cg.paramsowner = parser.cg.func;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // function_declaration ::= func 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.cg.declareFunc(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // enum_body ::= enum_constant COMMA enum_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("enum_body",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // enum_body ::= enum_constant 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("enum_body",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // enum_constant ::= ID ASSIGN NUMBER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.cg.enumm.addMember(i, n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("enum_constant",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // enum_constant ::= ID ASSIGN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.cg.enumm.addMember(i, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("enum_constant",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // enum_constant ::= ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.cg.enumm.addMember(i, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("enum_constant",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // enum_declaration ::= ENUMM ID NT$2 LQ enum_body RQ 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("enum_declaration",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$2 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
parser.cg.enumm.setID(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // struct_declaration ::= UNION ID expression 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
					parser.cg.struct.setID(i);
					parser.cg.struct.setUnion(true);
					parser.cg.declareStruct();
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("struct_declaration",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // struct_declaration ::= UNION ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
					parser.cg.struct.setID(i);
					parser.cg.struct.setUnion(true);
					parser.cg.declareStruct();
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("struct_declaration",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // struct_declaration ::= UNION ID NT$1 LQ struct_body RQ 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.cg.declareStruct(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("struct_declaration",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$1 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 
					parser.cg.structflag = true;
					parser.cg.struct.setID(i);
					parser.cg.struct.setUnion(true);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // struct_declaration ::= STRUCT ID expression 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
					parser.cg.struct.setID(i);
					parser.cg.declareStruct();
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("struct_declaration",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // struct_declaration ::= STRUCT ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
					parser.cg.struct.setID(i);
					parser.cg.declareStruct();
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("struct_declaration",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // struct_declaration ::= STRUCT ID NT$0 LQ struct_body RQ 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.cg.declareStruct(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("struct_declaration",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$0 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 
					parser.cg.structflag = true;
					parser.cg.struct.setID(i);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // typedef_declaration ::= TYPEDEF enum_declaration ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("typedef_declaration",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // typedef_declaration ::= TYPEDEF STRUCT ID expression 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.cg.declareTypedef_struct(i, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typedef_declaration",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // typedef_declaration ::= TYPEDEF STRUCT LQ struct_body RQ ID 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.cg.declareTypedef_struct(i, ""); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typedef_declaration",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // typedef_declaration ::= TYPEDEF var_declaration 
            {
              Object RESULT =null;
		int d2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.cg.declareTypedef_var(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typedef_declaration",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // general_declaration ::= general_declaration COMPWORD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("general_declaration",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // general_declaration ::= function_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("general_declaration",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // general_declaration ::= var_declaration 
            {
              Object RESULT =null;
		 parser.cg.declareVar(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("general_declaration",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // general_declaration ::= enum_declaration 
            {
              Object RESULT =null;
		 parser.cg.declareEnum(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("general_declaration",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // general_declaration ::= struct_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("general_declaration",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // general_declaration ::= typedef_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("general_declaration",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // pre_process_step ::= COMPWORD 
            {
              Object RESULT =null;
		 /*DO NOTHING*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_process_step",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // pre_process_step ::= INCLUDE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("include" + i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_process_step",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // pre_process_step ::= SHARP ENDIF 
            {
              Object RESULT =null;
		 parser.cg.declareConditionalBlock(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_process_step",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // pre_process_step ::= SHARP ELSE 
            {
              Object RESULT =null;
		 parser.cg.conditionalBlocks.peek().condition = false; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_process_step",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // pre_process_step ::= DEFINE 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					parser.cg.define.setExp(d);
					parser.cg.define.setID("");
					parser.cg.declareDefine();
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_process_step",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // pre_process_step ::= IFNDEF 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.cg.newConditionalBlock(i,false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_process_step",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // pre_process_step ::= IFDEF 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.cg.newConditionalBlock(i,true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_process_step",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // pre_process_step ::= IF 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.cg.newConditionalBlock(i,true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_process_step",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // code_part ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_part",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // code_part ::= EXTERN general_declaration SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_part",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // code_part ::= general_declaration SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_part",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // code_part ::= pre_process_step 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_part",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= code_part 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= program code_part 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

