
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Oct 29 10:50:04 CET 2014
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Oct 29 10:50:04 CET 2014
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\202\000\002\003\004\000\002\002\004\000\002\003" +
    "\003\000\002\004\005\000\002\004\005\000\002\004\005" +
    "\000\002\004\011\000\002\004\010\000\002\004\004\000" +
    "\002\002\004\000\002\002\007\000\002\002\005\000\002" +
    "\021\003\000\002\021\003\000\002\021\006\000\002\021" +
    "\005\000\002\021\005\000\002\021\005\000\002\021\005" +
    "\000\002\021\004\000\002\021\004\000\002\021\004\000" +
    "\002\021\004\000\002\021\004\000\002\021\004\000\002" +
    "\021\004\000\002\021\004\000\002\021\005\000\002\021" +
    "\005\000\002\021\005\000\002\021\007\000\002\021\004" +
    "\000\002\021\004\000\002\021\005\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\006\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\004\000\002\012\004\000\002\012\004" +
    "\000\002\012\004\000\002\012\004\000\002\012\004\000" +
    "\002\012\004\000\002\012\004\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\007\000\002\012" +
    "\004\000\002\012\004\000\002\012\005\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\004\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\013\006\000" +
    "\002\013\005\000\002\014\005\000\002\014\003\000\002" +
    "\020\005\000\002\020\003\000\002\020\002\000\002\025" +
    "\002\000\002\010\010\000\002\007\004\000\002\007\005" +
    "\000\002\006\004\000\002\006\005\000\002\006\006\000" +
    "\002\026\002\000\002\006\013\000\002\005\003\000\002" +
    "\005\005\000\002\005\005\000\002\005\003\000\002\005" +
    "\005\000\002\005\002\000\002\027\002\000\002\011\012" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\004\000\002\023\004\000\002\023\004\000" +
    "\002\022\003\000\002\022\005\000\002\022\006\000\002" +
    "\022\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\337\000\012\004\007\042\005\043\010\044\006\001" +
    "\002\000\014\002\341\004\007\042\005\043\010\044\006" +
    "\001\002\000\040\044\036\052\031\053\013\054\025\055" +
    "\030\060\016\061\015\062\023\063\022\064\033\065\020" +
    "\066\024\067\034\070\012\104\021\001\002\000\004\104" +
    "\321\001\002\000\004\104\113\001\002\000\040\044\014" +
    "\052\031\053\013\054\025\055\030\060\016\061\015\062" +
    "\023\063\022\064\033\065\020\066\024\067\034\070\012" +
    "\104\021\001\002\000\014\002\uffff\004\uffff\042\uffff\043" +
    "\uffff\044\uffff\001\002\000\016\005\uff89\035\uff89\037\uff89" +
    "\040\uff89\041\uff89\104\uff89\001\002\000\016\005\uff8e\035" +
    "\uff8e\037\uff8e\040\uff8e\041\uff8e\104\uff8e\001\002\000\006" +
    "\045\102\104\037\001\002\000\016\005\uff92\035\uff92\037" +
    "\uff92\040\uff92\041\uff92\104\uff92\001\002\000\016\005\uff93" +
    "\035\uff93\037\uff93\040\uff93\041\uff93\104\uff93\001\002\000" +
    "\012\005\051\035\047\040\050\104\046\001\002\000\016" +
    "\005\uff8c\035\uff8c\037\uff8c\040\uff8c\041\uff8c\104\uff8c\001" +
    "\002\000\016\005\uff87\035\uff87\037\uff87\040\uff87\041\uff87" +
    "\104\uff87\001\002\000\016\005\uff90\035\uff90\037\uff90\040" +
    "\uff90\041\uff90\104\uff90\001\002\000\016\005\uff91\035\uff91" +
    "\037\uff91\040\uff91\041\uff91\104\uff91\001\002\000\016\005" +
    "\uff8b\035\uff8b\037\uff8b\040\uff8b\041\uff8b\104\uff8b\001\002" +
    "\000\040\044\036\052\031\053\013\054\025\055\030\060" +
    "\016\061\015\062\023\063\022\064\033\065\020\066\024" +
    "\067\034\070\012\104\021\001\002\000\006\005\041\032" +
    "\040\001\002\000\016\005\uff83\035\uff83\037\uff83\040\uff83" +
    "\041\uff83\104\uff83\001\002\000\040\044\036\052\031\053" +
    "\013\054\025\055\030\060\016\061\015\062\023\063\022" +
    "\064\033\065\020\066\024\067\034\070\012\104\021\001" +
    "\002\000\016\005\uff8f\035\uff8f\037\uff8f\040\uff8f\041\uff8f" +
    "\104\uff8f\001\002\000\016\005\uff88\035\uff88\037\uff88\040" +
    "\uff88\041\uff88\104\uff88\001\002\000\016\005\uff8d\035\uff8d" +
    "\037\uff8d\040\uff8d\041\uff8d\104\uff8d\001\002\000\016\005" +
    "\uff8a\035\uff8a\037\uff8a\040\uff8a\041\uff8a\104\uff8a\001\002" +
    "\000\016\005\uff84\035\uff84\037\uff84\040\uff84\041\uff84\104" +
    "\uff84\001\002\000\004\104\037\001\002\000\016\005\uff86" +
    "\035\uff86\037\uff86\040\uff86\041\uff86\104\uff86\001\002\000" +
    "\014\002\ufffc\004\ufffc\042\ufffc\043\ufffc\044\ufffc\001\002" +
    "\000\006\006\043\103\042\001\002\000\004\006\044\001" +
    "\002\000\006\005\uff9f\032\uff9f\001\002\000\006\005\uff9e" +
    "\032\uff9e\001\002\000\016\005\uff85\035\uff85\037\uff85\040" +
    "\uff85\041\uff85\104\uff85\001\002\000\006\005\uffa0\032\uffa0" +
    "\001\002\000\016\005\uff80\035\uff80\037\uff80\040\uff80\041" +
    "\uff80\104\uff80\001\002\000\004\035\055\001\002\000\006" +
    "\006\052\103\053\001\002\000\016\005\uff82\035\uff82\037" +
    "\uff82\040\uff82\041\uff82\104\uff82\001\002\000\004\006\054" +
    "\001\002\000\016\005\uff81\035\uff81\037\uff81\040\uff81\041" +
    "\uff81\104\uff81\001\002\000\004\104\056\001\002\000\004" +
    "\041\057\001\002\000\004\040\060\001\002\000\042\041" +
    "\uff9d\044\uff9d\052\uff9d\053\uff9d\054\uff9d\055\uff9d\060\uff9d" +
    "\061\uff9d\062\uff9d\063\uff9d\064\uff9d\065\uff9d\066\uff9d\067" +
    "\uff9d\070\uff9d\104\uff9d\001\002\000\042\041\uff96\044\036" +
    "\052\031\053\013\054\025\055\030\060\016\061\015\062" +
    "\023\063\022\064\033\065\020\066\024\067\034\070\012" +
    "\104\021\001\002\000\014\005\051\035\047\037\070\040" +
    "\071\041\uff9b\001\002\000\006\037\066\041\uff98\001\002" +
    "\000\004\041\065\001\002\000\006\005\uff9c\032\uff9c\001" +
    "\002\000\042\041\uff96\044\036\052\031\053\013\054\025" +
    "\055\030\060\016\061\015\062\023\063\022\064\033\065" +
    "\020\066\024\067\034\070\012\104\021\001\002\000\004" +
    "\041\uff97\001\002\000\044\011\100\041\uff96\044\036\052" +
    "\031\053\013\054\025\055\030\060\016\061\015\062\023" +
    "\063\022\064\033\065\020\066\024\067\034\070\012\104" +
    "\021\001\002\000\004\035\072\001\002\000\004\041\073" +
    "\001\002\000\004\040\074\001\002\000\042\041\uff95\044" +
    "\uff95\052\uff95\053\uff95\054\uff95\055\uff95\060\uff95\061\uff95" +
    "\062\uff95\063\uff95\064\uff95\065\uff95\066\uff95\067\uff95\070" +
    "\uff95\104\uff95\001\002\000\042\041\uff96\044\036\052\031" +
    "\053\013\054\025\055\030\060\016\061\015\062\023\063" +
    "\022\064\033\065\020\066\024\067\034\070\012\104\021" +
    "\001\002\000\004\041\077\001\002\000\006\037\uff94\041" +
    "\uff94\001\002\000\004\041\uff99\001\002\000\004\041\uff9a" +
    "\001\002\000\040\044\036\052\031\053\013\054\025\055" +
    "\030\060\016\061\015\062\023\063\022\064\033\065\020" +
    "\066\024\067\034\070\012\104\021\001\002\000\006\005" +
    "\041\032\112\001\002\000\042\044\036\046\105\052\031" +
    "\053\013\054\025\055\030\060\016\061\015\062\023\063" +
    "\022\064\033\065\020\066\024\067\034\070\012\104\021" +
    "\001\002\000\004\104\110\001\002\000\006\005\041\032" +
    "\107\001\002\000\042\044\uffa1\046\uffa1\052\uffa1\053\uffa1" +
    "\054\uffa1\055\uffa1\060\uffa1\061\uffa1\062\uffa1\063\uffa1\064" +
    "\uffa1\065\uffa1\066\uffa1\067\uffa1\070\uffa1\104\uffa1\001\002" +
    "\000\004\032\111\001\002\000\014\002\ufffb\004\ufffb\042" +
    "\ufffb\043\ufffb\044\ufffb\001\002\000\042\044\uffa2\046\uffa2" +
    "\052\uffa2\053\uffa2\054\uffa2\055\uffa2\060\uffa2\061\uffa2\062" +
    "\uffa2\063\uffa2\064\uffa2\065\uffa2\066\uffa2\067\uffa2\070\uffa2" +
    "\104\uffa2\001\002\000\032\013\124\021\130\022\125\033" +
    "\121\034\115\035\120\040\131\044\117\056\132\057\122" +
    "\103\116\104\123\001\002\000\014\002\ufff9\004\ufff9\042" +
    "\ufff9\043\ufff9\044\ufff9\001\002\000\030\013\142\021\145" +
    "\022\143\033\137\034\133\035\136\040\146\056\147\057" +
    "\140\103\134\104\141\001\002\000\122\002\ufff5\004\ufff5" +
    "\005\ufff5\007\ufff5\010\ufff5\012\ufff5\014\ufff5\015\ufff5\016" +
    "\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5\023\ufff5\024\ufff5" +
    "\025\ufff5\026\ufff5\027\ufff5\030\ufff5\033\ufff5\034\ufff5\036" +
    "\ufff5\041\ufff5\042\ufff5\043\ufff5\044\ufff5\047\ufff5\050\ufff5" +
    "\051\ufff5\056\ufff5\071\ufff5\072\ufff5\073\ufff5\074\ufff5\075" +
    "\ufff5\076\ufff5\077\ufff5\100\ufff5\101\ufff5\102\ufff5\001\002" +
    "\000\004\104\317\001\002\000\030\013\142\021\145\022" +
    "\143\033\137\034\133\035\136\040\146\056\147\057\140" +
    "\103\134\104\141\001\002\000\030\013\142\021\145\022" +
    "\143\033\137\034\133\035\136\040\146\056\147\057\140" +
    "\103\134\104\141\001\002\000\030\013\142\021\145\022" +
    "\143\033\137\034\133\035\136\040\146\056\147\057\140" +
    "\103\134\104\141\001\002\000\004\040\223\001\002\000" +
    "\030\013\142\021\145\022\143\033\137\034\133\035\136" +
    "\040\146\056\147\057\140\103\134\104\141\001\002\000" +
    "\030\013\142\021\145\022\143\033\137\034\133\035\136" +
    "\040\146\056\147\057\140\103\134\104\141\001\002\000" +
    "\120\002\ufff8\004\ufff8\005\261\007\177\010\265\012\167" +
    "\014\164\015\165\016\157\017\173\020\262\021\260\022" +
    "\257\023\161\024\202\025\171\026\172\027\163\030\203" +
    "\033\176\034\166\036\151\042\ufff8\043\ufff8\044\ufff8\047" +
    "\205\050\206\051\263\056\200\071\174\072\175\073\207" +
    "\074\153\075\170\076\152\077\204\100\213\101\212\102" +
    "\211\001\002\000\122\002\ufff4\004\ufff4\005\ufff4\007\ufff4" +
    "\010\ufff4\012\ufff4\014\ufff4\015\ufff4\016\ufff4\017\ufff4\020" +
    "\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4" +
    "\027\ufff4\030\ufff4\033\ufff4\034\ufff4\036\ufff4\041\ufff4\042" +
    "\ufff4\043\ufff4\044\ufff4\047\ufff4\050\ufff4\051\ufff4\056\ufff4" +
    "\071\ufff4\072\ufff4\073\ufff4\074\ufff4\075\ufff4\076\ufff4\077" +
    "\ufff4\100\ufff4\101\ufff4\102\ufff4\001\002\000\030\013\142" +
    "\021\145\022\143\033\137\034\133\035\136\040\146\056" +
    "\147\057\140\103\134\104\141\001\002\000\034\013\124" +
    "\021\130\022\125\033\121\034\115\035\120\037\uffa5\040" +
    "\256\041\uffa5\056\132\057\122\103\116\104\254\001\002" +
    "\000\030\013\142\021\145\022\143\033\137\034\133\035" +
    "\136\040\146\056\147\057\140\103\134\104\141\001\002" +
    "\000\030\013\142\021\145\022\143\033\137\034\133\035" +
    "\136\040\146\056\147\057\140\103\134\104\141\001\002" +
    "\000\130\002\uffdf\004\uffdf\005\uffdf\006\uffdf\007\uffdf\010" +
    "\uffdf\012\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf" +
    "\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027" +
    "\uffdf\030\uffdf\031\uffdf\033\uffdf\034\uffdf\036\uffdf\037\uffdf" +
    "\041\uffdf\042\uffdf\043\uffdf\044\uffdf\047\uffdf\050\uffdf\051" +
    "\uffdf\056\uffdf\071\uffdf\072\uffdf\073\uffdf\074\uffdf\075\uffdf" +
    "\076\uffdf\077\uffdf\100\uffdf\101\uffdf\102\uffdf\001\002\000" +
    "\122\002\uffe7\004\uffe7\005\156\007\uffe7\010\201\012\uffe7" +
    "\014\uffe7\015\uffe7\016\uffe7\017\uffe7\020\160\021\155\022" +
    "\154\023\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7" +
    "\033\uffe7\034\uffe7\036\uffe7\041\uffe7\042\uffe7\043\uffe7\044" +
    "\uffe7\047\uffe7\050\uffe7\051\uffe7\056\uffe7\071\uffe7\072\uffe7" +
    "\073\uffe7\074\uffe7\075\uffe7\076\uffe7\077\uffe7\100\uffe7\101" +
    "\uffe7\102\uffe7\001\002\000\030\013\142\021\145\022\143" +
    "\033\137\034\133\035\136\040\146\056\147\057\140\103" +
    "\134\104\141\001\002\000\030\013\142\021\145\022\143" +
    "\033\137\034\133\035\136\040\146\056\147\057\140\103" +
    "\134\104\141\001\002\000\030\013\142\021\145\022\143" +
    "\033\137\034\133\035\136\040\146\056\147\057\140\103" +
    "\134\104\141\001\002\000\132\002\uffde\004\uffde\005\uffde" +
    "\006\uffde\007\uffde\010\uffde\012\uffde\014\uffde\015\uffde\016" +
    "\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023\uffde\024\uffde" +
    "\025\uffde\026\uffde\027\uffde\030\uffde\031\uffde\033\uffde\034" +
    "\uffde\036\uffde\037\uffde\040\223\041\uffde\042\uffde\043\uffde" +
    "\044\uffde\047\uffde\050\uffde\051\uffde\056\uffde\071\uffde\072" +
    "\uffde\073\uffde\074\uffde\075\uffde\076\uffde\077\uffde\100\uffde" +
    "\101\uffde\102\uffde\001\002\000\030\013\142\021\145\022" +
    "\143\033\137\034\133\035\136\040\146\056\147\057\140" +
    "\103\134\104\141\001\002\000\030\013\142\021\145\022" +
    "\143\033\137\034\133\035\136\040\146\056\147\057\140" +
    "\103\134\104\141\001\002\000\130\002\uffdd\004\uffdd\005" +
    "\uffdd\006\uffdd\007\uffdd\010\uffdd\012\uffdd\014\uffdd\015\uffdd" +
    "\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024" +
    "\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\033\uffdd" +
    "\034\uffdd\036\uffdd\037\uffdd\041\uffdd\042\uffdd\043\uffdd\044" +
    "\uffdd\047\uffdd\050\uffdd\051\uffdd\056\uffdd\071\uffdd\072\uffdd" +
    "\073\uffdd\074\uffdd\075\uffdd\076\uffdd\077\uffdd\100\uffdd\101" +
    "\uffdd\102\uffdd\001\002\000\030\013\142\021\145\022\143" +
    "\033\137\034\133\035\136\040\146\056\147\057\140\103" +
    "\134\104\141\001\002\000\030\013\142\021\145\022\143" +
    "\033\137\034\133\035\136\040\146\056\147\057\140\103" +
    "\134\104\141\001\002\000\030\013\142\021\145\022\143" +
    "\033\137\034\133\035\136\040\146\056\147\057\140\103" +
    "\134\104\141\001\002\000\130\002\uffd0\004\uffd0\005\156" +
    "\006\uffd0\007\uffd0\010\201\012\uffd0\014\uffd0\015\uffd0\016" +
    "\uffd0\017\uffd0\020\160\021\155\022\154\023\uffd0\024\uffd0" +
    "\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\033\uffd0\034" +
    "\uffd0\036\uffd0\037\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0" +
    "\047\uffd0\050\uffd0\051\uffd0\056\uffd0\071\uffd0\072\uffd0\073" +
    "\uffd0\074\uffd0\075\uffd0\076\uffd0\077\uffd0\100\uffd0\101\uffd0" +
    "\102\uffd0\001\002\000\030\013\uffc7\021\uffc7\022\uffc7\033" +
    "\uffc7\034\uffc7\035\uffc7\040\uffc7\056\uffc7\057\uffc7\103\uffc7" +
    "\104\uffc7\001\002\000\030\013\uffbd\021\uffbd\022\uffbd\033" +
    "\uffbd\034\uffbd\035\uffbd\040\uffbd\056\uffbd\057\uffbd\103\uffbd" +
    "\104\uffbd\001\002\000\030\013\uffbf\021\uffbf\022\uffbf\033" +
    "\uffbf\034\uffbf\035\uffbf\040\uffbf\056\uffbf\057\uffbf\103\uffbf" +
    "\104\uffbf\001\002\000\130\002\uffd7\004\uffd7\005\uffd7\006" +
    "\uffd7\007\uffd7\010\uffd7\012\uffd7\014\uffd7\015\uffd7\016\uffd7" +
    "\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7\025" +
    "\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\033\uffd7\034\uffd7" +
    "\036\uffd7\037\uffd7\041\uffd7\042\uffd7\043\uffd7\044\uffd7\047" +
    "\uffd7\050\uffd7\051\uffd7\056\uffd7\071\uffd7\072\uffd7\073\uffd7" +
    "\074\uffd7\075\uffd7\076\uffd7\077\uffd7\100\uffd7\101\uffd7\102" +
    "\uffd7\001\002\000\130\002\uffd6\004\uffd6\005\uffd6\006\uffd6" +
    "\007\uffd6\010\uffd6\012\uffd6\014\uffd6\015\uffd6\016\uffd6\017" +
    "\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6" +
    "\026\uffd6\027\uffd6\030\uffd6\031\uffd6\033\uffd6\034\uffd6\036" +
    "\uffd6\037\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6\047\uffd6" +
    "\050\uffd6\051\uffd6\056\uffd6\071\uffd6\072\uffd6\073\uffd6\074" +
    "\uffd6\075\uffd6\076\uffd6\077\uffd6\100\uffd6\101\uffd6\102\uffd6" +
    "\001\002\000\030\013\142\021\145\022\143\033\137\034" +
    "\133\035\136\040\146\056\147\057\140\103\134\104\141" +
    "\001\002\000\030\013\uffb7\021\uffb7\022\uffb7\033\uffb7\034" +
    "\uffb7\035\uffb7\040\uffb7\056\uffb7\057\uffb7\103\uffb7\104\uffb7" +
    "\001\002\000\004\104\236\001\002\000\030\013\uffb0\021" +
    "\uffb0\022\uffb0\033\uffb0\034\uffb0\035\uffb0\040\uffb0\056\uffb0" +
    "\057\uffb0\103\uffb0\104\uffb0\001\002\000\030\013\142\021" +
    "\145\022\143\033\137\034\133\035\136\040\146\056\147" +
    "\057\140\103\134\104\141\001\002\000\030\013\uffae\021" +
    "\uffae\022\uffae\033\uffae\034\uffae\035\uffae\040\uffae\056\uffae" +
    "\057\uffae\103\uffae\104\uffae\001\002\000\030\013\uffb1\021" +
    "\uffb1\022\uffb1\033\uffb1\034\uffb1\035\uffb1\040\uffb1\056\uffb1" +
    "\057\uffb1\103\uffb1\104\uffb1\001\002\000\030\013\uffb3\021" +
    "\uffb3\022\uffb3\033\uffb3\034\uffb3\035\uffb3\040\uffb3\056\uffb3" +
    "\057\uffb3\103\uffb3\104\uffb3\001\002\000\030\013\uffc4\021" +
    "\uffc4\022\uffc4\033\uffc4\034\uffc4\035\uffc4\040\uffc4\056\uffc4" +
    "\057\uffc4\103\uffc4\104\uffc4\001\002\000\030\013\uffb5\021" +
    "\uffb5\022\uffb5\033\uffb5\034\uffb5\035\uffb5\040\uffb5\056\uffb5" +
    "\057\uffb5\103\uffb5\104\uffb5\001\002\000\030\013\uffbe\021" +
    "\uffbe\022\uffbe\033\uffbe\034\uffbe\035\uffbe\040\uffbe\056\uffbe" +
    "\057\uffbe\103\uffbe\104\uffbe\001\002\000\030\013\uffad\021" +
    "\uffad\022\uffad\033\uffad\034\uffad\035\uffad\040\uffad\056\uffad" +
    "\057\uffad\103\uffad\104\uffad\001\002\000\030\013\uffac\021" +
    "\uffac\022\uffac\033\uffac\034\uffac\035\uffac\040\uffac\056\uffac" +
    "\057\uffac\103\uffac\104\uffac\001\002\000\030\013\uffb8\021" +
    "\uffb8\022\uffb8\033\uffb8\034\uffb8\035\uffb8\040\uffb8\056\uffb8" +
    "\057\uffb8\103\uffb8\104\uffb8\001\002\000\030\013\uffc2\021" +
    "\uffc2\022\uffc2\033\uffc2\034\uffc2\035\uffc2\040\uffc2\056\uffc2" +
    "\057\uffc2\103\uffc2\104\uffc2\001\002\000\030\013\uffc1\021" +
    "\uffc1\022\uffc1\033\uffc1\034\uffc1\035\uffc1\040\uffc1\056\uffc1" +
    "\057\uffc1\103\uffc1\104\uffc1\001\002\000\030\013\uffc5\021" +
    "\uffc5\022\uffc5\033\uffc5\034\uffc5\035\uffc5\040\uffc5\056\uffc5" +
    "\057\uffc5\103\uffc5\104\uffc5\001\002\000\030\013\uffc8\021" +
    "\uffc8\022\uffc8\033\uffc8\034\uffc8\035\uffc8\040\uffc8\056\uffc8" +
    "\057\uffc8\103\uffc8\104\uffc8\001\002\000\032\007\232\013" +
    "\uffb4\021\uffb4\022\uffb4\033\uffb4\034\uffb4\035\uffb4\040\uffb4" +
    "\056\uffb4\057\uffb4\103\uffb4\104\uffb4\001\002\000\004\104" +
    "\221\001\002\000\030\013\uffb2\021\uffb2\022\uffb2\033\uffb2" +
    "\034\uffb2\035\uffb2\040\uffb2\056\uffb2\057\uffb2\103\uffb2\104" +
    "\uffb2\001\002\000\030\013\uffaf\021\uffaf\022\uffaf\033\uffaf" +
    "\034\uffaf\035\uffaf\040\uffaf\056\uffaf\057\uffaf\103\uffaf\104" +
    "\uffaf\001\002\000\030\013\uffbc\021\uffbc\022\uffbc\033\uffbc" +
    "\034\uffbc\035\uffbc\040\uffbc\056\uffbc\057\uffbc\103\uffbc\104" +
    "\uffbc\001\002\000\030\013\uffc6\021\uffc6\022\uffc6\033\uffc6" +
    "\034\uffc6\035\uffc6\040\uffc6\056\uffc6\057\uffc6\103\uffc6\104" +
    "\uffc6\001\002\000\030\013\uffb6\021\uffb6\022\uffb6\033\uffb6" +
    "\034\uffb6\035\uffb6\040\uffb6\056\uffb6\057\uffb6\103\uffb6\104" +
    "\uffb6\001\002\000\030\013\uffc0\021\uffc0\022\uffc0\033\uffc0" +
    "\034\uffc0\035\uffc0\040\uffc0\056\uffc0\057\uffc0\103\uffc0\104" +
    "\uffc0\001\002\000\030\013\142\021\145\022\143\033\137" +
    "\034\133\035\136\040\146\056\147\057\140\103\134\104" +
    "\141\001\002\000\030\013\uffb9\021\uffb9\022\uffb9\033\uffb9" +
    "\034\uffb9\035\uffb9\040\uffb9\056\uffb9\057\uffb9\103\uffb9\104" +
    "\uffb9\001\002\000\030\013\uffba\021\uffba\022\uffba\033\uffba" +
    "\034\uffba\035\uffba\040\uffba\056\uffba\057\uffba\103\uffba\104" +
    "\uffba\001\002\000\030\013\uffbb\021\uffbb\022\uffbb\033\uffbb" +
    "\034\uffbb\035\uffbb\040\uffbb\056\uffbb\057\uffbb\103\uffbb\104" +
    "\uffbb\001\002\000\030\013\142\021\145\022\143\033\137" +
    "\034\133\035\136\040\146\056\147\057\140\103\134\104" +
    "\141\001\002\000\030\013\142\021\145\022\143\033\137" +
    "\034\133\035\136\040\146\056\147\057\140\103\134\104" +
    "\141\001\002\000\130\002\uffce\004\uffce\005\156\006\uffce" +
    "\007\177\010\201\012\167\014\164\015\165\016\157\017" +
    "\173\020\160\021\155\022\154\023\161\024\202\025\171" +
    "\026\172\027\163\030\203\031\uffce\033\176\034\166\036" +
    "\151\037\uffce\041\uffce\042\uffce\043\uffce\044\uffce\047\205" +
    "\050\206\051\162\056\200\071\174\072\175\073\207\074" +
    "\153\075\170\076\152\077\204\100\213\101\212\102\211" +
    "\001\002\000\130\002\uffcd\004\uffcd\005\156\006\uffcd\007" +
    "\177\010\201\012\167\014\164\015\165\016\157\017\173" +
    "\020\160\021\155\022\154\023\161\024\202\025\171\026" +
    "\172\027\163\030\203\031\uffcd\033\176\034\166\036\151" +
    "\037\uffcd\041\uffcd\042\uffcd\043\uffcd\044\uffcd\047\205\050" +
    "\206\051\162\056\200\071\174\072\175\073\207\074\153" +
    "\075\170\076\152\077\204\100\213\101\212\102\211\001" +
    "\002\000\130\002\uffcf\004\uffcf\005\156\006\uffcf\007\177" +
    "\010\201\012\167\014\164\015\165\016\157\017\173\020" +
    "\160\021\155\022\154\023\161\024\202\025\171\026\172" +
    "\027\163\030\203\031\uffcf\033\176\034\166\036\151\037" +
    "\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf\047\205\050\206" +
    "\051\162\056\200\071\174\072\175\073\207\074\153\075" +
    "\170\076\152\077\204\100\213\101\212\102\211\001\002" +
    "\000\132\002\uffda\004\uffda\005\uffda\006\uffda\007\uffda\010" +
    "\uffda\012\uffda\014\uffda\015\uffda\016\uffda\017\uffda\020\uffda" +
    "\021\uffda\022\uffda\023\uffda\024\uffda\025\uffda\026\uffda\027" +
    "\uffda\030\uffda\031\uffda\033\uffda\034\uffda\036\uffda\037\uffda" +
    "\040\223\041\uffda\042\uffda\043\uffda\044\uffda\047\uffda\050" +
    "\uffda\051\uffda\056\uffda\071\uffda\072\uffda\073\uffda\074\uffda" +
    "\075\uffda\076\uffda\077\uffda\100\uffda\101\uffda\102\uffda\001" +
    "\002\000\130\002\uffdb\004\uffdb\005\uffdb\006\uffdb\007\uffdb" +
    "\010\uffdb\012\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\020" +
    "\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb" +
    "\027\uffdb\030\uffdb\031\uffdb\033\uffdb\034\uffdb\036\uffdb\037" +
    "\uffdb\041\uffdb\042\uffdb\043\uffdb\044\uffdb\047\uffdb\050\uffdb" +
    "\051\uffdb\056\uffdb\071\uffdb\072\uffdb\073\uffdb\074\uffdb\075" +
    "\uffdb\076\uffdb\077\uffdb\100\uffdb\101\uffdb\102\uffdb\001\002" +
    "\000\032\013\142\021\145\022\143\033\137\034\133\035" +
    "\136\040\146\041\226\056\147\057\140\103\134\104\141" +
    "\001\002\000\112\005\156\007\177\010\201\012\167\014" +
    "\164\015\165\016\157\017\173\020\160\021\155\022\154" +
    "\023\161\024\202\025\171\026\172\027\163\030\203\033" +
    "\176\034\166\036\151\037\uffa8\041\uffa8\047\205\050\206" +
    "\051\162\056\200\071\174\072\175\073\207\074\153\075" +
    "\170\076\152\077\204\100\213\101\212\102\211\001\002" +
    "\000\006\037\227\041\230\001\002\000\130\002\uffaa\004" +
    "\uffaa\005\uffaa\006\uffaa\007\uffaa\010\uffaa\012\uffaa\014\uffaa" +
    "\015\uffaa\016\uffaa\017\uffaa\020\uffaa\021\uffaa\022\uffaa\023" +
    "\uffaa\024\uffaa\025\uffaa\026\uffaa\027\uffaa\030\uffaa\031\uffaa" +
    "\033\uffaa\034\uffaa\036\uffaa\037\uffaa\041\uffaa\042\uffaa\043" +
    "\uffaa\044\uffaa\047\uffaa\050\uffaa\051\uffaa\056\uffaa\071\uffaa" +
    "\072\uffaa\073\uffaa\074\uffaa\075\uffaa\076\uffaa\077\uffaa\100" +
    "\uffaa\101\uffaa\102\uffaa\001\002\000\030\013\142\021\145" +
    "\022\143\033\137\034\133\035\136\040\146\056\147\057" +
    "\140\103\134\104\141\001\002\000\130\002\uffab\004\uffab" +
    "\005\uffab\006\uffab\007\uffab\010\uffab\012\uffab\014\uffab\015" +
    "\uffab\016\uffab\017\uffab\020\uffab\021\uffab\022\uffab\023\uffab" +
    "\024\uffab\025\uffab\026\uffab\027\uffab\030\uffab\031\uffab\033" +
    "\uffab\034\uffab\036\uffab\037\uffab\041\uffab\042\uffab\043\uffab" +
    "\044\uffab\047\uffab\050\uffab\051\uffab\056\uffab\071\uffab\072" +
    "\uffab\073\uffab\074\uffab\075\uffab\076\uffab\077\uffab\100\uffab" +
    "\101\uffab\102\uffab\001\002\000\112\005\156\007\177\010" +
    "\201\012\167\014\164\015\165\016\157\017\173\020\160" +
    "\021\155\022\154\023\161\024\202\025\171\026\172\027" +
    "\163\030\203\033\176\034\166\036\151\037\uffa9\041\uffa9" +
    "\047\205\050\206\051\162\056\200\071\174\072\175\073" +
    "\207\074\153\075\170\076\152\077\204\100\213\101\212" +
    "\102\211\001\002\000\030\013\uffc3\021\uffc3\022\uffc3\033" +
    "\uffc3\034\uffc3\035\uffc3\040\uffc3\056\uffc3\057\uffc3\103\uffc3" +
    "\104\uffc3\001\002\000\110\005\156\007\177\010\201\012" +
    "\167\014\164\015\165\016\157\017\173\020\160\021\155" +
    "\022\154\023\161\024\202\025\171\026\172\027\163\030" +
    "\203\031\234\033\176\034\166\036\151\047\205\050\206" +
    "\051\162\056\200\071\174\072\175\073\207\074\153\075" +
    "\170\076\152\077\204\100\213\101\212\102\211\001\002" +
    "\000\030\013\142\021\145\022\143\033\137\034\133\035" +
    "\136\040\146\056\147\057\140\103\134\104\141\001\002" +
    "\000\130\002\uffcc\004\uffcc\005\156\006\uffcc\007\uffcc\010" +
    "\201\012\167\014\164\015\165\016\157\017\173\020\160" +
    "\021\155\022\154\023\161\024\202\025\171\026\172\027" +
    "\163\030\203\031\uffcc\033\176\034\166\036\151\037\uffcc" +
    "\041\uffcc\042\uffcc\043\uffcc\044\uffcc\047\205\050\206\051" +
    "\uffcc\056\200\071\uffcc\072\uffcc\073\uffcc\074\uffcc\075\uffcc" +
    "\076\uffcc\077\uffcc\100\uffcc\101\uffcc\102\uffcc\001\002\000" +
    "\132\002\uffd8\004\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8" +
    "\012\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\021" +
    "\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8" +
    "\030\uffd8\031\uffd8\033\uffd8\034\uffd8\036\uffd8\037\uffd8\040" +
    "\223\041\uffd8\042\uffd8\043\uffd8\044\uffd8\047\uffd8\050\uffd8" +
    "\051\uffd8\056\uffd8\071\uffd8\072\uffd8\073\uffd8\074\uffd8\075" +
    "\uffd8\076\uffd8\077\uffd8\100\uffd8\101\uffd8\102\uffd8\001\002" +
    "\000\130\002\uffd9\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010" +
    "\uffd9\012\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9" +
    "\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027" +
    "\uffd9\030\uffd9\031\uffd9\033\uffd9\034\uffd9\036\uffd9\037\uffd9" +
    "\041\uffd9\042\uffd9\043\uffd9\044\uffd9\047\uffd9\050\uffd9\051" +
    "\uffd9\056\uffd9\071\uffd9\072\uffd9\073\uffd9\074\uffd9\075\uffd9" +
    "\076\uffd9\077\uffd9\100\uffd9\101\uffd9\102\uffd9\001\002\000" +
    "\110\005\156\006\241\007\177\010\201\012\167\014\164" +
    "\015\165\016\157\017\173\020\160\021\155\022\154\023" +
    "\161\024\202\025\171\026\172\027\163\030\203\033\176" +
    "\034\166\036\151\047\205\050\206\051\162\056\200\071" +
    "\174\072\175\073\207\074\153\075\170\076\152\077\204" +
    "\100\213\101\212\102\211\001\002\000\130\002\uffdc\004" +
    "\uffdc\005\uffdc\006\uffdc\007\uffdc\010\uffdc\012\uffdc\014\uffdc" +
    "\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023" +
    "\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc" +
    "\033\uffdc\034\uffdc\036\uffdc\037\uffdc\041\uffdc\042\uffdc\043" +
    "\uffdc\044\uffdc\047\uffdc\050\uffdc\051\uffdc\056\uffdc\071\uffdc" +
    "\072\uffdc\073\uffdc\074\uffdc\075\uffdc\076\uffdc\077\uffdc\100" +
    "\uffdc\101\uffdc\102\uffdc\001\002\000\110\005\156\007\177" +
    "\010\201\012\167\014\164\015\165\016\157\017\173\020" +
    "\160\021\155\022\154\023\161\024\202\025\171\026\172" +
    "\027\163\030\203\033\176\034\166\036\151\041\243\047" +
    "\205\050\206\051\162\056\200\071\174\072\175\073\207" +
    "\074\153\075\170\076\152\077\204\100\213\101\212\102" +
    "\211\001\002\000\130\002\uffc9\004\uffc9\005\uffc9\006\uffc9" +
    "\007\uffc9\010\uffc9\012\uffc9\014\uffc9\015\uffc9\016\uffc9\017" +
    "\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9" +
    "\026\uffc9\027\uffc9\030\uffc9\031\uffc9\033\uffc9\034\uffc9\036" +
    "\uffc9\037\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9\047\uffc9" +
    "\050\uffc9\051\uffc9\056\uffc9\071\uffc9\072\uffc9\073\uffc9\074" +
    "\uffc9\075\uffc9\076\uffc9\077\uffc9\100\uffc9\101\uffc9\102\uffc9" +
    "\001\002\000\130\002\uffd2\004\uffd2\005\uffd2\006\uffd2\007" +
    "\uffd2\010\uffd2\012\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2" +
    "\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026" +
    "\uffd2\027\uffd2\030\uffd2\031\uffd2\033\uffd2\034\uffd2\036\uffd2" +
    "\037\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2\047\uffd2\050" +
    "\uffd2\051\uffd2\056\uffd2\071\uffd2\072\uffd2\073\uffd2\074\uffd2" +
    "\075\uffd2\076\uffd2\077\uffd2\100\uffd2\101\uffd2\102\uffd2\001" +
    "\002\000\130\002\uffd3\004\uffd3\005\uffd3\006\uffd3\007\uffd3" +
    "\010\uffd3\012\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3\020" +
    "\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3" +
    "\027\uffd3\030\uffd3\031\uffd3\033\uffd3\034\uffd3\036\uffd3\037" +
    "\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3\047\uffd3\050\uffd3" +
    "\051\uffd3\056\uffd3\071\uffd3\072\uffd3\073\uffd3\074\uffd3\075" +
    "\uffd3\076\uffd3\077\uffd3\100\uffd3\101\uffd3\102\uffd3\001\002" +
    "\000\130\002\uffcb\004\uffcb\005\156\006\uffcb\007\uffcb\010" +
    "\201\012\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb\020\160" +
    "\021\155\022\154\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027" +
    "\uffcb\030\uffcb\031\uffcb\033\uffcb\034\uffcb\036\uffcb\037\uffcb" +
    "\041\uffcb\042\uffcb\043\uffcb\044\uffcb\047\uffcb\050\uffcb\051" +
    "\uffcb\056\uffcb\071\uffcb\072\uffcb\073\uffcb\074\uffcb\075\uffcb" +
    "\076\uffcb\077\uffcb\100\uffcb\101\uffcb\102\uffcb\001\002\000" +
    "\130\002\uffca\004\uffca\005\156\006\uffca\007\uffca\010\201" +
    "\012\uffca\014\uffca\015\uffca\016\uffca\017\uffca\020\160\021" +
    "\155\022\154\023\uffca\024\uffca\025\uffca\026\uffca\027\uffca" +
    "\030\uffca\031\uffca\033\uffca\034\uffca\036\uffca\037\uffca\041" +
    "\uffca\042\uffca\043\uffca\044\uffca\047\uffca\050\uffca\051\uffca" +
    "\056\uffca\071\uffca\072\uffca\073\uffca\074\uffca\075\uffca\076" +
    "\uffca\077\uffca\100\uffca\101\uffca\102\uffca\001\002\000\130" +
    "\002\uffd4\004\uffd4\005\156\006\uffd4\007\uffd4\010\201\012" +
    "\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4\020\160\021\155" +
    "\022\154\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030" +
    "\uffd4\031\uffd4\033\uffd4\034\uffd4\036\151\037\uffd4\041\uffd4" +
    "\042\uffd4\043\uffd4\044\uffd4\047\205\050\uffd4\051\uffd4\056" +
    "\200\071\uffd4\072\uffd4\073\uffd4\074\uffd4\075\uffd4\076\uffd4" +
    "\077\uffd4\100\uffd4\101\uffd4\102\uffd4\001\002\000\130\002" +
    "\uffd1\004\uffd1\005\156\006\uffd1\007\uffd1\010\201\012\uffd1" +
    "\014\uffd1\015\uffd1\016\uffd1\017\uffd1\020\160\021\155\022" +
    "\154\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1" +
    "\031\uffd1\033\uffd1\034\uffd1\036\uffd1\037\uffd1\041\uffd1\042" +
    "\uffd1\043\uffd1\044\uffd1\047\uffd1\050\uffd1\051\uffd1\056\uffd1" +
    "\071\uffd1\072\uffd1\073\uffd1\074\uffd1\075\uffd1\076\uffd1\077" +
    "\uffd1\100\uffd1\101\uffd1\102\uffd1\001\002\000\130\002\uffd5" +
    "\004\uffd5\005\156\006\uffd5\007\uffd5\010\201\012\uffd5\014" +
    "\uffd5\015\uffd5\016\uffd5\017\uffd5\020\160\021\155\022\154" +
    "\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031" +
    "\uffd5\033\uffd5\034\uffd5\036\151\037\uffd5\041\uffd5\042\uffd5" +
    "\043\uffd5\044\uffd5\047\205\050\uffd5\051\uffd5\056\200\071" +
    "\uffd5\072\uffd5\073\uffd5\074\uffd5\075\uffd5\076\uffd5\077\uffd5" +
    "\100\uffd5\101\uffd5\102\uffd5\001\002\000\006\037\305\041" +
    "\306\001\002\000\010\037\uffa6\040\223\041\uffa6\001\002" +
    "\000\110\005\261\007\177\010\265\012\167\014\164\015" +
    "\165\016\157\017\173\020\262\021\260\022\257\023\161" +
    "\024\202\025\171\026\172\027\163\030\203\033\176\034" +
    "\166\036\151\041\264\047\205\050\206\051\263\056\200" +
    "\071\174\072\175\073\207\074\153\075\170\076\152\077" +
    "\204\100\213\101\212\102\211\001\002\000\030\013\124" +
    "\021\130\022\125\033\121\034\115\035\120\040\256\056" +
    "\132\057\122\103\116\104\123\001\002\000\122\002\uffee" +
    "\004\uffee\005\uffee\007\uffee\010\uffee\012\uffee\014\uffee\015" +
    "\uffee\016\uffee\017\uffee\020\uffee\021\uffee\022\uffee\023\uffee" +
    "\024\uffee\025\uffee\026\uffee\027\uffee\030\uffee\033\uffee\034" +
    "\uffee\036\uffee\041\uffee\042\uffee\043\uffee\044\uffee\047\uffee" +
    "\050\uffee\051\uffee\056\uffee\071\uffee\072\uffee\073\uffee\074" +
    "\uffee\075\uffee\076\uffee\077\uffee\100\uffee\101\uffee\102\uffee" +
    "\001\002\000\122\002\uffed\004\uffed\005\uffed\007\uffed\010" +
    "\uffed\012\uffed\014\uffed\015\uffed\016\uffed\017\uffed\020\uffed" +
    "\021\uffed\022\uffed\023\uffed\024\uffed\025\uffed\026\uffed\027" +
    "\uffed\030\uffed\033\uffed\034\uffed\036\uffed\041\uffed\042\uffed" +
    "\043\uffed\044\uffed\047\uffed\050\uffed\051\uffed\056\uffed\071" +
    "\uffed\072\uffed\073\uffed\074\uffed\075\uffed\076\uffed\077\uffed" +
    "\100\uffed\101\uffed\102\uffed\001\002\000\030\013\142\021" +
    "\145\022\143\033\137\034\133\035\136\040\146\056\147" +
    "\057\140\103\134\104\141\001\002\000\004\104\301\001" +
    "\002\000\030\013\142\021\145\022\143\033\137\034\133" +
    "\035\136\040\146\056\147\057\140\103\134\104\141\001" +
    "\002\000\122\002\uffe0\004\uffe0\005\uffe0\007\uffe0\010\uffe0" +
    "\012\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021" +
    "\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0" +
    "\030\uffe0\033\uffe0\034\uffe0\036\uffe0\041\uffe0\042\uffe0\043" +
    "\uffe0\044\uffe0\047\uffe0\050\uffe0\051\uffe0\056\uffe0\071\uffe0" +
    "\072\uffe0\073\uffe0\074\uffe0\075\uffe0\076\uffe0\077\uffe0\100" +
    "\uffe0\101\uffe0\102\uffe0\001\002\000\004\104\274\001\002" +
    "\000\030\013\142\021\145\022\143\033\137\034\133\035" +
    "\136\040\146\056\147\057\140\103\134\104\141\001\002" +
    "\000\030\013\142\021\145\022\143\033\137\034\133\035" +
    "\136\040\146\056\147\057\140\103\134\104\141\001\002" +
    "\000\030\013\142\021\145\022\143\033\137\034\133\035" +
    "\136\040\146\056\147\057\140\103\134\104\141\001\002" +
    "\000\122\002\uffe5\004\uffe5\005\156\007\177\010\201\012" +
    "\167\014\164\015\165\016\157\017\173\020\160\021\155" +
    "\022\154\023\161\024\202\025\171\026\172\027\163\030" +
    "\203\033\176\034\166\036\151\041\uffe5\042\uffe5\043\uffe5" +
    "\044\uffe5\047\205\050\206\051\162\056\200\071\174\072" +
    "\175\073\207\074\153\075\170\076\152\077\204\100\213" +
    "\101\212\102\211\001\002\000\122\002\uffe4\004\uffe4\005" +
    "\156\007\177\010\201\012\167\014\164\015\165\016\157" +
    "\017\173\020\160\021\155\022\154\023\161\024\202\025" +
    "\171\026\172\027\163\030\203\033\176\034\166\036\151" +
    "\041\uffe4\042\uffe4\043\uffe4\044\uffe4\047\205\050\206\051" +
    "\162\056\200\071\174\072\175\073\207\074\153\075\170" +
    "\076\152\077\204\100\213\101\212\102\211\001\002\000" +
    "\122\002\uffe6\004\uffe6\005\156\007\177\010\201\012\167" +
    "\014\164\015\165\016\157\017\173\020\160\021\155\022" +
    "\154\023\161\024\202\025\171\026\172\027\163\030\203" +
    "\033\176\034\166\036\151\041\uffe6\042\uffe6\043\uffe6\044" +
    "\uffe6\047\205\050\206\051\162\056\200\071\174\072\175" +
    "\073\207\074\153\075\170\076\152\077\204\100\213\101" +
    "\212\102\211\001\002\000\124\002\ufff1\004\ufff1\005\ufff1" +
    "\007\ufff1\010\ufff1\012\ufff1\014\ufff1\015\ufff1\016\ufff1\017" +
    "\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1\025\ufff1" +
    "\026\ufff1\027\ufff1\030\ufff1\033\ufff1\034\ufff1\036\ufff1\040" +
    "\223\041\ufff1\042\ufff1\043\ufff1\044\ufff1\047\ufff1\050\ufff1" +
    "\051\ufff1\056\ufff1\071\ufff1\072\ufff1\073\ufff1\074\ufff1\075" +
    "\ufff1\076\ufff1\077\ufff1\100\ufff1\101\ufff1\102\ufff1\001\002" +
    "\000\122\002\ufff2\004\ufff2\005\ufff2\007\ufff2\010\ufff2\012" +
    "\ufff2\014\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2\021\ufff2" +
    "\022\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2\027\ufff2\030" +
    "\ufff2\033\ufff2\034\ufff2\036\ufff2\041\ufff2\042\ufff2\043\ufff2" +
    "\044\ufff2\047\ufff2\050\ufff2\051\ufff2\056\ufff2\071\ufff2\072" +
    "\ufff2\073\ufff2\074\ufff2\075\ufff2\076\ufff2\077\ufff2\100\ufff2" +
    "\101\ufff2\102\ufff2\001\002\000\110\005\156\007\177\010" +
    "\201\012\167\014\164\015\165\016\157\017\173\020\160" +
    "\021\155\022\154\023\161\024\202\025\171\026\172\027" +
    "\163\030\203\031\277\033\176\034\166\036\151\047\205" +
    "\050\206\051\162\056\200\071\174\072\175\073\207\074" +
    "\153\075\170\076\152\077\204\100\213\101\212\102\211" +
    "\001\002\000\030\013\142\021\145\022\143\033\137\034" +
    "\133\035\136\040\146\056\147\057\140\103\134\104\141" +
    "\001\002\000\122\002\uffe3\004\uffe3\005\156\007\uffe3\010" +
    "\201\012\167\014\164\015\165\016\157\017\173\020\160" +
    "\021\155\022\154\023\161\024\202\025\171\026\172\027" +
    "\163\030\203\033\176\034\166\036\151\041\uffe3\042\uffe3" +
    "\043\uffe3\044\uffe3\047\205\050\206\051\uffe3\056\200\071" +
    "\uffe3\072\uffe3\073\uffe3\074\uffe3\075\uffe3\076\uffe3\077\uffe3" +
    "\100\uffe3\101\uffe3\102\uffe3\001\002\000\124\002\uffef\004" +
    "\uffef\005\uffef\007\uffef\010\uffef\012\uffef\014\uffef\015\uffef" +
    "\016\uffef\017\uffef\020\uffef\021\uffef\022\uffef\023\uffef\024" +
    "\uffef\025\uffef\026\uffef\027\uffef\030\uffef\033\uffef\034\uffef" +
    "\036\uffef\040\223\041\uffef\042\uffef\043\uffef\044\uffef\047" +
    "\uffef\050\uffef\051\uffef\056\uffef\071\uffef\072\uffef\073\uffef" +
    "\074\uffef\075\uffef\076\uffef\077\uffef\100\uffef\101\uffef\102" +
    "\uffef\001\002\000\122\002\ufff0\004\ufff0\005\ufff0\007\ufff0" +
    "\010\ufff0\012\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0\020" +
    "\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0\026\ufff0" +
    "\027\ufff0\030\ufff0\033\ufff0\034\ufff0\036\ufff0\041\ufff0\042" +
    "\ufff0\043\ufff0\044\ufff0\047\ufff0\050\ufff0\051\ufff0\056\ufff0" +
    "\071\ufff0\072\ufff0\073\ufff0\074\ufff0\075\ufff0\076\ufff0\077" +
    "\ufff0\100\ufff0\101\ufff0\102\ufff0\001\002\000\110\005\156" +
    "\006\304\007\177\010\201\012\167\014\164\015\165\016" +
    "\157\017\173\020\160\021\155\022\154\023\161\024\202" +
    "\025\171\026\172\027\163\030\203\033\176\034\166\036" +
    "\151\047\205\050\206\051\162\056\200\071\174\072\175" +
    "\073\207\074\153\075\170\076\152\077\204\100\213\101" +
    "\212\102\211\001\002\000\122\002\ufff3\004\ufff3\005\ufff3" +
    "\007\ufff3\010\ufff3\012\ufff3\014\ufff3\015\ufff3\016\ufff3\017" +
    "\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3" +
    "\026\ufff3\027\ufff3\030\ufff3\033\ufff3\034\ufff3\036\ufff3\041" +
    "\ufff3\042\ufff3\043\ufff3\044\ufff3\047\ufff3\050\ufff3\051\ufff3" +
    "\056\ufff3\071\ufff3\072\ufff3\073\ufff3\074\ufff3\075\ufff3\076" +
    "\ufff3\077\ufff3\100\ufff3\101\ufff3\102\ufff3\001\002\000\004" +
    "\104\310\001\002\000\030\013\142\021\145\022\143\033" +
    "\137\034\133\035\136\040\146\056\147\057\140\103\134" +
    "\104\141\001\002\000\120\002\ufff7\004\ufff7\005\156\007" +
    "\177\010\201\012\167\014\164\015\165\016\157\017\173" +
    "\020\160\021\155\022\154\023\161\024\202\025\171\026" +
    "\172\027\163\030\203\033\176\034\166\036\151\042\ufff7" +
    "\043\ufff7\044\ufff7\047\205\050\206\051\162\056\200\071" +
    "\174\072\175\073\207\074\153\075\170\076\152\077\204" +
    "\100\213\101\212\102\211\001\002\000\006\037\uffa7\041" +
    "\uffa7\001\002\000\122\002\uffe9\004\uffe9\005\uffe9\007\uffe9" +
    "\010\uffe9\012\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\020" +
    "\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9" +
    "\027\uffe9\030\uffe9\033\uffe9\034\uffe9\036\uffe9\041\uffe9\042" +
    "\uffe9\043\uffe9\044\uffe9\047\uffe9\050\uffe9\051\uffe9\056\uffe9" +
    "\071\uffe9\072\uffe9\073\uffe9\074\uffe9\075\uffe9\076\uffe9\077" +
    "\uffe9\100\uffe9\101\uffe9\102\uffe9\001\002\000\122\002\uffea" +
    "\004\uffea\005\uffea\007\uffea\010\uffea\012\uffea\014\uffea\015" +
    "\uffea\016\uffea\017\uffea\020\uffea\021\uffea\022\uffea\023\uffea" +
    "\024\uffea\025\uffea\026\uffea\027\uffea\030\uffea\033\uffea\034" +
    "\uffea\036\uffea\041\uffea\042\uffea\043\uffea\044\uffea\047\uffea" +
    "\050\uffea\051\uffea\056\uffea\071\uffea\072\uffea\073\uffea\074" +
    "\uffea\075\uffea\076\uffea\077\uffea\100\uffea\101\uffea\102\uffea" +
    "\001\002\000\122\002\uffe2\004\uffe2\005\156\007\uffe2\010" +
    "\201\012\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020\160" +
    "\021\155\022\154\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027" +
    "\uffe2\030\uffe2\033\uffe2\034\uffe2\036\uffe2\041\uffe2\042\uffe2" +
    "\043\uffe2\044\uffe2\047\uffe2\050\uffe2\051\uffe2\056\uffe2\071" +
    "\uffe2\072\uffe2\073\uffe2\074\uffe2\075\uffe2\076\uffe2\077\uffe2" +
    "\100\uffe2\101\uffe2\102\uffe2\001\002\000\122\002\uffe1\004" +
    "\uffe1\005\156\007\uffe1\010\201\012\uffe1\014\uffe1\015\uffe1" +
    "\016\uffe1\017\uffe1\020\160\021\155\022\154\023\uffe1\024" +
    "\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\033\uffe1\034\uffe1" +
    "\036\uffe1\041\uffe1\042\uffe1\043\uffe1\044\uffe1\047\uffe1\050" +
    "\uffe1\051\uffe1\056\uffe1\071\uffe1\072\uffe1\073\uffe1\074\uffe1" +
    "\075\uffe1\076\uffe1\077\uffe1\100\uffe1\101\uffe1\102\uffe1\001" +
    "\002\000\122\002\uffeb\004\uffeb\005\156\007\uffeb\010\201" +
    "\012\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020\160\021" +
    "\155\022\154\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb" +
    "\030\uffeb\033\uffeb\034\uffeb\036\151\041\uffeb\042\uffeb\043" +
    "\uffeb\044\uffeb\047\205\050\uffeb\051\uffeb\056\200\071\uffeb" +
    "\072\uffeb\073\uffeb\074\uffeb\075\uffeb\076\uffeb\077\uffeb\100" +
    "\uffeb\101\uffeb\102\uffeb\001\002\000\122\002\uffe8\004\uffe8" +
    "\005\156\007\uffe8\010\201\012\uffe8\014\uffe8\015\uffe8\016" +
    "\uffe8\017\uffe8\020\160\021\155\022\154\023\uffe8\024\uffe8" +
    "\025\uffe8\026\uffe8\027\uffe8\030\uffe8\033\uffe8\034\uffe8\036" +
    "\uffe8\041\uffe8\042\uffe8\043\uffe8\044\uffe8\047\uffe8\050\uffe8" +
    "\051\uffe8\056\uffe8\071\uffe8\072\uffe8\073\uffe8\074\uffe8\075" +
    "\uffe8\076\uffe8\077\uffe8\100\uffe8\101\uffe8\102\uffe8\001\002" +
    "\000\014\002\ufff6\004\ufff6\042\ufff6\043\ufff6\044\ufff6\001" +
    "\002\000\122\002\uffec\004\uffec\005\156\007\uffec\010\201" +
    "\012\uffec\014\uffec\015\uffec\016\uffec\017\uffec\020\160\021" +
    "\155\022\154\023\uffec\024\uffec\025\uffec\026\uffec\027\uffec" +
    "\030\uffec\033\uffec\034\uffec\036\151\041\uffec\042\uffec\043" +
    "\uffec\044\uffec\047\205\050\uffec\051\uffec\056\200\071\uffec" +
    "\072\uffec\073\uffec\074\uffec\075\uffec\076\uffec\077\uffec\100" +
    "\uffec\101\uffec\102\uffec\001\002\000\004\045\322\001\002" +
    "\000\040\044\036\052\031\053\013\054\025\055\030\060" +
    "\016\061\015\062\023\063\022\064\033\065\020\066\024" +
    "\067\034\070\012\104\021\001\002\000\042\044\036\046" +
    "\324\052\031\053\013\054\025\055\030\060\016\061\015" +
    "\062\023\063\022\064\033\065\020\066\024\067\034\070" +
    "\012\104\021\001\002\000\004\032\325\001\002\000\014" +
    "\002\ufffa\004\ufffa\042\ufffa\043\ufffa\044\ufffa\001\002\000" +
    "\012\005\051\035\047\040\050\104\333\001\002\000\004" +
    "\032\332\001\002\000\006\005\041\032\331\001\002\000" +
    "\014\002\ufffd\004\ufffd\042\ufffd\043\ufffd\044\ufffd\001\002" +
    "\000\014\002\ufffe\004\ufffe\042\ufffe\043\ufffe\044\ufffe\001" +
    "\002\000\010\005\uffa0\032\uffa0\040\334\001\002\000\042" +
    "\041\uffa4\044\uffa4\052\uffa4\053\uffa4\054\uffa4\055\uffa4\060" +
    "\uffa4\061\uffa4\062\uffa4\063\uffa4\064\uffa4\065\uffa4\066\uffa4" +
    "\067\uffa4\070\uffa4\104\uffa4\001\002\000\042\041\uff96\044" +
    "\036\052\031\053\013\054\025\055\030\060\016\061\015" +
    "\062\023\063\022\064\033\065\020\066\024\067\034\070" +
    "\012\104\021\001\002\000\004\041\337\001\002\000\004" +
    "\032\uffa3\001\002\000\014\002\001\004\001\042\001\043" +
    "\001\044\001\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\337\000\006\003\003\004\010\001\001\000\004\004" +
    "\337\001\001\000\014\006\327\010\326\022\325\023\026" +
    "\024\031\001\001\000\002\001\001\000\004\002\113\001" +
    "\001\000\012\006\025\022\016\023\026\024\031\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\023\044" +
    "\024\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\023\034\024\031\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\026\060\001" +
    "\001\000\014\005\063\011\062\022\061\023\026\024\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\005\066\011\062\022\061" +
    "\023\026\024\031\001\001\000\002\001\001\000\014\005" +
    "\100\011\062\022\061\023\026\024\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\027" +
    "\074\001\001\000\014\005\075\011\062\022\061\023\026" +
    "\024\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\006\102\007\103" +
    "\022\016\023\026\024\031\001\001\000\002\001\001\000" +
    "\012\006\105\022\016\023\026\024\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\013\126" +
    "\021\125\001\001\000\002\001\001\000\006\012\317\013" +
    "\143\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\315\013\143\001\001\000\006\012\314\013\143\001" +
    "\001\000\006\012\313\013\143\001\001\000\002\001\001" +
    "\000\006\012\312\013\143\001\001\000\006\012\311\013" +
    "\143\001\001\000\010\015\265\016\267\017\266\001\001" +
    "\000\002\001\001\000\006\012\310\013\143\001\001\000" +
    "\010\013\126\020\252\021\254\001\001\000\006\012\134" +
    "\013\143\001\001\000\006\012\251\013\143\001\001\000" +
    "\002\001\001\000\010\015\207\016\214\017\213\001\001" +
    "\000\006\012\250\013\143\001\001\000\006\012\247\013" +
    "\143\001\001\000\006\012\246\013\143\001\001\000\002" +
    "\001\001\000\006\012\245\013\143\001\001\000\006\012" +
    "\244\013\143\001\001\000\002\001\001\000\006\012\243" +
    "\013\143\001\001\000\006\012\241\013\143\001\001\000" +
    "\006\012\147\013\143\001\001\000\010\015\207\016\214" +
    "\017\213\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\237\013\143\001\001\000\002\001\001\000\004\013" +
    "\236\001\001\000\002\001\001\000\006\012\232\013\143" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\221\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\012" +
    "\217\013\143\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\216\013\143\001\001\000" +
    "\006\012\215\013\143\001\001\000\010\015\207\016\214" +
    "\017\213\001\001\000\010\015\207\016\214\017\213\001" +
    "\001\000\010\015\207\016\214\017\213\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\012\223\013\143\014" +
    "\224\001\001\000\010\015\207\016\214\017\213\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\230\013" +
    "\143\001\001\000\002\001\001\000\010\015\207\016\214" +
    "\017\213\001\001\000\002\001\001\000\010\015\207\016" +
    "\214\017\213\001\001\000\006\012\234\013\143\001\001" +
    "\000\010\015\207\016\214\017\213\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\015\207\016\214\017\213" +
    "\001\001\000\002\001\001\000\010\015\207\016\214\017" +
    "\213\001\001\000\002\001\001\000\010\015\207\016\214" +
    "\017\213\001\001\000\010\015\207\016\214\017\213\001" +
    "\001\000\010\015\207\016\214\017\213\001\001\000\010" +
    "\015\207\016\214\017\213\001\001\000\010\015\207\016" +
    "\214\017\213\001\001\000\010\015\207\016\214\017\213" +
    "\001\001\000\010\015\207\016\214\017\213\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\015\265\016\267" +
    "\017\266\001\001\000\006\013\126\021\254\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\012\302\013\143" +
    "\001\001\000\004\013\301\001\001\000\006\012\275\013" +
    "\143\001\001\000\002\001\001\000\004\013\274\001\001" +
    "\000\006\012\272\013\143\001\001\000\006\012\271\013" +
    "\143\001\001\000\006\012\270\013\143\001\001\000\010" +
    "\015\207\016\214\017\213\001\001\000\010\015\207\016" +
    "\214\017\213\001\001\000\010\015\207\016\214\017\213" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\015" +
    "\207\016\214\017\213\001\001\000\006\012\277\013\143" +
    "\001\001\000\010\015\207\016\214\017\213\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\015\207\016\214" +
    "\017\213\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\012\306\013\143\001\001\000\010\015\207\016\214" +
    "\017\213\001\001\000\002\001\001\000\010\015\207\016" +
    "\214\017\213\001\001\000\010\015\207\016\214\017\213" +
    "\001\001\000\010\015\207\016\214\017\213\001\001\000" +
    "\010\015\207\016\214\017\213\001\001\000\010\015\207" +
    "\016\214\017\213\001\001\000\010\015\207\016\214\017" +
    "\213\001\001\000\002\001\001\000\010\015\207\016\214" +
    "\017\213\001\001\000\002\001\001\000\014\006\102\007" +
    "\322\022\016\023\026\024\031\001\001\000\012\006\105" +
    "\022\016\023\026\024\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\334\001\001\000\014\005\335\011\062" +
    "\022\061\023\026\024\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



   
	public CodeGenerator cg = new CodeGenerator();

    public void report_error(String message, Object info) {
   
       
        StringBuilder m = new StringBuilder("Error");
   
        if (info instanceof java_cup.runtime.Symbol) {
     
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {                
                       m.append(" in line "+(s.left+1));   
     
                if (s.right >= 0)                    
                       m.append(", column "+(s.right+1));
            }
        }
   
        m.append(" : "+message);
   
        System.err.println(m);
    }
   
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // type ::= type STAR 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=t + "*"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // type ::= type LBRACKET NUMBER RBRACKET 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=t + "[" + n + "]"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // type ::= type LBRACKET RBRACKET 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT=t + "[]"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // type ::= pre_type 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // pre_type ::= CONST pre_type 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT="const " + p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_type",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // pre_type ::= UN_SIGNED pre_type 
            {
              String RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= u + " " + p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_type",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // pre_type ::= STRUCT ID 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= "struct " + i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_type",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // pre_type ::= ID 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_type",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // pre_type ::= c_type 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_type",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // c_type ::= LDOUBLE 
            {
              String RESULT =null;
		 RESULT= "long double"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // c_type ::= DOUBLE 
            {
              String RESULT =null;
		 RESULT= "double"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // c_type ::= FLOAT 
            {
              String RESULT =null;
		 RESULT= "float"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // c_type ::= LLINT 
            {
              String RESULT =null;
		 RESULT= "long long int"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // c_type ::= LLONG 
            {
              String RESULT =null;
		 RESULT= "long long"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // c_type ::= LONG 
            {
              String RESULT =null;
		 RESULT="long"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // c_type ::= SHORT 
            {
              String RESULT =null;
		 RESULT="short"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // c_type ::= LINT 
            {
              String RESULT =null;
		 RESULT= "long int"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // c_type ::= SINT 
            {
              String RESULT =null;
		 RESULT= "short int"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // c_type ::= INT 
            {
              String RESULT =null;
		 RESULT= "int"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // c_type ::= CHAR 
            {
              String RESULT =null;
		 RESULT= "char"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ident_funcpointer ::= type LPAREN STAR RPAREN LPAREN NT$2 params RPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String p4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ps2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ps2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ps2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			Function funcp = parser.cg.paramsowner;
			funcp.pointer = true;
			parser.cg.paramsowner = parser.cg.params_owners.pop();
			RESULT = funcp;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident_funcpointer",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // NT$2 ::= 
            {
              Object RESULT =null;
		int p4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String p4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

			Function funcp = new Function();
			funcp.pointer = true;
			funcp.setReturn_type(p4);
			parser.cg.params_owners.push(parser.cg.paramsowner);
			parser.cg.paramsowner = funcp;  
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // params ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // params ::= ident_funcpointer COMMA params 
            {
              Object RESULT =null;
		int p5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object p5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ps2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ps2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ps2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			parser.cg.paramsowner.pushParam(p5);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // params ::= ident_funcpointer 
            {
              Object RESULT =null;
		int p4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			parser.cg.paramsowner.pushParam(p4);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // params ::= type COMMA DOTS 
            {
              Object RESULT =null;
		int p3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
			parser.cg.paramsowner.pushParam(p3);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // params ::= type COMMA params 
            {
              Object RESULT =null;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int psright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ps = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			parser.cg.paramsowner.pushParam(p2);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // params ::= type 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			parser.cg.paramsowner.pushParam(p);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // defin ::= type LPAREN STAR ID RPAREN LPAREN NT$1 params RPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int i7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int i7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String i7 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int i8left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i8right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i8 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ps = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			Function funcp = parser.cg.paramsowner;
			funcp.pointer = true;
			parser.cg.var.setFuncpointer(funcp);
			parser.cg.paramsowner = parser.cg.params_owners.pop();
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("defin",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // NT$1 ::= 
            {
              Object RESULT =null;
		int i7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i7 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int i8left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i8right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i8 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 
			parser.cg.var.setType(i7+"*");
			parser.cg.var.setID(i8);
			Function funcp = new Function();
			funcp.setID(i8);
			funcp.setReturn_type(i7+"*");
			parser.cg.params_owners.push(parser.cg.paramsowner);
			parser.cg.paramsowner = funcp;  
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // defin ::= defin LBRACKET NUMBER RBRACKET 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			parser.cg.var.addArray(n);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("defin",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // defin ::= defin LBRACKET RBRACKET 
            {
              Object RESULT =null;
		
			parser.cg.var.addArray(0);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("defin",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // defin ::= type ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			parser.cg.var.setType(i);
			parser.cg.var.setID(i2);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("defin",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // st_body ::= st_body defin SEMI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
			parser.cg.struct.addMember(parser.cg.var);
		        parser.cg.var = new Variable();  
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("st_body",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // st_body ::= defin SEMI 
            {
              Object RESULT =null;
		
			parser.cg.struct.addMember(parser.cg.var);
		        parser.cg.var = new Variable(); 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("st_body",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // func ::= type ID LPAREN NT$0 params RPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
			RESULT = e + " " + e2 + "(" + p + ");"; 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // NT$0 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 
			parser.cg.func.setReturn_type(e);
			parser.cg.func.setID(e2);
			parser.cg.paramsowner = parser.cg.func;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // macro_params ::= 
            {
              Object RESULT =null;
		RESULT = ""; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("macro_params",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // macro_params ::= ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("macro_params",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // macro_params ::= macro_params COMMA ID 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = m+","+i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("macro_params",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // args ::= exp 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // args ::= args COMMA exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a+","+e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // func_call ::= ID LPAREN RPAREN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = i+"()"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_call",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // func_call ::= ID LPAREN args RPAREN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = i+"("+a+")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_call",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // LogicalS ::= OR 
            {
              Object RESULT =null;
		 RESULT = "||"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalS",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // LogicalS ::= AND 
            {
              Object RESULT =null;
		 RESULT = "&&"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalS",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // LogicalS ::= NOTEQUAL 
            {
              Object RESULT =null;
		 RESULT = "!="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalS",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // LogicalS ::= EQUAL 
            {
              Object RESULT =null;
		 RESULT = "=="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalS",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // LogicalS ::= GE 
            {
              Object RESULT =null;
		 RESULT = ">="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalS",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // LogicalS ::= GREATER 
            {
              Object RESULT =null;
		 RESULT = ">"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalS",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // LogicalS ::= LE 
            {
              Object RESULT =null;
		 RESULT = "<="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalS",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // LogicalS ::= LESS 
            {
              Object RESULT =null;
		 RESULT = "<"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalS",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // B2 ::= AMPERSAND 
            {
              Object RESULT =null;
		 RESULT = "&"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("B2",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // B2 ::= BAR 
            {
              Object RESULT =null;
		 RESULT = "|"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("B2",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // B2 ::= HAT 
            {
              Object RESULT =null;
		 RESULT = "^"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("B2",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // B2 ::= GG 
            {
              Object RESULT =null;
		 RESULT = ">>"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("B2",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // B2 ::= LL 
            {
              Object RESULT =null;
		 RESULT = "<<"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("B2",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Ar2 ::= BAREQ 
            {
              Object RESULT =null;
		 RESULT = "|="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ar2",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Ar2 ::= HATEQ 
            {
              Object RESULT =null;
		 RESULT = "^="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ar2",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Ar2 ::= AMPERSANDEQ 
            {
              Object RESULT =null;
		 RESULT = "&="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ar2",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Ar2 ::= GGEQ 
            {
              Object RESULT =null;
		 RESULT = ">>="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ar2",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Ar2 ::= LLEQ 
            {
              Object RESULT =null;
		 RESULT = "<<="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ar2",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Ar2 ::= PERCENTEQ 
            {
              Object RESULT =null;
		 RESULT = "%="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ar2",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Ar2 ::= DIVIDEQ 
            {
              Object RESULT =null;
		 RESULT = "/="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ar2",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Ar2 ::= STAREQ 
            {
              Object RESULT =null;
		 RESULT = "*="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ar2",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Ar2 ::= MINUSEQ 
            {
              Object RESULT =null;
		 RESULT = "-="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ar2",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Ar2 ::= PLUSEQ 
            {
              Object RESULT =null;
		 RESULT = "+="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ar2",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Ar2 ::= AMPERSAND ASSIGN 
            {
              Object RESULT =null;
		 RESULT = "&="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ar2",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Ar2 ::= MINUS 
            {
              Object RESULT =null;
		 RESULT = "-"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ar2",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Ar2 ::= PLUS 
            {
              Object RESULT =null;
		 RESULT = "+"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ar2",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Ar2 ::= PERCENT 
            {
              Object RESULT =null;
		 RESULT = "%"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ar2",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Ar2 ::= DIVIDE 
            {
              Object RESULT =null;
		 RESULT = "/"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ar2",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Ar2 ::= ASSIGN 
            {
              Object RESULT =null;
		 RESULT = "="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ar2",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // exp ::= LPAREN exp RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "("+e+")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exp ::= TILDE exp 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "~"+e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exp ::= BARDOT exp 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "!"+e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp ::= exp QUESTIONMARK exp COLON exp 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = " ? " + e + " " + e1 +" "+e2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp ::= exp LogicalS exp 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e + " " + e2 + " " + o; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= exp B2 exp 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e + " " + e2 + " " + o; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= exp Ar2 exp 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e + " " + e2 + " " + o; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= AMPERSAND exp 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "&"+e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= STAR exp 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "*"+e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp ::= MM exp 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "--"+e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= PP exp 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "++"+e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= PLUS exp 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ""+e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= MINUS exp 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "-"+e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp ::= exp MM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e+"--"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp ::= exp PP 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e+"++"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp ::= exp PREF ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e+"->"+i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp ::= exp PREF func_call 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e+"->"+f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exp ::= exp DOT ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e+"."+i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exp ::= exp DOT func_call 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e+"."+f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exp ::= exp LBRACKET exp RBRACKET 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e+"["+e2+"]"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exp ::= func_call 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exp ::= ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exp ::= NUMBER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // def_val ::= LPAREN def_val RPAREN 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "("+d+")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_val",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // def_val ::= TILDE exp 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "~"+e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_val",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // def_val ::= BARDOT exp 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "!"+e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_val",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // def_val ::= def_val QUESTIONMARK exp COLON exp 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = " ? "+d+" "+e1+" "+e2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_val",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // def_val ::= def_val LogicalS exp 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = d + " " + e + " " + o; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_val",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // def_val ::= def_val B2 exp 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = d + " " + e + " " + o; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_val",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // def_val ::= def_val Ar2 exp 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = d + " " + e + " " + o; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_val",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // def_val ::= AMPERSAND exp 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "&"+e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_val",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // def_val ::= STAR exp 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "*"+e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_val",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // def_val ::= MM exp 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "++"+e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_val",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // def_val ::= PP exp 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "++"+e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_val",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // def_val ::= PLUS exp 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "+"+e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_val",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // def_val ::= MINUS exp 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "-"+e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_val",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // def_val ::= def_val MM 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = d+"--"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_val",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // def_val ::= def_val PP 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = d+"++"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_val",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // def_val ::= def_val PREF ID 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = d+"->"+i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_val",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // def_val ::= def_val PREF func_call 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = d+"->"+f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_val",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // def_val ::= def_val DOT ID 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = d+"."+i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_val",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // def_val ::= def_val DOT func_call 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = d+"."+f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_val",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // def_val ::= def_val LBRACKET exp RBRACKET 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = d+"["+e+"]"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_val",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // def_val ::= func_call 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_val",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // def_val ::= NUMBER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_val",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // def_body ::= ID STRUCT ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			parser.cg.declareDefine(i, "", v, true);			
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_body",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // def_body ::= ID LPAREN macro_params RPAREN exp 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			parser.cg.declareDefine(i, "("+m+")", e, false);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_body",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // def_body ::= ID def_val 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			parser.cg.declareDefine(i, "", v, false);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_body",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // code_part ::= DEFINE def_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_part",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // code_part ::= STRUCT ID LQ st_body RQ SEMI 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
			parser.cg.struct.setID(i);
			parser.cg.declareStruct(); 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_part",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // code_part ::= TYPEDEF STRUCT LQ st_body RQ ID SEMI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.cg.declareTypedef_struct(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_part",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // code_part ::= TYPEDEF defin SEMI 
            {
              Object RESULT =null;
		int d2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.cg.declareTypedef_var(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_part",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // code_part ::= EXTERN defin SEMI 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.cg.declareVar(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_part",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // code_part ::= EXTERN func SEMI 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.cg.declareFunc(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_part",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= code_part 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= program code_part 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

