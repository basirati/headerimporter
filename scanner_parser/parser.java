
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Oct 09 12:35:20 CEST 2014
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Oct 09 12:35:20 CEST 2014
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\172\000\002\003\004\000\002\002\004\000\002\003" +
    "\003\000\002\004\005\000\002\004\005\000\002\004\005" +
    "\000\002\004\011\000\002\004\010\000\002\004\004\000" +
    "\002\002\004\000\002\002\005\000\002\002\005\000\002" +
    "\024\003\000\002\024\004\000\002\024\004\000\002\024" +
    "\004\000\002\024\004\000\002\024\004\000\002\024\005" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\006\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\004\000\002\012" +
    "\004\000\002\012\005\000\002\020\004\000\002\020\006" +
    "\000\002\020\004\000\002\020\006\000\002\020\004\000" +
    "\002\020\006\000\002\020\004\000\002\020\006\000\002" +
    "\020\004\000\002\020\006\000\002\020\004\000\002\020" +
    "\006\000\002\020\004\000\002\020\006\000\002\020\003" +
    "\000\002\025\007\000\002\025\007\000\002\025\013\000" +
    "\002\025\012\000\002\025\011\000\002\021\005\000\002" +
    "\021\007\000\002\021\005\000\002\021\007\000\002\021" +
    "\011\000\002\021\013\000\002\021\010\000\002\021\012" +
    "\000\002\021\007\000\002\021\011\000\002\021\004\000" +
    "\002\021\004\000\002\021\004\000\002\021\004\000\002" +
    "\021\004\000\002\021\004\000\002\021\004\000\002\021" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\013\006\000" +
    "\002\013\005\000\002\014\005\000\002\014\003\000\002" +
    "\023\005\000\002\023\003\000\002\022\005\000\002\022" +
    "\004\000\002\030\002\000\002\010\010\000\002\007\004" +
    "\000\002\007\005\000\002\006\004\000\002\006\005\000" +
    "\002\006\006\000\002\031\002\000\002\006\013\000\002" +
    "\005\003\000\002\005\005\000\002\005\005\000\002\005" +
    "\003\000\002\005\005\000\002\005\002\000\002\032\002" +
    "\000\002\011\012\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\004\000\002\027\004\000\002" +
    "\027\004\000\002\027\004\000\002\026\003\000\002\026" +
    "\005\000\002\026\006\000\002\026\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0123\000\012\004\007\042\005\043\010\044\006\001" +
    "\002\000\014\002\u0125\004\007\042\005\043\010\044\006" +
    "\001\002\000\016\044\023\052\021\053\012\054\020\055" +
    "\022\061\015\001\002\000\004\061\u0115\001\002\000\004" +
    "\061\102\001\002\000\016\044\014\052\021\053\012\054" +
    "\020\055\022\061\015\001\002\000\014\002\uffff\004\uffff" +
    "\042\uffff\043\uffff\044\uffff\001\002\000\020\005\uff90\035" +
    "\uff90\037\uff90\040\uff90\041\uff90\053\101\061\uff90\001\002" +
    "\000\016\005\uff8b\035\uff8b\037\uff8b\040\uff8b\041\uff8b\061" +
    "\uff8b\001\002\000\006\045\070\061\025\001\002\000\016" +
    "\005\uff92\035\uff92\037\uff92\040\uff92\041\uff92\061\uff92\001" +
    "\002\000\012\005\037\035\035\040\036\061\034\001\002" +
    "\000\006\005\030\032\027\001\002\000\016\044\023\052" +
    "\021\053\012\054\020\055\022\061\015\001\002\000\016" +
    "\005\uff91\035\uff91\037\uff91\040\uff91\041\uff91\061\uff91\001" +
    "\002\000\016\044\023\052\021\053\012\054\020\055\022" +
    "\061\015\001\002\000\004\061\025\001\002\000\016\005" +
    "\uff8c\035\uff8c\037\uff8c\040\uff8c\041\uff8c\061\uff8c\001\002" +
    "\000\016\005\uff8e\035\uff8e\037\uff8e\040\uff8e\041\uff8e\061" +
    "\uff8e\001\002\000\016\005\uff8d\035\uff8d\037\uff8d\040\uff8d" +
    "\041\uff8d\061\uff8d\001\002\000\014\002\ufffc\004\ufffc\042" +
    "\ufffc\043\ufffc\044\ufffc\001\002\000\006\006\031\060\032" +
    "\001\002\000\006\005\uff9e\032\uff9e\001\002\000\004\006" +
    "\033\001\002\000\006\005\uff9d\032\uff9d\001\002\000\006" +
    "\005\uff9f\032\uff9f\001\002\000\016\005\uff88\035\uff88\037" +
    "\uff88\040\uff88\041\uff88\061\uff88\001\002\000\004\035\043" +
    "\001\002\000\006\006\040\060\041\001\002\000\016\005" +
    "\uff8a\035\uff8a\037\uff8a\040\uff8a\041\uff8a\061\uff8a\001\002" +
    "\000\004\006\042\001\002\000\016\005\uff89\035\uff89\037" +
    "\uff89\040\uff89\041\uff89\061\uff89\001\002\000\004\061\044" +
    "\001\002\000\004\041\045\001\002\000\004\040\046\001" +
    "\002\000\020\041\uff9c\044\uff9c\052\uff9c\053\uff9c\054\uff9c" +
    "\055\uff9c\061\uff9c\001\002\000\020\041\uff95\044\023\052" +
    "\021\053\012\054\020\055\022\061\015\001\002\000\004" +
    "\041\067\001\002\000\006\037\065\041\uff97\001\002\000" +
    "\014\005\037\035\035\037\053\040\054\041\uff9a\001\002" +
    "\000\022\011\064\041\uff95\044\023\052\021\053\012\054" +
    "\020\055\022\061\015\001\002\000\004\035\055\001\002" +
    "\000\004\041\056\001\002\000\004\040\057\001\002\000" +
    "\020\041\uff94\044\uff94\052\uff94\053\uff94\054\uff94\055\uff94" +
    "\061\uff94\001\002\000\020\041\uff95\044\023\052\021\053" +
    "\012\054\020\055\022\061\015\001\002\000\004\041\062" +
    "\001\002\000\006\037\uff93\041\uff93\001\002\000\004\041" +
    "\uff99\001\002\000\004\041\uff98\001\002\000\020\041\uff95" +
    "\044\023\052\021\053\012\054\020\055\022\061\015\001" +
    "\002\000\004\041\uff96\001\002\000\006\005\uff9b\032\uff9b" +
    "\001\002\000\016\044\023\052\021\053\012\054\020\055" +
    "\022\061\015\001\002\000\020\044\023\046\075\052\021" +
    "\053\012\054\020\055\022\061\015\001\002\000\006\005" +
    "\030\032\073\001\002\000\020\044\uffa1\046\uffa1\052\uffa1" +
    "\053\uffa1\054\uffa1\055\uffa1\061\uffa1\001\002\000\006\005" +
    "\030\032\100\001\002\000\004\061\076\001\002\000\004" +
    "\032\077\001\002\000\014\002\ufffb\004\ufffb\042\ufffb\043" +
    "\ufffb\044\ufffb\001\002\000\020\044\uffa0\046\uffa0\052\uffa0" +
    "\053\uffa0\054\uffa0\055\uffa0\061\uffa0\001\002\000\016\005" +
    "\uff8f\035\uff8f\037\uff8f\040\uff8f\041\uff8f\061\uff8f\001\002" +
    "\000\022\013\113\033\112\034\104\035\110\040\114\044" +
    "\107\056\115\060\106\001\002\000\014\002\ufff9\004\ufff9" +
    "\042\ufff9\043\ufff9\044\ufff9\001\002\000\020\013\113\033" +
    "\112\034\104\035\110\040\117\056\115\060\106\001\002" +
    "\000\030\013\145\021\150\022\146\033\140\034\134\035" +
    "\137\040\151\056\152\057\141\060\135\061\144\001\002" +
    "\000\016\002\ufff5\004\ufff5\041\ufff5\042\ufff5\043\ufff5\044" +
    "\ufff5\001\002\000\004\061\133\001\002\000\020\013\113" +
    "\033\112\034\104\035\110\040\117\056\115\060\106\001" +
    "\002\000\014\002\ufff8\004\ufff8\042\ufff8\043\ufff8\044\ufff8" +
    "\001\002\000\020\013\113\033\112\034\104\035\110\040" +
    "\117\056\115\060\106\001\002\000\020\013\113\033\112" +
    "\034\104\035\110\040\117\056\115\060\106\001\002\000" +
    "\024\013\113\033\112\034\104\035\110\040\117\041\124" +
    "\056\115\060\106\061\123\001\002\000\020\013\113\033" +
    "\112\034\104\035\110\040\117\056\115\060\106\001\002" +
    "\000\016\002\ufff2\004\ufff2\041\ufff2\042\ufff2\043\ufff2\044" +
    "\ufff2\001\002\000\020\013\113\033\112\034\104\035\110" +
    "\040\117\056\115\060\106\001\002\000\004\041\121\001" +
    "\002\000\016\002\uffef\004\uffef\041\uffef\042\uffef\043\uffef" +
    "\044\uffef\001\002\000\006\037\125\041\126\001\002\000" +
    "\006\037\uffa6\041\uffa6\001\002\000\030\013\uffa4\021\uffa4" +
    "\022\uffa4\033\uffa4\034\uffa4\035\uffa4\040\uffa4\056\uffa4\057" +
    "\uffa4\060\uffa4\061\uffa4\001\002\000\004\061\127\001\002" +
    "\000\030\013\uffa5\021\uffa5\022\uffa5\033\uffa5\034\uffa5\035" +
    "\uffa5\040\uffa5\056\uffa5\057\uffa5\060\uffa5\061\uffa5\001\002" +
    "\000\006\037\uffa7\041\uffa7\001\002\000\016\002\ufff0\004" +
    "\ufff0\041\ufff0\042\ufff0\043\ufff0\044\ufff0\001\002\000\016" +
    "\002\ufff4\004\ufff4\041\ufff4\042\ufff4\043\ufff4\044\ufff4\001" +
    "\002\000\016\002\ufff1\004\ufff1\041\ufff1\042\ufff1\043\ufff1" +
    "\044\ufff1\001\002\000\014\002\ufff6\004\ufff6\042\ufff6\043" +
    "\ufff6\044\ufff6\001\002\000\026\021\162\022\161\033\156" +
    "\034\153\035\155\040\163\056\164\057\157\060\135\061" +
    "\144\001\002\000\104\002\uffee\004\uffee\005\uffee\006\uffee" +
    "\007\uffee\010\uffee\012\uffee\014\uffee\015\uffee\016\uffee\017" +
    "\uffee\020\uffee\021\uffee\022\uffee\023\uffee\024\uffee\025\uffee" +
    "\026\uffee\027\uffee\030\uffee\031\uffee\033\uffee\034\uffee\036" +
    "\uffee\037\uffee\041\uffee\042\uffee\043\uffee\044\uffee\047\uffee" +
    "\050\uffee\051\uffee\056\uffee\001\002\000\104\002\uffd5\004" +
    "\uffd5\005\216\006\uffd5\007\uffd5\010\217\012\uffd5\014\uffd5" +
    "\015\uffd5\016\uffd5\017\uffd5\020\215\021\220\022\213\023" +
    "\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5" +
    "\033\uffd5\034\uffd5\036\uffd5\037\uffd5\041\uffd5\042\uffd5\043" +
    "\uffd5\044\uffd5\047\uffd5\050\uffd5\051\uffd5\056\uffd5\001\002" +
    "\000\026\021\162\022\161\033\156\034\153\035\155\040" +
    "\163\056\164\057\157\060\135\061\144\001\002\000\026" +
    "\021\162\022\161\033\156\034\153\035\155\040\163\056" +
    "\164\057\157\060\135\061\144\001\002\000\026\021\162" +
    "\022\161\033\156\034\153\035\155\040\163\056\164\057" +
    "\157\060\135\061\144\001\002\000\014\002\ufff7\004\ufff7" +
    "\042\ufff7\043\ufff7\044\ufff7\001\002\000\070\002\uffbe\004" +
    "\uffbe\007\305\012\307\014\274\015\310\016\301\017\273" +
    "\023\303\024\275\025\263\026\267\027\272\030\270\031" +
    "\uffbe\033\266\034\304\036\300\037\uffbe\041\uffbe\042\uffbe" +
    "\043\uffbe\044\uffbe\047\265\050\271\051\u0104\056\306\001" +
    "\002\000\106\002\uffed\004\uffed\005\uffed\006\uffed\007\uffed" +
    "\010\uffed\012\uffed\014\uffed\015\uffed\016\uffed\017\uffed\020" +
    "\uffed\021\uffed\022\uffed\023\uffed\024\uffed\025\uffed\026\uffed" +
    "\027\uffed\030\uffed\031\uffed\033\uffed\034\uffed\036\uffed\037" +
    "\uffed\040\223\041\uffed\042\uffed\043\uffed\044\uffed\047\uffed" +
    "\050\uffed\051\uffed\056\uffed\001\002\000\026\021\162\022" +
    "\161\033\156\034\153\035\155\040\165\056\164\057\157" +
    "\060\135\061\144\001\002\000\026\021\162\022\161\033" +
    "\156\034\153\035\155\040\163\056\164\057\157\060\135" +
    "\061\144\001\002\000\104\002\uffec\004\uffec\005\uffec\006" +
    "\uffec\007\uffec\010\uffec\012\uffec\014\uffec\015\uffec\016\uffec" +
    "\017\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024\uffec\025" +
    "\uffec\026\uffec\027\uffec\030\uffec\031\uffec\033\uffec\034\uffec" +
    "\036\uffec\037\uffec\041\uffec\042\uffec\043\uffec\044\uffec\047" +
    "\uffec\050\uffec\051\uffec\056\uffec\001\002\000\026\021\162" +
    "\022\161\033\156\034\153\035\155\040\163\056\164\057" +
    "\157\060\135\061\144\001\002\000\030\013\342\021\250" +
    "\022\247\033\243\034\240\035\242\040\165\056\251\057" +
    "\244\060\135\061\144\001\002\000\026\021\162\022\161" +
    "\033\156\034\153\035\155\040\163\056\164\057\157\060" +
    "\135\061\144\001\002\000\026\021\162\022\161\033\156" +
    "\034\153\035\155\040\165\056\164\057\157\060\135\061" +
    "\144\001\002\000\022\002\uffc4\004\uffc4\031\uffc4\037\uffc4" +
    "\041\uffc4\042\uffc4\043\uffc4\044\uffc4\001\002\000\026\021" +
    "\162\022\161\033\156\034\153\035\155\040\165\056\164" +
    "\057\157\060\135\061\144\001\002\000\026\021\162\022" +
    "\161\033\156\034\153\035\155\040\165\056\164\057\157" +
    "\060\135\061\144\001\002\000\026\021\162\022\161\033" +
    "\156\034\153\035\155\040\165\056\164\057\157\060\135" +
    "\061\144\001\002\000\072\002\uffd9\004\uffd9\006\uffd9\007" +
    "\uffd9\012\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\023\uffd9" +
    "\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\033" +
    "\uffd9\034\uffd9\036\uffd9\037\uffd9\041\uffd9\042\uffd9\043\uffd9" +
    "\044\uffd9\047\uffd9\050\uffd9\051\uffd9\056\uffd9\001\002\000" +
    "\026\021\162\022\161\033\156\034\153\035\155\040\165" +
    "\056\164\057\157\060\135\061\144\001\002\000\026\021" +
    "\162\022\161\033\156\034\153\035\155\040\165\056\164" +
    "\057\157\060\135\061\144\001\002\000\030\013\246\021" +
    "\250\022\247\033\243\034\240\035\242\040\165\056\251" +
    "\057\244\060\135\061\144\001\002\000\026\021\162\022" +
    "\161\033\156\034\153\035\155\040\165\056\164\057\157" +
    "\060\135\061\144\001\002\000\026\021\174\022\173\033" +
    "\171\034\166\035\170\040\175\056\176\057\172\060\135" +
    "\061\144\001\002\000\026\021\162\022\161\033\156\034" +
    "\153\035\155\040\165\056\164\057\157\060\135\061\144" +
    "\001\002\000\016\005\216\010\217\020\215\021\220\022" +
    "\213\041\214\001\002\000\026\021\162\022\161\033\156" +
    "\034\153\035\155\040\165\056\164\057\157\060\135\061" +
    "\144\001\002\000\026\021\162\022\161\033\156\034\153" +
    "\035\155\040\165\056\164\057\157\060\135\061\144\001" +
    "\002\000\026\021\162\022\161\033\156\034\153\035\155" +
    "\040\165\056\164\057\157\060\135\061\144\001\002\000" +
    "\026\021\162\022\161\033\156\034\153\035\155\040\165" +
    "\056\164\057\157\060\135\061\144\001\002\000\026\021" +
    "\162\022\161\033\156\034\153\035\155\040\165\056\164" +
    "\057\157\060\135\061\144\001\002\000\010\040\175\060" +
    "\135\061\144\001\002\000\026\021\162\022\161\033\156" +
    "\034\153\035\155\040\165\056\164\057\157\060\135\061" +
    "\144\001\002\000\004\041\200\001\002\000\072\002\uffd8" +
    "\004\uffd8\006\uffd8\007\uffd8\012\uffd8\014\uffd8\015\uffd8\016" +
    "\uffd8\017\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8" +
    "\030\uffd8\031\uffd8\033\uffd8\034\uffd8\036\uffd8\037\uffd8\041" +
    "\uffd8\042\uffd8\043\uffd8\044\uffd8\047\uffd8\050\uffd8\051\uffd8" +
    "\056\uffd8\001\002\000\004\041\202\001\002\000\072\002" +
    "\uffdc\004\uffdc\006\uffdc\007\uffdc\012\uffdc\014\uffdc\015\uffdc" +
    "\016\uffdc\017\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027" +
    "\uffdc\030\uffdc\031\uffdc\033\uffdc\034\uffdc\036\uffdc\037\uffdc" +
    "\041\uffdc\042\uffdc\043\uffdc\044\uffdc\047\uffdc\050\uffdc\051" +
    "\uffdc\056\uffdc\001\002\000\004\041\204\001\002\000\072" +
    "\002\uffde\004\uffde\006\uffde\007\uffde\012\uffde\014\uffde\015" +
    "\uffde\016\uffde\017\uffde\023\uffde\024\uffde\025\uffde\026\uffde" +
    "\027\uffde\030\uffde\031\uffde\033\uffde\034\uffde\036\uffde\037" +
    "\uffde\041\uffde\042\uffde\043\uffde\044\uffde\047\uffde\050\uffde" +
    "\051\uffde\056\uffde\001\002\000\004\041\206\001\002\000" +
    "\072\002\uffd6\004\uffd6\006\uffd6\007\uffd6\012\uffd6\014\uffd6" +
    "\015\uffd6\016\uffd6\017\uffd6\023\uffd6\024\uffd6\025\uffd6\026" +
    "\uffd6\027\uffd6\030\uffd6\031\uffd6\033\uffd6\034\uffd6\036\uffd6" +
    "\037\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6\047\uffd6\050" +
    "\uffd6\051\uffd6\056\uffd6\001\002\000\004\041\210\001\002" +
    "\000\072\002\uffe0\004\uffe0\006\uffe0\007\uffe0\012\uffe0\014" +
    "\uffe0\015\uffe0\016\uffe0\017\uffe0\023\uffe0\024\uffe0\025\uffe0" +
    "\026\uffe0\027\uffe0\030\uffe0\031\uffe0\033\uffe0\034\uffe0\036" +
    "\uffe0\037\uffe0\041\uffe0\042\uffe0\043\uffe0\044\uffe0\047\uffe0" +
    "\050\uffe0\051\uffe0\056\uffe0\001\002\000\004\041\212\001" +
    "\002\000\072\002\uffda\004\uffda\006\uffda\007\uffda\012\uffda" +
    "\014\uffda\015\uffda\016\uffda\017\uffda\023\uffda\024\uffda\025" +
    "\uffda\026\uffda\027\uffda\030\uffda\031\uffda\033\uffda\034\uffda" +
    "\036\uffda\037\uffda\041\uffda\042\uffda\043\uffda\044\uffda\047" +
    "\uffda\050\uffda\051\uffda\056\uffda\001\002\000\104\002\uffe5" +
    "\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5\012\uffe5\014" +
    "\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5" +
    "\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031" +
    "\uffe5\033\uffe5\034\uffe5\036\uffe5\037\uffe5\041\uffe5\042\uffe5" +
    "\043\uffe5\044\uffe5\047\uffe5\050\uffe5\051\uffe5\056\uffe5\001" +
    "\002\000\104\002\uffe4\004\uffe4\005\uffe4\006\uffe4\007\uffe4" +
    "\010\uffe4\012\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020" +
    "\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4" +
    "\027\uffe4\030\uffe4\031\uffe4\033\uffe4\034\uffe4\036\uffe4\037" +
    "\uffe4\041\uffe4\042\uffe4\043\uffe4\044\uffe4\047\uffe4\050\uffe4" +
    "\051\uffe4\056\uffe4\001\002\000\004\061\234\001\002\000" +
    "\026\021\162\022\161\033\156\034\153\035\155\040\165" +
    "\056\164\057\157\060\135\061\144\001\002\000\004\061" +
    "\221\001\002\000\104\002\uffe6\004\uffe6\005\uffe6\006\uffe6" +
    "\007\uffe6\010\uffe6\012\uffe6\014\uffe6\015\uffe6\016\uffe6\017" +
    "\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6" +
    "\026\uffe6\027\uffe6\030\uffe6\031\uffe6\033\uffe6\034\uffe6\036" +
    "\uffe6\037\uffe6\041\uffe6\042\uffe6\043\uffe6\044\uffe6\047\uffe6" +
    "\050\uffe6\051\uffe6\056\uffe6\001\002\000\106\002\uffe9\004" +
    "\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9\012\uffe9\014\uffe9" +
    "\015\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023" +
    "\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9" +
    "\033\uffe9\034\uffe9\036\uffe9\037\uffe9\040\223\041\uffe9\042" +
    "\uffe9\043\uffe9\044\uffe9\047\uffe9\050\uffe9\051\uffe9\056\uffe9" +
    "\001\002\000\104\002\uffea\004\uffea\005\uffea\006\uffea\007" +
    "\uffea\010\uffea\012\uffea\014\uffea\015\uffea\016\uffea\017\uffea" +
    "\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea\025\uffea\026" +
    "\uffea\027\uffea\030\uffea\031\uffea\033\uffea\034\uffea\036\uffea" +
    "\037\uffea\041\uffea\042\uffea\043\uffea\044\uffea\047\uffea\050" +
    "\uffea\051\uffea\056\uffea\001\002\000\032\013\145\021\150" +
    "\022\146\033\140\034\134\035\137\040\151\041\226\056" +
    "\152\057\141\060\135\061\144\001\002\000\006\037\uffa8" +
    "\041\uffa8\001\002\000\006\037\227\041\230\001\002\000" +
    "\104\002\uffaa\004\uffaa\005\uffaa\006\uffaa\007\uffaa\010\uffaa" +
    "\012\uffaa\014\uffaa\015\uffaa\016\uffaa\017\uffaa\020\uffaa\021" +
    "\uffaa\022\uffaa\023\uffaa\024\uffaa\025\uffaa\026\uffaa\027\uffaa" +
    "\030\uffaa\031\uffaa\033\uffaa\034\uffaa\036\uffaa\037\uffaa\041" +
    "\uffaa\042\uffaa\043\uffaa\044\uffaa\047\uffaa\050\uffaa\051\uffaa" +
    "\056\uffaa\001\002\000\030\013\145\021\150\022\146\033" +
    "\140\034\134\035\137\040\151\056\152\057\141\060\135" +
    "\061\144\001\002\000\104\002\uffab\004\uffab\005\uffab\006" +
    "\uffab\007\uffab\010\uffab\012\uffab\014\uffab\015\uffab\016\uffab" +
    "\017\uffab\020\uffab\021\uffab\022\uffab\023\uffab\024\uffab\025" +
    "\uffab\026\uffab\027\uffab\030\uffab\031\uffab\033\uffab\034\uffab" +
    "\036\uffab\037\uffab\041\uffab\042\uffab\043\uffab\044\uffab\047" +
    "\uffab\050\uffab\051\uffab\056\uffab\001\002\000\006\037\uffa9" +
    "\041\uffa9\001\002\000\004\006\233\001\002\000\104\002" +
    "\uffeb\004\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb\012\uffeb" +
    "\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb\022" +
    "\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb" +
    "\031\uffeb\033\uffeb\034\uffeb\036\uffeb\037\uffeb\041\uffeb\042" +
    "\uffeb\043\uffeb\044\uffeb\047\uffeb\050\uffeb\051\uffeb\056\uffeb" +
    "\001\002\000\106\002\uffe7\004\uffe7\005\uffe7\006\uffe7\007" +
    "\uffe7\010\uffe7\012\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7" +
    "\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026" +
    "\uffe7\027\uffe7\030\uffe7\031\uffe7\033\uffe7\034\uffe7\036\uffe7" +
    "\037\uffe7\040\223\041\uffe7\042\uffe7\043\uffe7\044\uffe7\047" +
    "\uffe7\050\uffe7\051\uffe7\056\uffe7\001\002\000\104\002\uffe8" +
    "\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8\012\uffe8\014" +
    "\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8" +
    "\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\031" +
    "\uffe8\033\uffe8\034\uffe8\036\uffe8\037\uffe8\041\uffe8\042\uffe8" +
    "\043\uffe8\044\uffe8\047\uffe8\050\uffe8\051\uffe8\056\uffe8\001" +
    "\002\000\004\041\237\001\002\000\072\002\uffe2\004\uffe2" +
    "\006\uffe2\007\uffe2\012\uffe2\014\uffe2\015\uffe2\016\uffe2\017" +
    "\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2" +
    "\031\uffe2\033\uffe2\034\uffe2\036\uffe2\037\uffe2\041\uffe2\042" +
    "\uffe2\043\uffe2\044\uffe2\047\uffe2\050\uffe2\051\uffe2\056\uffe2" +
    "\001\002\000\026\021\162\022\161\033\156\034\153\035" +
    "\155\040\165\056\164\057\157\060\135\061\144\001\002" +
    "\000\064\005\216\007\uffd5\010\217\012\uffd5\014\uffd5\015" +
    "\uffd5\016\uffd5\017\uffd5\020\215\021\220\022\213\023\uffd5" +
    "\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\033\uffd5\034" +
    "\uffd5\036\uffd5\041\214\047\uffd5\050\uffd5\051\uffd5\056\uffd5" +
    "\001\002\000\026\021\162\022\161\033\156\034\153\035" +
    "\155\040\165\056\164\057\157\060\135\061\144\001\002" +
    "\000\026\021\162\022\161\033\156\034\153\035\155\040" +
    "\165\056\164\057\157\060\135\061\144\001\002\000\026" +
    "\021\162\022\161\033\156\034\153\035\155\040\165\056" +
    "\164\057\157\060\135\061\144\001\002\000\050\007\305" +
    "\012\307\014\274\015\310\016\301\017\273\023\303\024" +
    "\275\025\263\026\267\027\272\030\270\033\266\034\304" +
    "\036\300\047\265\050\271\051\277\056\306\001\002\000" +
    "\026\021\162\022\161\033\156\034\153\035\155\040\165" +
    "\056\164\057\157\060\135\061\144\001\002\000\026\021" +
    "\162\022\161\033\156\034\153\035\155\040\165\056\164" +
    "\057\157\060\135\061\144\001\002\000\026\021\162\022" +
    "\161\033\156\034\153\035\155\040\165\056\164\057\157" +
    "\060\135\061\144\001\002\000\026\021\162\022\161\033" +
    "\156\034\153\035\155\040\165\056\164\057\157\060\135" +
    "\061\144\001\002\000\052\007\uffd9\012\uffd9\014\uffd9\015" +
    "\uffd9\016\uffd9\017\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9" +
    "\027\uffd9\030\uffd9\033\uffd9\034\uffd9\036\uffd9\041\200\047" +
    "\uffd9\050\uffd9\051\uffd9\056\uffd9\001\002\000\052\007\uffdd" +
    "\012\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd\023\uffdd\024" +
    "\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\033\uffdd\034\uffdd" +
    "\036\uffdd\041\202\047\uffdd\050\uffdd\051\uffdd\056\uffdd\001" +
    "\002\000\052\007\uffdf\012\uffdf\014\uffdf\015\uffdf\016\uffdf" +
    "\017\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030" +
    "\uffdf\033\uffdf\034\uffdf\036\uffdf\041\204\047\uffdf\050\uffdf" +
    "\051\uffdf\056\uffdf\001\002\000\004\051\256\001\002\000" +
    "\030\013\145\021\150\022\146\033\140\034\134\035\137" +
    "\040\151\056\152\057\141\060\135\061\144\001\002\000" +
    "\004\031\260\001\002\000\030\013\145\021\150\022\146" +
    "\033\140\034\134\035\137\040\151\056\152\057\141\060" +
    "\135\061\144\001\002\000\004\041\262\001\002\000\022" +
    "\002\uffd1\004\uffd1\031\uffd1\037\uffd1\041\uffd1\042\uffd1\043" +
    "\uffd1\044\uffd1\001\002\000\026\021\uffad\022\uffad\033\uffad" +
    "\034\uffad\035\uffad\040\uffad\056\uffad\057\uffad\060\uffad\061" +
    "\uffad\001\002\000\026\021\162\022\161\033\156\034\153" +
    "\035\155\040\165\056\164\057\157\060\135\061\144\001" +
    "\002\000\030\013\uffbb\021\uffbb\022\uffbb\033\uffbb\034\uffbb" +
    "\035\uffbb\040\uffbb\056\uffbb\057\uffbb\060\uffbb\061\uffbb\001" +
    "\002\000\030\013\uffba\021\uffba\022\uffba\033\uffba\034\uffba" +
    "\035\uffba\040\uffba\056\uffba\057\uffba\060\uffba\061\uffba\001" +
    "\002\000\026\021\uffac\022\uffac\033\uffac\034\uffac\035\uffac" +
    "\040\uffac\056\uffac\057\uffac\060\uffac\061\uffac\001\002\000" +
    "\026\021\uffaf\022\uffaf\033\uffaf\034\uffaf\035\uffaf\040\uffaf" +
    "\056\uffaf\057\uffaf\060\uffaf\061\uffaf\001\002\000\030\013" +
    "\uffb6\021\uffb6\022\uffb6\033\uffb6\034\uffb6\035\uffb6\040\uffb6" +
    "\056\uffb6\057\uffb6\060\uffb6\061\uffb6\001\002\000\026\021" +
    "\uffae\022\uffae\033\uffae\034\uffae\035\uffae\040\uffae\056\uffae" +
    "\057\uffae\060\uffae\061\uffae\001\002\000\030\013\uffb8\021" +
    "\uffb8\022\uffb8\033\uffb8\034\uffb8\035\uffb8\040\uffb8\056\uffb8" +
    "\057\uffb8\060\uffb8\061\uffb8\001\002\000\026\021\uffb1\022" +
    "\uffb1\033\uffb1\034\uffb1\035\uffb1\040\uffb1\056\uffb1\057\uffb1" +
    "\060\uffb1\061\uffb1\001\002\000\026\021\uffb2\022\uffb2\033" +
    "\uffb2\034\uffb2\035\uffb2\040\uffb2\056\uffb2\057\uffb2\060\uffb2" +
    "\061\uffb2\001\002\000\030\013\145\021\150\022\146\033" +
    "\140\034\134\035\137\040\151\056\152\057\141\060\135" +
    "\061\144\001\002\000\030\013\145\021\150\022\146\033" +
    "\140\034\134\035\137\040\151\056\152\057\141\060\135" +
    "\061\144\001\002\000\030\013\uffbc\021\uffbc\022\uffbc\033" +
    "\uffbc\034\uffbc\035\uffbc\040\uffbc\056\uffbc\057\uffbc\060\uffbc" +
    "\061\uffbc\001\002\000\030\013\uffb7\021\uffb7\022\uffb7\033" +
    "\uffb7\034\uffb7\035\uffb7\040\uffb7\056\uffb7\057\uffb7\060\uffb7" +
    "\061\uffb7\001\002\000\030\013\145\021\150\022\146\033" +
    "\140\034\134\035\137\040\151\056\152\057\141\060\135" +
    "\061\144\001\002\000\026\021\uffb0\022\uffb0\033\uffb0\034" +
    "\uffb0\035\uffb0\040\uffb0\056\uffb0\057\uffb0\060\uffb0\061\uffb0" +
    "\001\002\000\030\013\uffb9\021\uffb9\022\uffb9\033\uffb9\034" +
    "\uffb9\035\uffb9\040\uffb9\056\uffb9\057\uffb9\060\uffb9\061\uffb9" +
    "\001\002\000\030\013\uffbd\021\uffbd\022\uffbd\033\uffbd\034" +
    "\uffbd\035\uffbd\040\uffbd\056\uffbd\057\uffbd\060\uffbd\061\uffbd" +
    "\001\002\000\030\013\uffb4\021\uffb4\022\uffb4\033\uffb4\034" +
    "\uffb4\035\uffb4\040\uffb4\056\uffb4\057\uffb4\060\uffb4\061\uffb4" +
    "\001\002\000\030\013\uffb5\021\uffb5\022\uffb5\033\uffb5\034" +
    "\uffb5\035\uffb5\040\uffb5\056\uffb5\057\uffb5\060\uffb5\061\uffb5" +
    "\001\002\000\026\021\uffb3\022\uffb3\033\uffb3\034\uffb3\035" +
    "\uffb3\040\uffb3\056\uffb3\057\uffb3\060\uffb3\061\uffb3\001\002" +
    "\000\004\041\312\001\002\000\022\002\uffd4\004\uffd4\031" +
    "\uffd4\037\uffd4\041\uffd4\042\uffd4\043\uffd4\044\uffd4\001\002" +
    "\000\004\031\314\001\002\000\030\013\145\021\150\022" +
    "\146\033\140\034\134\035\137\040\151\056\152\057\141" +
    "\060\135\061\144\001\002\000\004\041\316\001\002\000" +
    "\022\002\uffd0\004\uffd0\031\uffd0\037\uffd0\041\uffd0\042\uffd0" +
    "\043\uffd0\044\uffd0\001\002\000\004\041\320\001\002\000" +
    "\022\002\uffd3\004\uffd3\031\uffd3\037\uffd3\041\uffd3\042\uffd3" +
    "\043\uffd3\044\uffd3\001\002\000\004\051\322\001\002\000" +
    "\030\013\145\021\150\022\146\033\140\034\134\035\137" +
    "\040\151\056\152\057\141\060\135\061\144\001\002\000" +
    "\004\031\324\001\002\000\030\013\145\021\150\022\146" +
    "\033\140\034\134\035\137\040\151\056\152\057\141\060" +
    "\135\061\144\001\002\000\004\041\326\001\002\000\022" +
    "\002\uffd2\004\uffd2\031\uffd2\037\uffd2\041\uffd2\042\uffd2\043" +
    "\uffd2\044\uffd2\001\002\000\052\007\uffd7\012\uffd7\014\uffd7" +
    "\015\uffd7\016\uffd7\017\uffd7\023\uffd7\024\uffd7\025\uffd7\026" +
    "\uffd7\027\uffd7\030\uffd7\033\uffd7\034\uffd7\036\uffd7\041\206" +
    "\047\uffd7\050\uffd7\051\uffd7\056\uffd7\001\002\000\052\007" +
    "\uffe1\012\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\023\uffe1" +
    "\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\033\uffe1\034" +
    "\uffe1\036\uffe1\041\210\047\uffe1\050\uffe1\051\uffe1\056\uffe1" +
    "\001\002\000\052\007\uffdb\012\uffdb\014\uffdb\015\uffdb\016" +
    "\uffdb\017\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb" +
    "\030\uffdb\033\uffdb\034\uffdb\036\uffdb\041\212\047\uffdb\050" +
    "\uffdb\051\uffdb\056\uffdb\001\002\000\052\007\uffe3\012\uffe3" +
    "\014\uffe3\015\uffe3\016\uffe3\017\uffe3\023\uffe3\024\uffe3\025" +
    "\uffe3\026\uffe3\027\uffe3\030\uffe3\033\uffe3\034\uffe3\036\uffe3" +
    "\041\237\047\uffe3\050\uffe3\051\uffe3\056\uffe3\001\002\000" +
    "\072\002\uffdd\004\uffdd\006\uffdd\007\uffdd\012\uffdd\014\uffdd" +
    "\015\uffdd\016\uffdd\017\uffdd\023\uffdd\024\uffdd\025\uffdd\026" +
    "\uffdd\027\uffdd\030\uffdd\031\uffdd\033\uffdd\034\uffdd\036\uffdd" +
    "\037\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd\047\uffdd\050" +
    "\uffdd\051\uffdd\056\uffdd\001\002\000\072\002\uffdf\004\uffdf" +
    "\006\uffdf\007\uffdf\012\uffdf\014\uffdf\015\uffdf\016\uffdf\017" +
    "\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf" +
    "\031\uffdf\033\uffdf\034\uffdf\036\uffdf\037\uffdf\041\uffdf\042" +
    "\uffdf\043\uffdf\044\uffdf\047\uffdf\050\uffdf\051\uffdf\056\uffdf" +
    "\001\002\000\072\002\uffd7\004\uffd7\006\uffd7\007\uffd7\012" +
    "\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\023\uffd7\024\uffd7" +
    "\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\033\uffd7\034" +
    "\uffd7\036\uffd7\037\uffd7\041\uffd7\042\uffd7\043\uffd7\044\uffd7" +
    "\047\uffd7\050\uffd7\051\uffd7\056\uffd7\001\002\000\072\002" +
    "\uffe1\004\uffe1\006\uffe1\007\uffe1\012\uffe1\014\uffe1\015\uffe1" +
    "\016\uffe1\017\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027" +
    "\uffe1\030\uffe1\031\uffe1\033\uffe1\034\uffe1\036\uffe1\037\uffe1" +
    "\041\uffe1\042\uffe1\043\uffe1\044\uffe1\047\uffe1\050\uffe1\051" +
    "\uffe1\056\uffe1\001\002\000\072\002\uffdb\004\uffdb\006\uffdb" +
    "\007\uffdb\012\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\023" +
    "\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb" +
    "\033\uffdb\034\uffdb\036\uffdb\037\uffdb\041\uffdb\042\uffdb\043" +
    "\uffdb\044\uffdb\047\uffdb\050\uffdb\051\uffdb\056\uffdb\001\002" +
    "\000\072\002\uffe3\004\uffe3\006\uffe3\007\uffe3\012\uffe3\014" +
    "\uffe3\015\uffe3\016\uffe3\017\uffe3\023\uffe3\024\uffe3\025\uffe3" +
    "\026\uffe3\027\uffe3\030\uffe3\031\uffe3\033\uffe3\034\uffe3\036" +
    "\uffe3\037\uffe3\041\uffe3\042\uffe3\043\uffe3\044\uffe3\047\uffe3" +
    "\050\uffe3\051\uffe3\056\uffe3\001\002\000\050\007\305\012" +
    "\307\014\274\015\310\016\301\017\273\023\303\024\275" +
    "\025\263\026\267\027\272\030\270\033\266\034\304\036" +
    "\300\047\265\050\271\051\352\056\306\001\002\000\026" +
    "\021\162\022\161\033\156\034\153\035\155\040\165\056" +
    "\164\057\157\060\135\061\144\001\002\000\004\051\344" +
    "\001\002\000\030\013\145\021\150\022\146\033\140\034" +
    "\134\035\137\040\151\056\152\057\141\060\135\061\144" +
    "\001\002\000\004\031\346\001\002\000\030\013\145\021" +
    "\150\022\146\033\140\034\134\035\137\040\151\056\152" +
    "\057\141\060\135\061\144\001\002\000\004\041\350\001" +
    "\002\000\022\002\uffc8\004\uffc8\031\uffc8\037\uffc8\041\uffc8" +
    "\042\uffc8\043\uffc8\044\uffc8\001\002\000\026\021\162\022" +
    "\161\033\156\034\153\035\155\040\165\056\164\057\157" +
    "\060\135\061\144\001\002\000\030\013\145\021\150\022" +
    "\146\033\140\034\134\035\137\040\151\056\152\057\141" +
    "\060\135\061\144\001\002\000\030\013\145\021\150\022" +
    "\146\033\140\034\134\035\137\040\151\056\152\057\141" +
    "\060\135\061\144\001\002\000\030\013\145\021\150\022" +
    "\146\033\140\034\134\035\137\040\151\056\152\057\141" +
    "\060\135\061\144\001\002\000\004\041\356\001\002\000" +
    "\022\002\uffce\004\uffce\031\uffce\037\uffce\041\uffce\042\uffce" +
    "\043\uffce\044\uffce\001\002\000\004\041\360\001\002\000" +
    "\022\002\uffcc\004\uffcc\031\uffcc\037\uffcc\041\uffcc\042\uffcc" +
    "\043\uffcc\044\uffcc\001\002\000\004\031\362\001\002\000" +
    "\030\013\145\021\150\022\146\033\140\034\134\035\137" +
    "\040\151\056\152\057\141\060\135\061\144\001\002\000" +
    "\004\041\364\001\002\000\022\002\uffc6\004\uffc6\031\uffc6" +
    "\037\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6\001\002\000" +
    "\004\051\366\001\002\000\030\013\145\021\150\022\146" +
    "\033\140\034\134\035\137\040\151\056\152\057\141\060" +
    "\135\061\144\001\002\000\004\031\370\001\002\000\030" +
    "\013\145\021\150\022\146\033\140\034\134\035\137\040" +
    "\151\056\152\057\141\060\135\061\144\001\002\000\004" +
    "\041\372\001\002\000\022\002\uffca\004\uffca\031\uffca\037" +
    "\uffca\041\uffca\042\uffca\043\uffca\044\uffca\001\002\000\022" +
    "\002\uffc2\004\uffc2\031\uffc2\037\uffc2\041\uffc2\042\uffc2\043" +
    "\uffc2\044\uffc2\001\002\000\022\002\uffc1\004\uffc1\031\uffc1" +
    "\037\uffc1\041\uffc1\042\uffc1\043\uffc1\044\uffc1\001\002\000" +
    "\004\051\376\001\002\000\030\013\145\021\150\022\146" +
    "\033\140\034\134\035\137\040\151\056\152\057\141\060" +
    "\135\061\144\001\002\000\004\031\u0100\001\002\000\030" +
    "\013\145\021\150\022\146\033\140\034\134\035\137\040" +
    "\151\056\152\057\141\060\135\061\144\001\002\000\022" +
    "\002\uffc9\004\uffc9\031\uffc9\037\uffc9\041\uffc9\042\uffc9\043" +
    "\uffc9\044\uffc9\001\002\000\026\021\162\022\161\033\156" +
    "\034\153\035\155\040\165\056\164\057\157\060\135\061" +
    "\144\001\002\000\030\013\145\021\150\022\146\033\140" +
    "\034\134\035\137\040\151\056\152\057\141\060\135\061" +
    "\144\001\002\000\030\013\145\021\150\022\146\033\140" +
    "\034\134\035\137\040\151\056\152\057\141\060\135\061" +
    "\144\001\002\000\030\013\145\021\150\022\146\033\140" +
    "\034\134\035\137\040\151\056\152\057\141\060\135\061" +
    "\144\001\002\000\022\002\uffcf\004\uffcf\031\uffcf\037\uffcf" +
    "\041\uffcf\042\uffcf\043\uffcf\044\uffcf\001\002\000\004\031" +
    "\u0108\001\002\000\030\013\145\021\150\022\146\033\140" +
    "\034\134\035\137\040\151\056\152\057\141\060\135\061" +
    "\144\001\002\000\022\002\uffc7\004\uffc7\031\uffc7\037\uffc7" +
    "\041\uffc7\042\uffc7\043\uffc7\044\uffc7\001\002\000\022\002" +
    "\uffcd\004\uffcd\031\uffcd\037\uffcd\041\uffcd\042\uffcd\043\uffcd" +
    "\044\uffcd\001\002\000\004\051\u010c\001\002\000\030\013" +
    "\145\021\150\022\146\033\140\034\134\035\137\040\151" +
    "\056\152\057\141\060\135\061\144\001\002\000\004\031" +
    "\u010e\001\002\000\030\013\145\021\150\022\146\033\140" +
    "\034\134\035\137\040\151\056\152\057\141\060\135\061" +
    "\144\001\002\000\022\002\uffcb\004\uffcb\031\uffcb\037\uffcb" +
    "\041\uffcb\042\uffcb\043\uffcb\044\uffcb\001\002\000\022\002" +
    "\uffc5\004\uffc5\031\uffc5\037\uffc5\041\uffc5\042\uffc5\043\uffc5" +
    "\044\uffc5\001\002\000\022\002\uffc0\004\uffc0\031\uffc0\037" +
    "\uffc0\041\uffc0\042\uffc0\043\uffc0\044\uffc0\001\002\000\022" +
    "\002\uffc3\004\uffc3\031\uffc3\037\uffc3\041\uffc3\042\uffc3\043" +
    "\uffc3\044\uffc3\001\002\000\022\002\uffbf\004\uffbf\031\uffbf" +
    "\037\uffbf\041\uffbf\042\uffbf\043\uffbf\044\uffbf\001\002\000" +
    "\016\002\ufff3\004\ufff3\041\ufff3\042\ufff3\043\ufff3\044\ufff3" +
    "\001\002\000\004\045\u0116\001\002\000\016\044\023\052" +
    "\021\053\012\054\020\055\022\061\015\001\002\000\020" +
    "\044\023\046\u0118\052\021\053\012\054\020\055\022\061" +
    "\015\001\002\000\004\032\u0119\001\002\000\014\002\ufffa" +
    "\004\ufffa\042\ufffa\043\ufffa\044\ufffa\001\002\000\004\032" +
    "\u0123\001\002\000\012\005\037\035\035\040\036\061\u011e" +
    "\001\002\000\006\005\030\032\u011d\001\002\000\014\002" +
    "\ufffd\004\ufffd\042\ufffd\043\ufffd\044\ufffd\001\002\000\010" +
    "\005\uff9f\032\uff9f\040\u011f\001\002\000\020\041\uffa3\044" +
    "\uffa3\052\uffa3\053\uffa3\054\uffa3\055\uffa3\061\uffa3\001\002" +
    "\000\020\041\uff95\044\023\052\021\053\012\054\020\055" +
    "\022\061\015\001\002\000\004\041\u0122\001\002\000\004" +
    "\032\uffa2\001\002\000\014\002\ufffe\004\ufffe\042\ufffe\043" +
    "\ufffe\044\ufffe\001\002\000\014\002\001\004\001\042\001" +
    "\043\001\044\001\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0123\000\006\003\003\004\010\001\001\000\004\004" +
    "\u0123\001\001\000\012\006\u011b\010\u0119\026\u011a\027\012" +
    "\001\001\000\002\001\001\000\004\002\102\001\001\000" +
    "\010\006\016\026\015\027\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\025\001\001\000\002\001\001\000\004\027\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\031\046\001\001\000\012\005\047\011\050\026\051" +
    "\027\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\005\062\011\050\026\051\027\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\032\057\001\001\000\012\005\060\011\050" +
    "\026\051\027\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\005\065" +
    "\011\050\026\051\027\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\006\071\007\070\026\015\027\012" +
    "\001\001\000\010\006\073\026\015\027\012\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\022\104\024\110\001\001" +
    "\000\002\001\001\000\004\024\u0113\001\001\000\012\012" +
    "\135\013\146\020\142\021\141\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\131\001\001\000\002\001" +
    "\001\000\004\024\130\001\001\000\004\024\127\001\001" +
    "\000\006\023\121\024\117\001\001\000\004\024\115\001" +
    "\001\000\002\001\001\000\004\024\117\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\012\135\013\146" +
    "\020\337\025\u0112\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\012\135\013\146\020\336\025\u0111\001\001" +
    "\000\012\012\135\013\146\020\335\025\u0110\001\001\000" +
    "\012\012\135\013\146\020\334\025\u010f\001\001\000\002" +
    "\001\001\000\010\015\u0104\016\u0102\017\u0101\001\001\000" +
    "\002\001\001\000\010\012\135\013\146\020\374\001\001" +
    "\000\012\012\135\013\146\020\333\025\373\001\001\000" +
    "\002\001\001\000\012\012\135\013\146\020\332\025\372" +
    "\001\001\000\010\012\240\013\146\020\340\001\001\000" +
    "\012\012\135\013\146\020\157\025\153\001\001\000\010" +
    "\012\135\013\146\020\337\001\001\000\002\001\001\000" +
    "\010\012\135\013\146\020\336\001\001\000\010\012\135" +
    "\013\146\020\335\001\001\000\010\012\135\013\146\020" +
    "\334\001\001\000\002\001\001\000\010\012\135\013\146" +
    "\020\333\001\001\000\010\012\135\013\146\020\332\001" +
    "\001\000\010\012\240\013\146\020\244\001\001\000\010" +
    "\012\135\013\146\020\157\001\001\000\006\012\166\013" +
    "\146\001\001\000\010\012\135\013\146\020\235\001\001" +
    "\000\002\001\001\000\010\012\135\013\146\020\210\001" +
    "\001\000\010\012\135\013\146\020\206\001\001\000\010" +
    "\012\135\013\146\020\204\001\001\000\010\012\135\013" +
    "\146\020\202\001\001\000\010\012\135\013\146\020\200" +
    "\001\001\000\006\012\166\013\146\001\001\000\010\012" +
    "\135\013\146\020\176\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\234\001\001\000\010\012\135\013\146\020\231\001" +
    "\001\000\004\013\221\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\012\135\013\146\014" +
    "\224\020\142\021\223\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\012\135\013\146\020" +
    "\142\021\230\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\012\135\013\146\020\331\001\001\000\002\001\001\000" +
    "\010\012\135\013\146\020\330\001\001\000\010\012\135" +
    "\013\146\020\327\001\001\000\010\012\135\013\146\020" +
    "\326\001\001\000\010\015\301\016\275\017\263\001\001" +
    "\000\010\012\135\013\146\020\254\001\001\000\010\012" +
    "\135\013\146\020\253\001\001\000\010\012\135\013\146" +
    "\020\252\001\001\000\010\012\135\013\146\020\251\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\012\135\013\146\020\142\021" +
    "\256\001\001\000\002\001\001\000\012\012\135\013\146" +
    "\020\142\021\260\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\012\135\013\146\020\320" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\012\135\013\146\020\142\021\316\001\001\000\012" +
    "\012\135\013\146\020\142\021\312\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\012\135\013\146\020\142" +
    "\021\310\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\012\135\013\146\020\142\021\314\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\012\135\013\146" +
    "\020\142\021\322\001\001\000\002\001\001\000\012\012" +
    "\135\013\146\020\142\021\324\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\015\353\016\352\017\350" +
    "\001\001\000\010\012\135\013\146\020\342\001\001\000" +
    "\002\001\001\000\012\012\135\013\146\020\142\021\344" +
    "\001\001\000\002\001\001\000\012\012\135\013\146\020" +
    "\142\021\346\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\012\135\013\146\020\364\001\001\000\012\012" +
    "\135\013\146\020\142\021\360\001\001\000\012\012\135" +
    "\013\146\020\142\021\356\001\001\000\012\012\135\013" +
    "\146\020\142\021\354\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\012\135\013\146\020\142\021\362\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\012\135\013\146\020\142\021\366\001\001\000\002" +
    "\001\001\000\012\012\135\013\146\020\142\021\370\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\012\135\013" +
    "\146\020\142\021\376\001\001\000\002\001\001\000\012" +
    "\012\135\013\146\020\142\021\u0100\001\001\000\002\001" +
    "\001\000\010\012\135\013\146\020\u010a\001\001\000\012" +
    "\012\135\013\146\020\142\021\u0109\001\001\000\012\012" +
    "\135\013\146\020\142\021\u0106\001\001\000\012\012\135" +
    "\013\146\020\142\021\u0105\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\012\135\013\146\020\142\021\u0108" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\012\135\013\146\020\142\021\u010c\001\001" +
    "\000\002\001\001\000\012\012\135\013\146\020\142\021" +
    "\u010e\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\006\071\007\u0116\026\015" +
    "\027\012\001\001\000\010\006\073\026\015\027\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\030\u011f\001\001\000\012\005\u0120" +
    "\011\050\026\051\027\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



   
	public CodeGenerator cg = new CodeGenerator();

    public void report_error(String message, Object info) {
   
       
        StringBuilder m = new StringBuilder("Error");
   
        if (info instanceof java_cup.runtime.Symbol) {
     
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {                
                       m.append(" in line "+(s.left+1));   
     
                if (s.right >= 0)                    
                       m.append(", column "+(s.right+1));
            }
        }
   
        m.append(" : "+message);
   
        System.err.println(m);
    }
   
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // type ::= type STAR 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=t + "*"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // type ::= type LBRACKET NUMBER RBRACKET 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=t + "[" + n + "]"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // type ::= type LBRACKET RBRACKET 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT=t + "[]"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // type ::= pre_type 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // pre_type ::= CONST pre_type 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT="const" + p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_type",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // pre_type ::= UN_SIGNED pre_type 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT="signed" + " " + p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_type",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // pre_type ::= STRUCT ID 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= "struct " + i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_type",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // pre_type ::= LONG LONG 
            {
              String RESULT =null;
		 RESULT="long long"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_type",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // pre_type ::= LONG 
            {
              String RESULT =null;
		 RESULT="long"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_type",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // pre_type ::= SHORT 
            {
              String RESULT =null;
		 RESULT="short"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_type",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // pre_type ::= ID 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_type",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ident_funcpointer ::= type LPAREN STAR RPAREN LPAREN NT$2 params RPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String p4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ps2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ps2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ps2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			func_decl funcp = parser.cg.paramsowner;
			funcp.pointer = true;
			parser.cg.paramsowner = parser.cg.params_owners.pop();
			RESULT = funcp;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident_funcpointer",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // NT$2 ::= 
            {
              Object RESULT =null;
		int p4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String p4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

			func_decl funcp = new func_decl();
			funcp.pointer = true;
			funcp.setReturn_type(p4);
			parser.cg.params_owners.push(parser.cg.paramsowner);
			parser.cg.paramsowner = funcp;  
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // params ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // params ::= ident_funcpointer COMMA params 
            {
              Object RESULT =null;
		int p5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object p5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ps2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ps2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ps2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			parser.cg.paramsowner.pushParam(p5);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // params ::= ident_funcpointer 
            {
              Object RESULT =null;
		int p4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			parser.cg.paramsowner.pushParam(p4);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // params ::= type COMMA DOTS 
            {
              Object RESULT =null;
		int p3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
			parser.cg.paramsowner.pushParam(p3);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // params ::= type COMMA params 
            {
              Object RESULT =null;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int psright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ps = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			parser.cg.paramsowner.pushParam(p2);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // params ::= type 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			parser.cg.paramsowner.pushParam(p);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // defin ::= type LPAREN STAR ID RPAREN LPAREN NT$1 params RPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int i7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int i7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String i7 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int i8left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i8right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i8 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ps = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			func_decl funcp = parser.cg.paramsowner;
			funcp.pointer = true;
			parser.cg.var.setFuncpointer(funcp);
			parser.cg.paramsowner = parser.cg.params_owners.pop();
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("defin",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // NT$1 ::= 
            {
              Object RESULT =null;
		int i7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i7 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int i8left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i8right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i8 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 
			parser.cg.var.setType(i7+"*");
			parser.cg.var.setID(i8);
			func_decl funcp = new func_decl();
			funcp.setID(i8);
			funcp.setReturn_type(i7+"*");
			parser.cg.params_owners.push(parser.cg.paramsowner);
			parser.cg.paramsowner = funcp;  
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // defin ::= defin LBRACKET NUMBER RBRACKET 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			parser.cg.var.addArray(n);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("defin",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // defin ::= defin LBRACKET RBRACKET 
            {
              Object RESULT =null;
		
			parser.cg.var.addArray(0);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("defin",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // defin ::= type ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			parser.cg.var.setType(i);
			parser.cg.var.setID(i2);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("defin",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // st_body ::= st_body defin SEMI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
			parser.cg.struct.addMember(parser.cg.var);
		        parser.cg.var = new var_decl();  
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("st_body",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // st_body ::= defin SEMI 
            {
              Object RESULT =null;
		
			parser.cg.struct.addMember(parser.cg.var);
		        parser.cg.var = new var_decl(); 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("st_body",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // func ::= type ID LPAREN NT$0 params RPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
			RESULT = e + " " + e2 + "(" + p + ");"; 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // NT$0 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 
			parser.cg.func.setReturn_type(e);
			parser.cg.func.setID(e2);
			parser.cg.paramsowner = parser.cg.func;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // macro ::= LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("macro",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // macro ::= LPAREN macro_params RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("macro",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // macro_params ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("macro_params",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // macro_params ::= macro_params COMMA ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("macro_params",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // args ::= exp3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // args ::= args COMMA exp3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // func_call ::= ID LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_call",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // func_call ::= ID LPAREN args RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_call",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // LogicalS ::= OR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalS",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // LogicalS ::= AND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalS",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // LogicalS ::= NOTEQUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalS",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // LogicalS ::= EQUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalS",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // LogicalS ::= GE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalS",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // LogicalS ::= GREATER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalS",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // LogicalS ::= LE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalS",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // LogicalS ::= LESS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalS",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // B2 ::= AMPERSAND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("B2",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // B2 ::= BAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("B2",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // B2 ::= HAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("B2",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // B2 ::= GG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("B2",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // B2 ::= LL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("B2",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Ar2 ::= MINUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ar2",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Ar2 ::= PLUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ar2",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Ar2 ::= PERCENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ar2",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Ar2 ::= DIVIDE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ar2",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Ar2 ::= ASSIGN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ar2",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // exp3 ::= exp2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // exp3 ::= MINUS exp3L 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // exp3 ::= PLUS exp3L 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // exp3 ::= PP exp3L 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // exp3 ::= MM exp3L 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // exp3 ::= STAR exp3L 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // exp3 ::= AMPERSAND exp3L 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // exp3 ::= TILDE exp3L 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // exp3 ::= LPAREN exp2 QUESTIONMARK exp3 COLON exp3 RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // exp3 ::= exp2 QUESTIONMARK exp3 COLON exp3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // exp3 ::= LPAREN BARDOT exp2 QUESTIONMARK exp3 COLON exp3 RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // exp3 ::= BARDOT exp2 QUESTIONMARK exp3 COLON exp3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exp3 ::= LPAREN exp2 LogicalS exp2 QUESTIONMARK exp3 COLON exp3 RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exp3 ::= exp2 LogicalS exp2 QUESTIONMARK exp3 COLON exp3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp3 ::= LPAREN exp2 B2 exp3 RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp3 ::= exp2 B2 exp3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp3 ::= LPAREN exp2 Ar2 exp3 RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp3 ::= exp2 Ar2 exp3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp3L ::= LPAREN exp2 QUESTIONMARK exp3 COLON exp3 RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3L",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp3L ::= LPAREN BARDOT exp2 QUESTIONMARK exp3 COLON exp3 RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3L",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp3L ::= LPAREN exp2 LogicalS exp2 QUESTIONMARK exp3 COLON exp3 RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3L",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp3L ::= LPAREN exp2 B2 exp3 RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3L",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp3L ::= LPAREN exp2 Ar2 exp3 RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3L",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp2 ::= exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp2 ::= LPAREN TILDE exp2 RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp2 ::= TILDE exp2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp2 ::= LPAREN AMPERSAND exp2 RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp2 ::= AMPERSAND exp2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exp2 ::= LPAREN STAR exp2 RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exp2 ::= STAR exp2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exp2 ::= LPAREN MM exp2 RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exp2 ::= MM exp2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exp2 ::= LPAREN PP exp2 RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exp2 ::= PP exp2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exp2 ::= LPAREN PLUS exp2 RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exp2 ::= PLUS exp2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // exp2 ::= LPAREN MINUS exp2 RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exp2 ::= MINUS exp2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp ::= LPAREN exp RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp ::= exp PP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // exp ::= exp MM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // exp ::= exp PREF ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // exp ::= exp PREF func_call 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // exp ::= exp DOT ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // exp ::= exp DOT func_call 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // exp ::= exp LBRACKET exp2 RBRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // exp ::= func_call 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // exp ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // exp ::= NUMBER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // def_value ::= LPAREN def_value RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_value",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // def_value ::= BARDOT def_value 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_value",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // def_value ::= STAR def_value 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_value",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // def_value ::= AMPERSAND def_value 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_value",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // def_value ::= MINUS def_value 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_value",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // def_value ::= PLUS def_value 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_value",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // def_value ::= NUMBER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_value",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // def_body ::= ID STRUCT ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			def_expr dx = new def_expr();
			dx.ID = i;
			dx.exp = v;
			dx.isStruct = true;
			parser.cg.defines.add(dx);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_body",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // def_body ::= ID macro exp3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_body",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // def_body ::= ID def_value 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_body",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // code_part ::= DEFINE def_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_part",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // code_part ::= STRUCT ID LQ st_body RQ SEMI 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
			parser.cg.struct.setName(i);
			parser.cg.declareStruct(); 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_part",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // code_part ::= TYPEDEF STRUCT LQ st_body RQ ID SEMI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.cg.declareTypedef_struct(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_part",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // code_part ::= TYPEDEF defin SEMI 
            {
              Object RESULT =null;
		int d2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.cg.declareTypedef_var(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_part",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // code_part ::= EXTERN defin SEMI 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.cg.declareVar(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_part",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // code_part ::= EXTERN func SEMI 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.cg.declareFunc(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_part",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= code_part 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= program code_part 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

