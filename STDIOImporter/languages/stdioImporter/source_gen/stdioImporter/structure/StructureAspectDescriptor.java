package stdioImporter.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {

  /*package*/ final ConceptDescriptor myConceptImportConfig = new ConceptDescriptorBuilder("stdioImporter.structure.ImportConfig", MetaIdFactory.conceptId(0x4552c9e5a3424299L, 0x8de1338d8e5679fcL, 0x35c2dbf6834d5c11L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(3873900481303385554L, "filename"), new ConceptDescriptorBuilder.Prop(233004638652571827L, "containingfolder")).properties("filename", "containingfolder").referenceDescriptors(new ConceptDescriptorBuilder.Ref(3873900481303386046L, "module", MetaIdFactory.conceptId(0x6d11763d483d4b2bL, 0x8efc09336c1b0001L, 0x54e261614fd1abc1L), false)).references("module").create();
  /*package*/ final ConceptDescriptor myConceptImportConfigs = new ConceptDescriptorBuilder("stdioImporter.structure.ImportConfigs", MetaIdFactory.conceptId(0x4552c9e5a3424299L, 0x8de1338d8e5679fcL, 0x35c2dbf6834d97caL)).super_("jetbrains.mps.lang.core.structure.BaseConcept").super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).childDescriptors(new ConceptDescriptorBuilder.Link(3873900481303386059L, "configs", MetaIdFactory.conceptId(0x4552c9e5a3424299L, 0x8de1338d8e5679fcL, 0x35c2dbf6834d5c11L), true, true, false)).children(new String[]{"configs"}, new boolean[]{true}).create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptImportConfig, myConceptImportConfigs);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0g, conceptFqName)) {
      case 0:
        return myConceptImportConfig;
      case 1:
        return myConceptImportConfigs;
      default:
        return null;
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0g = new String[]{"stdioImporter.structure.ImportConfig", "stdioImporter.structure.ImportConfigs"};
}
