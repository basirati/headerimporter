package stdioImporter.runtime;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import stdio_parser.Declaration;
import jetbrains.mps.internal.collections.runtime.Sequence;
import stdio_parser.ConditionalBlock;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import stdio_parser.Struct;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.AttributeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.IAttributeDescriptor;

public class VariabilityImporter {
  private void addToVariability(SNode feature, Iterable<Declaration> declarations) {
    for (Declaration declare : Sequence.fromIterable(declarations)) {
      if (declare instanceof ConditionalBlock) {
        ConditionalBlock cb = (ConditionalBlock) declare;
        SNode f = this.checkFeatureAvailability(feature, cb.getID());
        if (f == null) {
          f = SConceptOperations.createNewNode("com.mbeddr.cc.var.fm.structure.Feature", null);
          SPropertyOperations.set(f, "name", cb.getID());
          ListSequence.fromList(SLinkOperations.getTargets(feature, "children", true)).addElement(f);
        }
        this.addToVariability(f, cb.getBlock(true));
        this.addToVariability(f, cb.getBlock(false));
      } else if (declare instanceof Struct) {
        Struct str = (Struct) declare;
        this.addToVariability(feature, str.getDecs());
      }
    }
  }



  private SNode checkFeatureAvailability(SNode feature, String name) {
    for (SNode f : ListSequence.fromList(SLinkOperations.getTargets(feature, "children", true))) {
      if (SPropertyOperations.getString(f, "name").equals(name)) {
        return f;
      }
    }
    return null;
  }



  public void addVariabilitys(SNode vs, Iterable<Declaration> declarations) {
    SNode fm = SConceptOperations.createNewNode("com.mbeddr.cc.var.fm.structure.FeatureModel", null);
    SPropertyOperations.set(fm, "name", "IFDEFS");
    this.addToVariability(SLinkOperations.getTarget(fm, "root", true), declarations);
    ListSequence.fromList(SLinkOperations.getTargets(vs, "contents", true)).addElement(fm);
  }



  public void addPresenceCondition(SNode content) {
    SNode fc = SConceptOperations.createNewNode("com.mbeddr.cc.var.annotations.structure.FeatureCondition", null);
    SNode pc = SConceptOperations.createNewNode("com.mbeddr.cc.var.annotations.structure.PresenceCondition", null);
    SLinkOperations.setTarget(pc, "condition", fc, true);
    AttributeOperations.setAttribute(content, new IAttributeDescriptor.NodeAttribute("com.mbeddr.core.base.structure.VisibilityControllingAttribute"), pc);
  }



  public void addPresenceConditionToSMember(SNode content) {
    SNode fc = SConceptOperations.createNewNode("com.mbeddr.cc.var.annotations.structure.FeatureCondition", null);
    SNode pc = SConceptOperations.createNewNode("com.mbeddr.cc.var.annotations.structure.PresenceCondition", null);
    SLinkOperations.setTarget(pc, "condition", fc, true);
    AttributeOperations.setAttribute(content, new IAttributeDescriptor.NodeAttribute("com.mbeddr.core.base.structure.VisibilityControllingAttribute"), pc);
  }



}
