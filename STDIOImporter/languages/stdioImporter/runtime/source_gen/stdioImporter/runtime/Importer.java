package stdioImporter.runtime;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import stdio_parser.CodeGenerator;
import java.io.FileReader;
import java.io.File;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;

public class Importer {
  public static boolean doImport(SNode module, String filename) {
    try {
      CodeGenerator cg = ParserAdapter.Parse(new FileReader(new File(filename)));
      SNode gcd = SConceptOperations.createNewNode("com.mbeddr.core.modules.structure.GlobalConstantDeclaration", null);
      SNode nl = SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.NumberLiteral", null);
      if (cg == null) {
        SPropertyOperations.set(nl, "value", "khali");
      } else {
        SPropertyOperations.set(nl, "value", cg.getVars().get(0).getID());
      }
      SLinkOperations.setTarget(gcd, "value", nl, true);
      SPropertyOperations.set(gcd, "name", "ine");
      ListSequence.fromList(SLinkOperations.getTargets(module, "contents", true)).addElement(gcd);

    } catch (Exception e) {
      SNode gcd = SConceptOperations.createNewNode("com.mbeddr.core.modules.structure.GlobalConstantDeclaration", null);
      SNode nl = SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.NumberLiteral", null);
      SPropertyOperations.set(nl, "value", "rid");
      SLinkOperations.setTarget(gcd, "value", nl, true);
      SPropertyOperations.set(gcd, "name", e.getMessage());
      ListSequence.fromList(SLinkOperations.getTargets(module, "contents", true)).addElement(gcd);
      return false;
    }
    return true;
  }
}
