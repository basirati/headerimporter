package stdioImporter.runtime;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.Iterator;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;

public class Typer {
  public SNode buildType(String type, SNode module) {
    if (type.endsWith("*")) {
      int i = type.length() - type.indexOf("*") - 1;
      String basetype = type.substring(0, type.indexOf("*"));
      return this.makePointerType(this.buildType(basetype, module), i);
    }

    Iterable<SNode> typeDefs;
    typeDefs = ListSequence.fromList(SLinkOperations.getTargets(module, "contents", true)).ofType(SNode.class);
    {
      Iterator<SNode> t_it = Sequence.fromIterable(typeDefs).iterator();
      SNode t_var;
      while (t_it.hasNext()) {
        t_var = t_it.next();
        if (SPropertyOperations.getString(t_var, "name").equals(type)) {
          SNode tdt = SConceptOperations.createNewNode("com.mbeddr.core.udt.structure.TypeDefType", null);
          SLinkOperations.setTarget(tdt, "typeDef", t_var, false);
          return tdt;
        }
      }
    }
    Iterable<SNode> structTypes;
    structTypes = ListSequence.fromList(SLinkOperations.getTargets(module, "contents", true)).ofType(SNode.class);
    {
      Iterator<SNode> t_it = Sequence.fromIterable(structTypes).iterator();
      SNode t_var;
      while (t_it.hasNext()) {
        t_var = t_it.next();
        if (SPropertyOperations.getString(t_var, "name") == type) {
          SNode stt = SConceptOperations.createNewNode("com.mbeddr.core.udt.structure.StructType", null);
          SLinkOperations.setTarget(stt, "struct", t_var, false);
          return stt;
        }
      }
    }

    if (this.mapType(type) != null) {
      return this.mapType(type);
    } else {
      SNode tdef = SConceptOperations.createNewNode("com.mbeddr.core.udt.structure.TypeDef", null);
      SPropertyOperations.set(tdef, "name", type);
      SNode pt = SConceptOperations.createNewNode("com.mbeddr.core.pointers.structure.PointerType", null);
      SLinkOperations.setTarget(pt, "baseType", SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.VoidType", null), true);
      SLinkOperations.setTarget(tdef, "original", pt, true);
      ListSequence.fromList(SLinkOperations.getTargets(module, "contents", true)).addElement(tdef);
      SNode tdt = SConceptOperations.createNewNode("com.mbeddr.core.udt.structure.TypeDefType", null);
      SLinkOperations.setTarget(tdt, "typeDef", tdef, false);
      return tdt;
    }
  }



  private SNode makePointerType(SNode basetype, int n) {
    SNode ptype = SConceptOperations.createNewNode("com.mbeddr.core.pointers.structure.PointerType", null);
    SLinkOperations.setTarget(ptype, "baseType", basetype, true);
    for (int i = 0; i < n; i++) {
      SNode temp = ptype;
      ptype = SConceptOperations.createNewNode("com.mbeddr.core.pointers.structure.PointerType", null);
      SLinkOperations.setTarget(ptype, "baseType", temp, true);
    }
    return ptype;
  }

  private SNode mapType(String type) {
    if (type.startsWith("const")) {
      type = type.substring(6);
    }
    if (type.startsWith("int")) {
      return SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.IntType", null);
    } else if (type.startsWith("unsigned int")) {
      return SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.UnsignedIntType", null);
    } else if (type.startsWith("unsigned long")) {
      return SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.UnsignedLongType", null);
    } else if (type.startsWith("long int")) {
      return SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.LongType", null);
    } else if (type.startsWith("long double")) {
      return SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.LongDoubleType", null);
    } else if (type.startsWith("short")) {
      return SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.ShortType", null);
    } else if (type.startsWith("long")) {
      return SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.LongType", null);
    } else if (type.startsWith("unsigned short")) {
      return SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.UnsignedShortType", null);
    } else if (type.startsWith("char")) {
      return SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.CharType", null);
    } else if (type.startsWith("unsigned char")) {
      return SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.UnsignedCharType", null);
    } else if (type.startsWith("void")) {
      return SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.VoidType", null);
    } else if (type.startsWith("int8_t")) {
      return SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.Int8tType", null);
    } else if (type.startsWith("int16_t")) {
      return SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.Int16tType", null);
    } else if (type.startsWith("int32_t")) {
      return SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.Int32tType", null);
    } else if (type.startsWith("float")) {
      return SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.FloatType", null);
    } else if (type.startsWith("double")) {
      return SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.DoubleType", null);
    }
    return null;
  }




}
