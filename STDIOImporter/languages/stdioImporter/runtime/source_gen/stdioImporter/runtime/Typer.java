package stdioImporter.runtime;

/*Generated by MPS */

import java.util.Map;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;

public class Typer {
  private static Map<String, SNode> types = MapSequence.fromMap(new HashMap<String, SNode>());

  public static SNode buildType(String type, Iterable<SNode> typedefs) {
    return MapSequence.fromMap(Typer.getTypes()).get(type);
  }

  private static Map<String, SNode> getTypes() {
    if (MapSequence.fromMap(Typer.types).isEmpty()) {

      MapSequence.fromMap(Typer.types).put("int", SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.IntType", null));
      MapSequence.fromMap(Typer.types).put("unsigned int", SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.UnsignedIntType", null));

      MapSequence.fromMap(Typer.types).put("char", SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.CharType", null));
      MapSequence.fromMap(Typer.types).put("unsigned char", SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.UnsignedCharType", null));

      MapSequence.fromMap(Typer.types).put("void", SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.VoidType", null));

      MapSequence.fromMap(Typer.types).put("int8_t", SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.Int8tType", null));
      MapSequence.fromMap(Typer.types).put("int16_t", SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.Int16tType", null));
      MapSequence.fromMap(Typer.types).put("int32_t", SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.Int32tType", null));

      MapSequence.fromMap(Typer.types).put("short", SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.ShortType", null));
      MapSequence.fromMap(Typer.types).put("unsigned short", SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.UnsignedShortType", null));


      MapSequence.fromMap(Typer.types).put("uint8_t", SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.UnsignedInt8tType", null));
      MapSequence.fromMap(Typer.types).put("uint16_t", SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.UnsignedInt16tType", null));
      MapSequence.fromMap(Typer.types).put("uint32_t", SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.UnsignedInt32tType", null));

      MapSequence.fromMap(Typer.types).put("size_t", SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.SizeT", null));

      MapSequence.fromMap(Typer.types).put("float", SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.FloatType", null));
      MapSequence.fromMap(Typer.types).put("double", SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.DoubleType", null));
    }

    return Typer.types;
  }



}
