package stdio_parser;
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Aug 10 18:18:44 CEST 2014
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Aug 10 18:18:44 CEST 2014
  */
public class parser extends lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(Scanner s, SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\052\000\002\003\004\000\002\002\004\000\002\003" +
    "\003\000\002\004\004\000\002\004\004\000\002\002\004" +
    "\000\002\002\005\000\002\005\004\000\002\005\004\000" +
    "\002\005\004\000\002\005\010\000\002\005\003\000\002" +
    "\020\002\000\002\014\010\000\002\012\007\000\002\013" +
    "\004\000\002\013\005\000\002\011\004\000\002\011\007" +
    "\000\002\011\006\000\002\021\002\000\002\011\013\000" +
    "\002\010\003\000\002\010\003\000\002\017\003\000\002" +
    "\016\003\000\002\016\005\000\002\016\004\000\002\006" +
    "\003\000\002\006\005\000\002\006\005\000\002\006\003" +
    "\000\002\006\005\000\002\006\002\000\002\022\002\000" +
    "\002\015\012\000\002\007\003\000\002\007\004\000\002" +
    "\007\005\000\002\007\004\000\002\007\005\000\002\007" +
    "\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\126\000\012\004\007\021\006\022\013\023\010\001" +
    "\002\000\004\011\ufff6\001\002\000\014\002\uffff\004\uffff" +
    "\021\uffff\022\uffff\023\uffff\001\002\000\010\010\015\023" +
    "\033\027\014\001\002\000\004\027\114\001\002\000\004" +
    "\027\110\001\002\000\004\011\107\001\002\000\014\002" +
    "\106\004\007\021\006\022\013\023\010\001\002\000\010" +
    "\010\015\023\016\027\014\001\002\000\016\005\uffdd\014" +
    "\uffdd\016\uffdd\017\uffdd\020\uffdd\027\uffdd\001\002\000\006" +
    "\010\103\027\102\001\002\000\006\024\072\027\054\001" +
    "\002\000\012\005\024\014\022\017\023\027\021\001\002" +
    "\000\004\011\ufff8\001\002\000\006\005\055\011\ufff0\001" +
    "\002\000\016\005\uffda\014\uffda\016\uffda\017\uffda\020\uffda" +
    "\027\uffda\001\002\000\004\014\026\001\002\000\004\006" +
    "\025\001\002\000\016\005\uffd9\014\uffd9\016\uffd9\017\uffd9" +
    "\020\uffd9\027\uffd9\001\002\000\004\027\027\001\002\000" +
    "\004\020\030\001\002\000\004\017\031\001\002\000\012" +
    "\010\uffed\020\uffed\023\uffed\027\uffed\001\002\000\012\010" +
    "\015\020\uffe0\023\033\027\014\001\002\000\004\027\054" +
    "\001\002\000\014\005\024\014\022\016\042\017\043\020" +
    "\uffe5\001\002\000\004\020\041\001\002\000\006\016\037" +
    "\020\uffe2\001\002\000\012\010\015\020\uffe0\023\033\027" +
    "\014\001\002\000\004\020\uffe1\001\002\000\004\011\uffec" +
    "\001\002\000\014\007\052\010\015\020\uffe0\023\033\027" +
    "\014\001\002\000\004\014\044\001\002\000\004\020\045" +
    "\001\002\000\004\017\046\001\002\000\012\010\uffdf\020" +
    "\uffdf\023\uffdf\027\uffdf\001\002\000\012\010\015\020\uffe0" +
    "\023\033\027\014\001\002\000\004\020\051\001\002\000" +
    "\006\016\uffde\020\uffde\001\002\000\004\020\uffe3\001\002" +
    "\000\004\020\uffe4\001\002\000\016\005\uffd8\014\uffd8\016" +
    "\uffd8\017\uffd8\020\uffd8\027\uffd8\001\002\000\014\006\060" +
    "\013\062\017\064\026\057\027\056\001\002\000\016\002" +
    "\uffe9\004\uffe9\006\uffe9\021\uffe9\022\uffe9\023\uffe9\001\002" +
    "\000\020\002\uffe8\004\uffe8\006\uffe8\020\uffe8\021\uffe8\022" +
    "\uffe8\023\uffe8\001\002\000\004\011\uffee\001\002\000\016" +
    "\002\uffeb\004\uffeb\006\uffeb\021\uffeb\022\uffeb\023\uffeb\001" +
    "\002\000\010\013\062\017\064\026\057\001\002\000\004" +
    "\006\070\001\002\000\010\013\062\017\064\026\057\001" +
    "\002\000\016\002\uffea\004\uffea\006\uffea\021\uffea\022\uffea" +
    "\023\uffea\001\002\000\004\020\067\001\002\000\020\002" +
    "\uffe7\004\uffe7\006\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7" +
    "\001\002\000\004\011\uffef\001\002\000\020\002\uffe6\004" +
    "\uffe6\006\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\001\002" +
    "\000\010\010\015\023\033\027\014\001\002\000\012\010" +
    "\015\023\033\025\076\027\014\001\002\000\004\011\075" +
    "\001\002\000\012\010\ufff2\023\ufff2\025\ufff2\027\ufff2\001" +
    "\002\000\004\027\101\001\002\000\004\011\100\001\002" +
    "\000\012\010\ufff1\023\ufff1\025\ufff1\027\ufff1\001\002\000" +
    "\004\011\ufff7\001\002\000\016\005\uffdc\014\uffdc\016\uffdc" +
    "\017\uffdc\020\uffdc\027\uffdc\001\002\000\004\027\104\001" +
    "\002\000\016\005\uffdb\014\uffdb\016\uffdb\017\uffdb\020\uffdb" +
    "\027\uffdb\001\002\000\014\002\001\004\001\021\001\022" +
    "\001\023\001\001\002\000\004\002\000\001\002\000\014" +
    "\002\ufffe\004\ufffe\021\ufffe\022\ufffe\023\ufffe\001\002\000" +
    "\004\024\111\001\002\000\010\010\015\023\033\027\014" +
    "\001\002\000\012\010\015\023\033\025\113\027\014\001" +
    "\002\000\004\011\ufff3\001\002\000\014\013\062\017\064" +
    "\023\116\026\057\027\056\001\002\000\014\002\ufffd\004" +
    "\ufffd\021\ufffd\022\ufffd\023\ufffd\001\002\000\004\027\056" +
    "\001\002\000\014\002\ufffc\004\ufffc\021\ufffc\022\ufffc\023" +
    "\ufffc\001\002\000\014\002\ufffb\004\ufffb\021\ufffb\022\ufffb" +
    "\023\ufffb\001\002\000\004\011\ufffa\001\002\000\012\005" +
    "\024\014\022\017\023\027\124\001\002\000\004\011\ufff9" +
    "\001\002\000\010\005\055\011\ufff0\017\125\001\002\000" +
    "\012\010\ufff5\020\ufff5\023\ufff5\027\ufff5\001\002\000\012" +
    "\010\015\020\uffe0\023\033\027\014\001\002\000\004\020" +
    "\130\001\002\000\004\011\ufff4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\126\000\012\003\011\004\004\005\010\012\003\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\007\121" +
    "\011\122\014\120\001\001\000\004\002\114\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\004\104\005\010" +
    "\012\003\001\001\000\006\007\016\011\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\021\031\001\001\000\010\006\034\007\033\015\035" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\006\037\007\033\015\035" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\006" +
    "\052\007\033\015\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\046\001\001\000" +
    "\010\006\047\007\033\015\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\010\062\016\064\017\060\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\070\001\001\000\002\001\001" +
    "\000\004\016\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\007\016\011\073\013\072\001\001\000\006\007" +
    "\016\011\076\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\007\016\011\073\013\111" +
    "\001\001\000\006\007\016\011\076\001\001\000\002\001" +
    "\001\000\010\010\116\016\064\017\060\001\001\000\002" +
    "\001\001\000\004\017\117\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\125\001\001\000" +
    "\010\006\126\007\033\015\035\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public Symbol do_action(
    int                        act_num,
    lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



   
	public CodeGenerator cg = new CodeGenerator();

    public void report_error(String message, Object info) {
   
       
        StringBuilder m = new StringBuilder("Error");
   
        if (info instanceof Symbol) {
     
            Symbol s = ((Symbol) info);

            if (s.left >= 0) {                
                       m.append(" in line "+(s.left+1));   
     
                if (s.right >= 0)                    
                       m.append(", column "+(s.right+1));
            }
        }
   
        m.append(" : "+message);
   
        System.err.println(m);
    }
   
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws Exception
    {
      /* Symbol object for return from actions */
      Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ident ::= STRUCT ID 
            {
              Object RESULT =null;
		int ileft = ((Symbol)CUP$parser$stack.peek()).left;
		int iright = ((Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "struct " + i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident",5, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ident ::= ident LBRACKET RBRACKET 
            {
              Object RESULT =null;
		int ileft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object i = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = i + "[]"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident",5, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ident ::= ident STAR 
            {
              Object RESULT =null;
		int ileft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = i + "*"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident",5, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ident ::= PRE_ID PRE_ID ID 
            {
              Object RESULT =null;
		int ileft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object i = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int i2left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int i2right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i2 = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int i3left = ((Symbol)CUP$parser$stack.peek()).left;
		int i3right = ((Symbol)CUP$parser$stack.peek()).right;
		String i3 = (String)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i + " " + i2 + " " + i3; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident",5, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ident ::= PRE_ID ID 
            {
              Object RESULT =null;
		int ileft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int i2left = ((Symbol)CUP$parser$stack.peek()).left;
		int i2right = ((Symbol)CUP$parser$stack.peek()).right;
		String i2 = (String)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i + " " + i2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident",5, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ident ::= ID 
            {
              Object RESULT =null;
		int ileft = ((Symbol)CUP$parser$stack.peek()).left;
		int iright = ((Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident",5, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ident_funcpointer ::= ident LPAREN STAR RPAREN LPAREN NT$2 params RPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p4left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p4right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object p4 = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ps2left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ps2right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ps2 = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			func_decl funcp = parser.cg.paramsowner;
			funcp.pointer = true;
			parser.cg.paramsowner = parser.cg.params_owners.pop();
			RESULT = funcp;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident_funcpointer",11, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$2 ::= 
            {
              Object RESULT =null;
		int p4left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p4right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object p4 = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

			func_decl funcp = new func_decl();
			funcp.pointer = true;
			funcp.setReturn_type(p4);
			parser.cg.params_owners.push(parser.cg.paramsowner);
			parser.cg.paramsowner = funcp;  
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",16, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // params ::= 
            {
              Object RESULT =null;
		 RESULT = ""; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",4, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // params ::= ident_funcpointer COMMA params 
            {
              Object RESULT =null;
		int p5left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p5right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object p5 = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ps2left = ((Symbol)CUP$parser$stack.peek()).left;
		int ps2right = ((Symbol)CUP$parser$stack.peek()).right;
		Object ps2 = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 
			parser.cg.paramsowner.pushParam(p5);
			RESULT = p5 + " , " + ps2; 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",4, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // params ::= ident_funcpointer 
            {
              Object RESULT =null;
		int p4left = ((Symbol)CUP$parser$stack.peek()).left;
		int p4right = ((Symbol)CUP$parser$stack.peek()).right;
		Object p4 = (Object)((Symbol) CUP$parser$stack.peek()).value;
		
			parser.cg.paramsowner.pushParam(p4);
			RESULT = p4; 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",4, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // params ::= ident COMMA DOTS 
            {
              Object RESULT =null;
		int p3left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p3right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object p3 = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
			parser.cg.paramsowner.pushParam(p3);
			 RESULT = p3; 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",4, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // params ::= ident COMMA params 
            {
              Object RESULT =null;
		int p2left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p2right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object p2 = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int psleft = ((Symbol)CUP$parser$stack.peek()).left;
		int psright = ((Symbol)CUP$parser$stack.peek()).right;
		Object ps = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 
			parser.cg.paramsowner.pushParam(p2);
			RESULT = p2 + " , " + ps; 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",4, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // params ::= ident 
            {
              Object RESULT =null;
		int pleft = ((Symbol)CUP$parser$stack.peek()).left;
		int pright = ((Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 
			parser.cg.paramsowner.pushParam(p);
			RESULT = p; 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",4, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // val_int ::= MINUS val_int 
            {
              Integer RESULT =null;
		int vleft = ((Symbol)CUP$parser$stack.peek()).left;
		int vright = ((Symbol)CUP$parser$stack.peek()).right;
		Integer v = (Integer)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT = -v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("val_int",12, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // val_int ::= LPAREN val_int RPAREN 
            {
              Integer RESULT =null;
		int vleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer v = (Integer)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("val_int",12, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // val_int ::= NUMBER 
            {
              Integer RESULT =null;
		int nleft = ((Symbol)CUP$parser$stack.peek()).left;
		int nright = ((Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("val_int",12, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // val_str ::= ID 
            {
              String RESULT =null;
		int ileft = ((Symbol)CUP$parser$stack.peek()).left;
		int iright = ((Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("val_str",13, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // value ::= val_int 
            {
              Object RESULT =null;
		int vleft = ((Symbol)CUP$parser$stack.peek()).left;
		int vright = ((Symbol)CUP$parser$stack.peek()).right;
		Integer v = (Integer)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",6, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // value ::= val_str 
            {
              Object RESULT =null;
		int vleft = ((Symbol)CUP$parser$stack.peek()).left;
		int vright = ((Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",6, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // defin ::= ident LPAREN STAR ID RPAREN LPAREN NT$1 params RPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int i7left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int i7right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object i7 = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int i8left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i8right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i8 = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int psleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int psright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ps = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			func_decl funcp = parser.cg.paramsowner;
			funcp.pointer = true;
			parser.cg.dec.push(funcp);
			parser.cg.paramsowner = parser.cg.params_owners.pop();
			RESULT = i7 + " (*" + i8 + ")(" + ps + ")"; 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("defin",7, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$1 ::= 
            {
              Object RESULT =null;
		int i7left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i7right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object i7 = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int i8left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i8right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i8 = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 
			parser.cg.dec.push(i7+"*");
			parser.cg.dec.push(i8);
			func_decl funcp = new func_decl();
			funcp.setID(i8);
			funcp.setReturn_type(i7+"*");
			parser.cg.params_owners.push(parser.cg.paramsowner);
			parser.cg.paramsowner = funcp;  
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",15, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // defin ::= ident ID LBRACKET RBRACKET 
            {
              Object RESULT =null;
		int i5left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i5right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object i5 = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int i6left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i6right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i6 = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
			parser.cg.dec.push(i5);
			parser.cg.dec.push(i6);
			parser.cg.dec.push("[]");
			RESULT = i5 + " " + i6 + "[]"; 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("defin",7, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // defin ::= ident ID LBRACKET value RBRACKET 
            {
              Object RESULT =null;
		int i3left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int i3right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object i3 = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int i4left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i4right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i4 = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
			parser.cg.dec.push(i3);
			parser.cg.dec.push(i4);
			parser.cg.dec.push("["+v+"]");
			RESULT = i3 + " " + i4 + "[" + v + "]"; 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("defin",7, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // defin ::= ident ID 
            {
              Object RESULT =null;
		int ileft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int i2left = ((Symbol)CUP$parser$stack.peek()).left;
		int i2right = ((Symbol)CUP$parser$stack.peek()).right;
		String i2 = (String)((Symbol) CUP$parser$stack.peek()).value;
		 
			parser.cg.dec.push(i);
			parser.cg.dec.push(i2);
			parser.cg.dec.push("");
			RESULT = i + " " + i2; 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("defin",7, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // st_body ::= st_body defin SEMI 
            {
              Object RESULT =null;
		int sleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int d2left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int d2right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d2 = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			parser.cg.s.addMember(parser.cg.dec);
		        parser.cg.dec = new var_decl();  
			RESULT = s + "\n" + d2 + ";" ; 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("st_body",9, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // st_body ::= defin SEMI 
            {
              Object RESULT =null;
		int dleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			parser.cg.s.addMember(parser.cg.dec);
		        parser.cg.dec = new var_decl(); 
			RESULT = d + ";"; 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("st_body",9, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // _struct ::= STRUCT ID LQ st_body RQ 
            {
              Object RESULT =null;
		int ileft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
			parser.cg.s.setName(i);
			RESULT = "struct " + i + "{" + "\n" + s + "\n" + "};"; 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("_struct",8, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // func ::= ident ID LPAREN NT$0 params RPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e2 = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
			RESULT = e + " " + e2 + "(" + p + ");"; 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func",10, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$0 ::= 
            {
              Object RESULT =null;
		int eleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 
			parser.cg.f.setReturn_type(e);
			parser.cg.f.setID(e2);
			parser.cg.paramsowner = parser.cg.f;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",14, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expr ::= _struct 
            {
              Object RESULT =null;
		int sleft = ((Symbol)CUP$parser$stack.peek()).left;
		int sright = ((Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 parser.cg.declareStruct(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expr ::= TYPEDEF STRUCT LQ st_body RQ ID 
            {
              Object RESULT =null;
		int sleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((Symbol)CUP$parser$stack.peek()).left;
		int iright = ((Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((Symbol) CUP$parser$stack.peek()).value;
		 parser.cg.declareTypedef_struct(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr ::= TYPEDEF defin 
            {
              Object RESULT =null;
		int d2left = ((Symbol)CUP$parser$stack.peek()).left;
		int d2right = ((Symbol)CUP$parser$stack.peek()).right;
		Object d2 = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 parser.cg.declareTypedef_var(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr ::= EXTERN defin 
            {
              Object RESULT =null;
		int dleft = ((Symbol)CUP$parser$stack.peek()).left;
		int dright = ((Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 parser.cg.declareVar(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= EXTERN func 
            {
              Object RESULT =null;
		int fleft = ((Symbol)CUP$parser$stack.peek()).left;
		int fright = ((Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 parser.cg.declareFunc(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // def_exp ::= ID STRUCT val_str 
            {
              Object RESULT =null;
		int ileft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((Symbol)CUP$parser$stack.peek()).left;
		int vright = ((Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((Symbol) CUP$parser$stack.peek()).value;
		
			def_expr dx = new def_expr();
			dx.ID = i;
			dx.exp = v;
			dx.isStruct = true;
			parser.cg.defines.add(dx);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_exp",0, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // def_exp ::= ID value 
            {
              Object RESULT =null;
		int ileft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vleft = ((Symbol)CUP$parser$stack.peek()).left;
		int vright = ((Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((Symbol) CUP$parser$stack.peek()).value;
		
			def_expr dx = new def_expr();
			dx.ID = i;
			dx.exp = v;
			parser.cg.defines.add(dx);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_exp",0, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr_part ::= DEFINE def_exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_part",2, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expr_part ::= expr SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_part",2, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr_list ::= expr_part 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_list",1, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= expr_list EOF 
            {
              Object RESULT =null;
		int start_valleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // expr_list ::= expr_list expr_part 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_list",1, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

