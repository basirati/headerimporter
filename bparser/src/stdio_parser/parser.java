package stdio_parser;
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Oct 09 11:38:58 CEST 2014
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Oct 09 11:38:58 CEST 2014
  */
public class parser extends lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(Scanner s, SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\156\000\002\003\004\000\002\002\004\000\002\003" +
    "\003\000\002\004\005\000\002\004\005\000\002\004\005" +
    "\000\002\004\011\000\002\004\010\000\002\004\004\000" +
    "\002\002\004\000\002\002\005\000\002\002\005\000\002" +
    "\024\003\000\002\024\004\000\002\024\004\000\002\024" +
    "\004\000\002\024\004\000\002\024\004\000\002\024\005" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\006\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\004\000\002\012" +
    "\004\000\002\012\005\000\002\020\004\000\002\020\006" +
    "\000\002\020\004\000\002\020\006\000\002\020\004\000" +
    "\002\020\006\000\002\020\004\000\002\020\006\000\002" +
    "\020\004\000\002\020\006\000\002\020\004\000\002\020" +
    "\006\000\002\020\004\000\002\020\006\000\002\020\003" +
    "\000\002\021\005\000\002\021\007\000\002\021\005\000" +
    "\002\021\007\000\002\021\011\000\002\021\013\000\002" +
    "\021\010\000\002\021\012\000\002\021\007\000\002\021" +
    "\011\000\002\021\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\013\006\000\002\013\005\000\002\014\005\000\002" +
    "\014\003\000\002\023\005\000\002\023\003\000\002\022" +
    "\005\000\002\022\004\000\002\027\002\000\002\010\010" +
    "\000\002\007\004\000\002\007\005\000\002\006\004\000" +
    "\002\006\005\000\002\006\006\000\002\030\002\000\002" +
    "\006\013\000\002\005\003\000\002\005\005\000\002\005" +
    "\005\000\002\005\003\000\002\005\005\000\002\005\002" +
    "\000\002\031\002\000\002\011\012\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\004\000\002" +
    "\026\004\000\002\026\004\000\002\026\004\000\002\025" +
    "\003\000\002\025\005\000\002\025\006\000\002\025\004" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\372\000\012\004\007\042\005\043\010\044\006\001" +
    "\002\000\014\002\374\004\007\042\005\043\010\044\006" +
    "\001\002\000\016\044\023\052\021\053\012\054\020\055" +
    "\022\061\015\001\002\000\004\061\354\001\002\000\004" +
    "\061\102\001\002\000\016\044\014\052\021\053\012\054" +
    "\020\055\022\061\015\001\002\000\014\002\uffff\004\uffff" +
    "\042\uffff\043\uffff\044\uffff\001\002\000\020\005\uff9c\035" +
    "\uff9c\037\uff9c\040\uff9c\041\uff9c\053\101\061\uff9c\001\002" +
    "\000\016\005\uff97\035\uff97\037\uff97\040\uff97\041\uff97\061" +
    "\uff97\001\002\000\006\045\070\061\025\001\002\000\016" +
    "\005\uff9e\035\uff9e\037\uff9e\040\uff9e\041\uff9e\061\uff9e\001" +
    "\002\000\012\005\037\035\035\040\036\061\034\001\002" +
    "\000\006\005\030\032\027\001\002\000\016\044\023\052" +
    "\021\053\012\054\020\055\022\061\015\001\002\000\016" +
    "\005\uff9d\035\uff9d\037\uff9d\040\uff9d\041\uff9d\061\uff9d\001" +
    "\002\000\016\044\023\052\021\053\012\054\020\055\022" +
    "\061\015\001\002\000\004\061\025\001\002\000\016\005" +
    "\uff98\035\uff98\037\uff98\040\uff98\041\uff98\061\uff98\001\002" +
    "\000\016\005\uff9a\035\uff9a\037\uff9a\040\uff9a\041\uff9a\061" +
    "\uff9a\001\002\000\016\005\uff99\035\uff99\037\uff99\040\uff99" +
    "\041\uff99\061\uff99\001\002\000\014\002\ufffc\004\ufffc\042" +
    "\ufffc\043\ufffc\044\ufffc\001\002\000\006\006\032\060\031" +
    "\001\002\000\004\006\033\001\002\000\006\005\uffaa\032" +
    "\uffaa\001\002\000\006\005\uffa9\032\uffa9\001\002\000\006" +
    "\005\uffab\032\uffab\001\002\000\016\005\uff94\035\uff94\037" +
    "\uff94\040\uff94\041\uff94\061\uff94\001\002\000\004\035\043" +
    "\001\002\000\006\006\040\060\041\001\002\000\016\005" +
    "\uff96\035\uff96\037\uff96\040\uff96\041\uff96\061\uff96\001\002" +
    "\000\004\006\042\001\002\000\016\005\uff95\035\uff95\037" +
    "\uff95\040\uff95\041\uff95\061\uff95\001\002\000\004\061\044" +
    "\001\002\000\004\041\045\001\002\000\004\040\046\001" +
    "\002\000\020\041\uffa8\044\uffa8\052\uffa8\053\uffa8\054\uffa8" +
    "\055\uffa8\061\uffa8\001\002\000\020\041\uffa1\044\023\052" +
    "\021\053\012\054\020\055\022\061\015\001\002\000\004" +
    "\041\067\001\002\000\006\037\065\041\uffa3\001\002\000" +
    "\014\005\037\035\035\037\053\040\054\041\uffa6\001\002" +
    "\000\022\011\064\041\uffa1\044\023\052\021\053\012\054" +
    "\020\055\022\061\015\001\002\000\004\035\055\001\002" +
    "\000\004\041\056\001\002\000\004\040\057\001\002\000" +
    "\020\041\uffa0\044\uffa0\052\uffa0\053\uffa0\054\uffa0\055\uffa0" +
    "\061\uffa0\001\002\000\020\041\uffa1\044\023\052\021\053" +
    "\012\054\020\055\022\061\015\001\002\000\004\041\062" +
    "\001\002\000\006\037\uff9f\041\uff9f\001\002\000\004\041" +
    "\uffa5\001\002\000\004\041\uffa4\001\002\000\020\041\uffa1" +
    "\044\023\052\021\053\012\054\020\055\022\061\015\001" +
    "\002\000\004\041\uffa2\001\002\000\006\005\uffa7\032\uffa7" +
    "\001\002\000\016\044\023\052\021\053\012\054\020\055" +
    "\022\061\015\001\002\000\020\044\023\046\075\052\021" +
    "\053\012\054\020\055\022\061\015\001\002\000\006\005" +
    "\030\032\073\001\002\000\020\044\uffad\046\uffad\052\uffad" +
    "\053\uffad\054\uffad\055\uffad\061\uffad\001\002\000\006\005" +
    "\030\032\100\001\002\000\004\061\076\001\002\000\004" +
    "\032\077\001\002\000\014\002\ufffb\004\ufffb\042\ufffb\043" +
    "\ufffb\044\ufffb\001\002\000\020\044\uffac\046\uffac\052\uffac" +
    "\053\uffac\054\uffac\055\uffac\061\uffac\001\002\000\016\005" +
    "\uff9b\035\uff9b\037\uff9b\040\uff9b\041\uff9b\061\uff9b\001\002" +
    "\000\022\013\113\033\112\034\104\035\110\040\114\044" +
    "\107\056\115\060\106\001\002\000\014\002\ufff9\004\ufff9" +
    "\042\ufff9\043\ufff9\044\ufff9\001\002\000\020\013\113\033" +
    "\112\034\104\035\110\040\117\056\115\060\106\001\002" +
    "\000\030\013\146\021\150\022\145\033\140\034\134\035" +
    "\137\040\151\056\152\057\141\060\135\061\144\001\002" +
    "\000\016\002\ufff5\004\ufff5\041\ufff5\042\ufff5\043\ufff5\044" +
    "\ufff5\001\002\000\004\061\133\001\002\000\020\013\113" +
    "\033\112\034\104\035\110\040\117\056\115\060\106\001" +
    "\002\000\014\002\ufff8\004\ufff8\042\ufff8\043\ufff8\044\ufff8" +
    "\001\002\000\020\013\113\033\112\034\104\035\110\040" +
    "\117\056\115\060\106\001\002\000\020\013\113\033\112" +
    "\034\104\035\110\040\117\056\115\060\106\001\002\000" +
    "\024\013\113\033\112\034\104\035\110\040\117\041\124" +
    "\056\115\060\106\061\123\001\002\000\020\013\113\033" +
    "\112\034\104\035\110\040\117\056\115\060\106\001\002" +
    "\000\016\002\ufff2\004\ufff2\041\ufff2\042\ufff2\043\ufff2\044" +
    "\ufff2\001\002\000\020\013\113\033\112\034\104\035\110" +
    "\040\117\056\115\060\106\001\002\000\004\041\121\001" +
    "\002\000\016\002\uffef\004\uffef\041\uffef\042\uffef\043\uffef" +
    "\044\uffef\001\002\000\006\037\125\041\126\001\002\000" +
    "\006\037\uffb2\041\uffb2\001\002\000\030\013\uffb0\021\uffb0" +
    "\022\uffb0\033\uffb0\034\uffb0\035\uffb0\040\uffb0\056\uffb0\057" +
    "\uffb0\060\uffb0\061\uffb0\001\002\000\004\061\127\001\002" +
    "\000\030\013\uffb1\021\uffb1\022\uffb1\033\uffb1\034\uffb1\035" +
    "\uffb1\040\uffb1\056\uffb1\057\uffb1\060\uffb1\061\uffb1\001\002" +
    "\000\006\037\uffb3\041\uffb3\001\002\000\016\002\ufff0\004" +
    "\ufff0\041\ufff0\042\ufff0\043\ufff0\044\ufff0\001\002\000\016" +
    "\002\ufff4\004\ufff4\041\ufff4\042\ufff4\043\ufff4\044\ufff4\001" +
    "\002\000\016\002\ufff1\004\ufff1\041\ufff1\042\ufff1\043\ufff1" +
    "\044\ufff1\001\002\000\014\002\ufff6\004\ufff6\042\ufff6\043" +
    "\ufff6\044\ufff6\001\002\000\026\021\150\022\145\033\140" +
    "\034\134\035\137\040\154\056\152\057\141\060\135\061" +
    "\144\001\002\000\104\002\uffee\004\uffee\005\uffee\006\uffee" +
    "\007\uffee\010\uffee\012\uffee\014\uffee\015\uffee\016\uffee\017" +
    "\uffee\020\uffee\021\uffee\022\uffee\023\uffee\024\uffee\025\uffee" +
    "\026\uffee\027\uffee\030\uffee\031\uffee\033\uffee\034\uffee\036" +
    "\uffee\037\uffee\041\uffee\042\uffee\043\uffee\044\uffee\047\uffee" +
    "\050\uffee\051\uffee\056\uffee\001\002\000\104\002\uffd5\004" +
    "\uffd5\005\205\006\uffd5\007\uffd5\010\206\012\uffd5\014\uffd5" +
    "\015\uffd5\016\uffd5\017\uffd5\020\204\021\207\022\202\023" +
    "\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5" +
    "\033\uffd5\034\uffd5\036\uffd5\037\uffd5\041\uffd5\042\uffd5\043" +
    "\uffd5\044\uffd5\047\uffd5\050\uffd5\051\uffd5\056\uffd5\001\002" +
    "\000\026\021\150\022\145\033\140\034\134\035\137\040" +
    "\154\056\152\057\141\060\135\061\144\001\002\000\026" +
    "\021\150\022\145\033\140\034\134\035\137\040\154\056" +
    "\152\057\141\060\135\061\144\001\002\000\026\021\150" +
    "\022\145\033\140\034\134\035\137\040\154\056\152\057" +
    "\141\060\135\061\144\001\002\000\014\002\ufff7\004\ufff7" +
    "\042\ufff7\043\ufff7\044\ufff7\001\002\000\070\002\uffca\004" +
    "\uffca\007\274\012\276\014\263\015\277\016\270\017\262" +
    "\023\271\024\266\025\252\026\256\027\261\030\257\031" +
    "\uffca\033\255\034\273\036\267\037\uffca\041\uffca\042\uffca" +
    "\043\uffca\044\uffca\047\254\050\260\051\333\056\275\001" +
    "\002\000\106\002\uffed\004\uffed\005\uffed\006\uffed\007\uffed" +
    "\010\uffed\012\uffed\014\uffed\015\uffed\016\uffed\017\uffed\020" +
    "\uffed\021\uffed\022\uffed\023\uffed\024\uffed\025\uffed\026\uffed" +
    "\027\uffed\030\uffed\031\uffed\033\uffed\034\uffed\036\uffed\037" +
    "\uffed\040\212\041\uffed\042\uffed\043\uffed\044\uffed\047\uffed" +
    "\050\uffed\051\uffed\056\uffed\001\002\000\026\021\150\022" +
    "\145\033\140\034\134\035\137\040\154\056\152\057\141" +
    "\060\135\061\144\001\002\000\026\021\150\022\145\033" +
    "\140\034\134\035\137\040\154\056\152\057\141\060\135" +
    "\061\144\001\002\000\104\002\uffec\004\uffec\005\uffec\006" +
    "\uffec\007\uffec\010\uffec\012\uffec\014\uffec\015\uffec\016\uffec" +
    "\017\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024\uffec\025" +
    "\uffec\026\uffec\027\uffec\030\uffec\031\uffec\033\uffec\034\uffec" +
    "\036\uffec\037\uffec\041\uffec\042\uffec\043\uffec\044\uffec\047" +
    "\uffec\050\uffec\051\uffec\056\uffec\001\002\000\026\021\150" +
    "\022\145\033\140\034\134\035\137\040\154\056\152\057" +
    "\141\060\135\061\144\001\002\000\030\013\236\021\237" +
    "\022\235\033\232\034\227\035\231\040\154\056\240\057" +
    "\233\060\135\061\144\001\002\000\026\021\150\022\145" +
    "\033\140\034\134\035\137\040\154\056\152\057\141\060" +
    "\135\061\144\001\002\000\072\002\uffd9\004\uffd9\006\uffd9" +
    "\007\uffd9\012\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\023" +
    "\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9" +
    "\033\uffd9\034\uffd9\036\uffd9\037\uffd9\041\uffd9\042\uffd9\043" +
    "\uffd9\044\uffd9\047\uffd9\050\uffd9\051\uffd9\056\uffd9\001\002" +
    "\000\026\021\163\022\162\033\160\034\155\035\157\040" +
    "\164\056\165\057\161\060\135\061\144\001\002\000\026" +
    "\021\150\022\145\033\140\034\134\035\137\040\154\056" +
    "\152\057\141\060\135\061\144\001\002\000\016\005\205" +
    "\010\206\020\204\021\207\022\202\041\203\001\002\000" +
    "\026\021\150\022\145\033\140\034\134\035\137\040\154" +
    "\056\152\057\141\060\135\061\144\001\002\000\026\021" +
    "\150\022\145\033\140\034\134\035\137\040\154\056\152" +
    "\057\141\060\135\061\144\001\002\000\026\021\150\022" +
    "\145\033\140\034\134\035\137\040\154\056\152\057\141" +
    "\060\135\061\144\001\002\000\026\021\150\022\145\033" +
    "\140\034\134\035\137\040\154\056\152\057\141\060\135" +
    "\061\144\001\002\000\026\021\150\022\145\033\140\034" +
    "\134\035\137\040\154\056\152\057\141\060\135\061\144" +
    "\001\002\000\010\040\164\060\135\061\144\001\002\000" +
    "\026\021\150\022\145\033\140\034\134\035\137\040\154" +
    "\056\152\057\141\060\135\061\144\001\002\000\004\041" +
    "\167\001\002\000\072\002\uffd8\004\uffd8\006\uffd8\007\uffd8" +
    "\012\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8\023\uffd8\024" +
    "\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\033\uffd8" +
    "\034\uffd8\036\uffd8\037\uffd8\041\uffd8\042\uffd8\043\uffd8\044" +
    "\uffd8\047\uffd8\050\uffd8\051\uffd8\056\uffd8\001\002\000\004" +
    "\041\171\001\002\000\072\002\uffdc\004\uffdc\006\uffdc\007" +
    "\uffdc\012\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc\023\uffdc" +
    "\024\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\033" +
    "\uffdc\034\uffdc\036\uffdc\037\uffdc\041\uffdc\042\uffdc\043\uffdc" +
    "\044\uffdc\047\uffdc\050\uffdc\051\uffdc\056\uffdc\001\002\000" +
    "\004\041\173\001\002\000\072\002\uffde\004\uffde\006\uffde" +
    "\007\uffde\012\uffde\014\uffde\015\uffde\016\uffde\017\uffde\023" +
    "\uffde\024\uffde\025\uffde\026\uffde\027\uffde\030\uffde\031\uffde" +
    "\033\uffde\034\uffde\036\uffde\037\uffde\041\uffde\042\uffde\043" +
    "\uffde\044\uffde\047\uffde\050\uffde\051\uffde\056\uffde\001\002" +
    "\000\004\041\175\001\002\000\072\002\uffd6\004\uffd6\006" +
    "\uffd6\007\uffd6\012\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6" +
    "\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031" +
    "\uffd6\033\uffd6\034\uffd6\036\uffd6\037\uffd6\041\uffd6\042\uffd6" +
    "\043\uffd6\044\uffd6\047\uffd6\050\uffd6\051\uffd6\056\uffd6\001" +
    "\002\000\004\041\177\001\002\000\072\002\uffe0\004\uffe0" +
    "\006\uffe0\007\uffe0\012\uffe0\014\uffe0\015\uffe0\016\uffe0\017" +
    "\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0" +
    "\031\uffe0\033\uffe0\034\uffe0\036\uffe0\037\uffe0\041\uffe0\042" +
    "\uffe0\043\uffe0\044\uffe0\047\uffe0\050\uffe0\051\uffe0\056\uffe0" +
    "\001\002\000\004\041\201\001\002\000\072\002\uffda\004" +
    "\uffda\006\uffda\007\uffda\012\uffda\014\uffda\015\uffda\016\uffda" +
    "\017\uffda\023\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030" +
    "\uffda\031\uffda\033\uffda\034\uffda\036\uffda\037\uffda\041\uffda" +
    "\042\uffda\043\uffda\044\uffda\047\uffda\050\uffda\051\uffda\056" +
    "\uffda\001\002\000\104\002\uffe5\004\uffe5\005\uffe5\006\uffe5" +
    "\007\uffe5\010\uffe5\012\uffe5\014\uffe5\015\uffe5\016\uffe5\017" +
    "\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5" +
    "\026\uffe5\027\uffe5\030\uffe5\031\uffe5\033\uffe5\034\uffe5\036" +
    "\uffe5\037\uffe5\041\uffe5\042\uffe5\043\uffe5\044\uffe5\047\uffe5" +
    "\050\uffe5\051\uffe5\056\uffe5\001\002\000\104\002\uffe4\004" +
    "\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4\012\uffe4\014\uffe4" +
    "\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023" +
    "\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4" +
    "\033\uffe4\034\uffe4\036\uffe4\037\uffe4\041\uffe4\042\uffe4\043" +
    "\uffe4\044\uffe4\047\uffe4\050\uffe4\051\uffe4\056\uffe4\001\002" +
    "\000\004\061\223\001\002\000\026\021\150\022\145\033" +
    "\140\034\134\035\137\040\154\056\152\057\141\060\135" +
    "\061\144\001\002\000\004\061\210\001\002\000\104\002" +
    "\uffe6\004\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6\012\uffe6" +
    "\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022" +
    "\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6" +
    "\031\uffe6\033\uffe6\034\uffe6\036\uffe6\037\uffe6\041\uffe6\042" +
    "\uffe6\043\uffe6\044\uffe6\047\uffe6\050\uffe6\051\uffe6\056\uffe6" +
    "\001\002\000\106\002\uffe9\004\uffe9\005\uffe9\006\uffe9\007" +
    "\uffe9\010\uffe9\012\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9" +
    "\020\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9\026" +
    "\uffe9\027\uffe9\030\uffe9\031\uffe9\033\uffe9\034\uffe9\036\uffe9" +
    "\037\uffe9\040\212\041\uffe9\042\uffe9\043\uffe9\044\uffe9\047" +
    "\uffe9\050\uffe9\051\uffe9\056\uffe9\001\002\000\104\002\uffea" +
    "\004\uffea\005\uffea\006\uffea\007\uffea\010\uffea\012\uffea\014" +
    "\uffea\015\uffea\016\uffea\017\uffea\020\uffea\021\uffea\022\uffea" +
    "\023\uffea\024\uffea\025\uffea\026\uffea\027\uffea\030\uffea\031" +
    "\uffea\033\uffea\034\uffea\036\uffea\037\uffea\041\uffea\042\uffea" +
    "\043\uffea\044\uffea\047\uffea\050\uffea\051\uffea\056\uffea\001" +
    "\002\000\032\013\146\021\150\022\145\033\140\034\134" +
    "\035\137\040\151\041\215\056\152\057\141\060\135\061" +
    "\144\001\002\000\006\037\uffb4\041\uffb4\001\002\000\006" +
    "\037\216\041\217\001\002\000\104\002\uffb6\004\uffb6\005" +
    "\uffb6\006\uffb6\007\uffb6\010\uffb6\012\uffb6\014\uffb6\015\uffb6" +
    "\016\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6\024" +
    "\uffb6\025\uffb6\026\uffb6\027\uffb6\030\uffb6\031\uffb6\033\uffb6" +
    "\034\uffb6\036\uffb6\037\uffb6\041\uffb6\042\uffb6\043\uffb6\044" +
    "\uffb6\047\uffb6\050\uffb6\051\uffb6\056\uffb6\001\002\000\030" +
    "\013\146\021\150\022\145\033\140\034\134\035\137\040" +
    "\151\056\152\057\141\060\135\061\144\001\002\000\104" +
    "\002\uffb7\004\uffb7\005\uffb7\006\uffb7\007\uffb7\010\uffb7\012" +
    "\uffb7\014\uffb7\015\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7" +
    "\022\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7\030" +
    "\uffb7\031\uffb7\033\uffb7\034\uffb7\036\uffb7\037\uffb7\041\uffb7" +
    "\042\uffb7\043\uffb7\044\uffb7\047\uffb7\050\uffb7\051\uffb7\056" +
    "\uffb7\001\002\000\006\037\uffb5\041\uffb5\001\002\000\004" +
    "\006\222\001\002\000\104\002\uffeb\004\uffeb\005\uffeb\006" +
    "\uffeb\007\uffeb\010\uffeb\012\uffeb\014\uffeb\015\uffeb\016\uffeb" +
    "\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb\025" +
    "\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb\033\uffeb\034\uffeb" +
    "\036\uffeb\037\uffeb\041\uffeb\042\uffeb\043\uffeb\044\uffeb\047" +
    "\uffeb\050\uffeb\051\uffeb\056\uffeb\001\002\000\106\002\uffe7" +
    "\004\uffe7\005\uffe7\006\uffe7\007\uffe7\010\uffe7\012\uffe7\014" +
    "\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7" +
    "\023\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7\031" +
    "\uffe7\033\uffe7\034\uffe7\036\uffe7\037\uffe7\040\212\041\uffe7" +
    "\042\uffe7\043\uffe7\044\uffe7\047\uffe7\050\uffe7\051\uffe7\056" +
    "\uffe7\001\002\000\104\002\uffe8\004\uffe8\005\uffe8\006\uffe8" +
    "\007\uffe8\010\uffe8\012\uffe8\014\uffe8\015\uffe8\016\uffe8\017" +
    "\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8" +
    "\026\uffe8\027\uffe8\030\uffe8\031\uffe8\033\uffe8\034\uffe8\036" +
    "\uffe8\037\uffe8\041\uffe8\042\uffe8\043\uffe8\044\uffe8\047\uffe8" +
    "\050\uffe8\051\uffe8\056\uffe8\001\002\000\004\041\226\001" +
    "\002\000\072\002\uffe2\004\uffe2\006\uffe2\007\uffe2\012\uffe2" +
    "\014\uffe2\015\uffe2\016\uffe2\017\uffe2\023\uffe2\024\uffe2\025" +
    "\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\033\uffe2\034\uffe2" +
    "\036\uffe2\037\uffe2\041\uffe2\042\uffe2\043\uffe2\044\uffe2\047" +
    "\uffe2\050\uffe2\051\uffe2\056\uffe2\001\002\000\026\021\150" +
    "\022\145\033\140\034\134\035\137\040\154\056\152\057" +
    "\141\060\135\061\144\001\002\000\064\005\205\007\uffd5" +
    "\010\206\012\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5\020" +
    "\204\021\207\022\202\023\uffd5\024\uffd5\025\uffd5\026\uffd5" +
    "\027\uffd5\030\uffd5\033\uffd5\034\uffd5\036\uffd5\041\203\047" +
    "\uffd5\050\uffd5\051\uffd5\056\uffd5\001\002\000\026\021\150" +
    "\022\145\033\140\034\134\035\137\040\154\056\152\057" +
    "\141\060\135\061\144\001\002\000\026\021\150\022\145" +
    "\033\140\034\134\035\137\040\154\056\152\057\141\060" +
    "\135\061\144\001\002\000\026\021\150\022\145\033\140" +
    "\034\134\035\137\040\154\056\152\057\141\060\135\061" +
    "\144\001\002\000\050\007\274\012\276\014\263\015\277" +
    "\016\270\017\262\023\271\024\266\025\252\026\256\027" +
    "\261\030\257\033\255\034\273\036\267\047\254\050\260" +
    "\051\264\056\275\001\002\000\026\021\150\022\145\033" +
    "\140\034\134\035\137\040\154\056\152\057\141\060\135" +
    "\061\144\001\002\000\026\021\150\022\145\033\140\034" +
    "\134\035\137\040\154\056\152\057\141\060\135\061\144" +
    "\001\002\000\026\021\150\022\145\033\140\034\134\035" +
    "\137\040\154\056\152\057\141\060\135\061\144\001\002" +
    "\000\026\021\150\022\145\033\140\034\134\035\137\040" +
    "\154\056\152\057\141\060\135\061\144\001\002\000\052" +
    "\007\uffd9\012\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\023" +
    "\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\033\uffd9" +
    "\034\uffd9\036\uffd9\041\167\047\uffd9\050\uffd9\051\uffd9\056" +
    "\uffd9\001\002\000\052\007\uffdd\012\uffdd\014\uffdd\015\uffdd" +
    "\016\uffdd\017\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027" +
    "\uffdd\030\uffdd\033\uffdd\034\uffdd\036\uffdd\041\171\047\uffdd" +
    "\050\uffdd\051\uffdd\056\uffdd\001\002\000\004\051\244\001" +
    "\002\000\030\013\146\021\150\022\145\033\140\034\134" +
    "\035\137\040\151\056\152\057\141\060\135\061\144\001" +
    "\002\000\004\031\246\001\002\000\030\013\146\021\150" +
    "\022\145\033\140\034\134\035\137\040\151\056\152\057" +
    "\141\060\135\061\144\001\002\000\004\041\250\001\002" +
    "\000\022\002\uffcd\004\uffcd\031\uffcd\037\uffcd\041\uffcd\042" +
    "\uffcd\043\uffcd\044\uffcd\001\002\000\052\007\uffdf\012\uffdf" +
    "\014\uffdf\015\uffdf\016\uffdf\017\uffdf\023\uffdf\024\uffdf\025" +
    "\uffdf\026\uffdf\027\uffdf\030\uffdf\033\uffdf\034\uffdf\036\uffdf" +
    "\041\173\047\uffdf\050\uffdf\051\uffdf\056\uffdf\001\002\000" +
    "\026\021\uffb9\022\uffb9\033\uffb9\034\uffb9\035\uffb9\040\uffb9" +
    "\056\uffb9\057\uffb9\060\uffb9\061\uffb9\001\002\000\026\021" +
    "\150\022\145\033\140\034\134\035\137\040\154\056\152" +
    "\057\141\060\135\061\144\001\002\000\030\013\uffc7\021" +
    "\uffc7\022\uffc7\033\uffc7\034\uffc7\035\uffc7\040\uffc7\056\uffc7" +
    "\057\uffc7\060\uffc7\061\uffc7\001\002\000\030\013\uffc6\021" +
    "\uffc6\022\uffc6\033\uffc6\034\uffc6\035\uffc6\040\uffc6\056\uffc6" +
    "\057\uffc6\060\uffc6\061\uffc6\001\002\000\026\021\uffb8\022" +
    "\uffb8\033\uffb8\034\uffb8\035\uffb8\040\uffb8\056\uffb8\057\uffb8" +
    "\060\uffb8\061\uffb8\001\002\000\026\021\uffbb\022\uffbb\033" +
    "\uffbb\034\uffbb\035\uffbb\040\uffbb\056\uffbb\057\uffbb\060\uffbb" +
    "\061\uffbb\001\002\000\030\013\uffc2\021\uffc2\022\uffc2\033" +
    "\uffc2\034\uffc2\035\uffc2\040\uffc2\056\uffc2\057\uffc2\060\uffc2" +
    "\061\uffc2\001\002\000\026\021\uffba\022\uffba\033\uffba\034" +
    "\uffba\035\uffba\040\uffba\056\uffba\057\uffba\060\uffba\061\uffba" +
    "\001\002\000\030\013\uffc4\021\uffc4\022\uffc4\033\uffc4\034" +
    "\uffc4\035\uffc4\040\uffc4\056\uffc4\057\uffc4\060\uffc4\061\uffc4" +
    "\001\002\000\026\021\uffbd\022\uffbd\033\uffbd\034\uffbd\035" +
    "\uffbd\040\uffbd\056\uffbd\057\uffbd\060\uffbd\061\uffbd\001\002" +
    "\000\030\013\146\021\150\022\145\033\140\034\134\035" +
    "\137\040\151\056\152\057\141\060\135\061\144\001\002" +
    "\000\030\013\146\021\150\022\145\033\140\034\134\035" +
    "\137\040\151\056\152\057\141\060\135\061\144\001\002" +
    "\000\026\021\uffbe\022\uffbe\033\uffbe\034\uffbe\035\uffbe\040" +
    "\uffbe\056\uffbe\057\uffbe\060\uffbe\061\uffbe\001\002\000\030" +
    "\013\uffc8\021\uffc8\022\uffc8\033\uffc8\034\uffc8\035\uffc8\040" +
    "\uffc8\056\uffc8\057\uffc8\060\uffc8\061\uffc8\001\002\000\030" +
    "\013\uffc3\021\uffc3\022\uffc3\033\uffc3\034\uffc3\035\uffc3\040" +
    "\uffc3\056\uffc3\057\uffc3\060\uffc3\061\uffc3\001\002\000\026" +
    "\021\uffbc\022\uffbc\033\uffbc\034\uffbc\035\uffbc\040\uffbc\056" +
    "\uffbc\057\uffbc\060\uffbc\061\uffbc\001\002\000\030\013\146" +
    "\021\150\022\145\033\140\034\134\035\137\040\151\056" +
    "\152\057\141\060\135\061\144\001\002\000\030\013\uffc5" +
    "\021\uffc5\022\uffc5\033\uffc5\034\uffc5\035\uffc5\040\uffc5\056" +
    "\uffc5\057\uffc5\060\uffc5\061\uffc5\001\002\000\030\013\uffc9" +
    "\021\uffc9\022\uffc9\033\uffc9\034\uffc9\035\uffc9\040\uffc9\056" +
    "\uffc9\057\uffc9\060\uffc9\061\uffc9\001\002\000\030\013\uffc0" +
    "\021\uffc0\022\uffc0\033\uffc0\034\uffc0\035\uffc0\040\uffc0\056" +
    "\uffc0\057\uffc0\060\uffc0\061\uffc0\001\002\000\030\013\uffc1" +
    "\021\uffc1\022\uffc1\033\uffc1\034\uffc1\035\uffc1\040\uffc1\056" +
    "\uffc1\057\uffc1\060\uffc1\061\uffc1\001\002\000\026\021\uffbf" +
    "\022\uffbf\033\uffbf\034\uffbf\035\uffbf\040\uffbf\056\uffbf\057" +
    "\uffbf\060\uffbf\061\uffbf\001\002\000\004\041\301\001\002" +
    "\000\022\002\uffd3\004\uffd3\031\uffd3\037\uffd3\041\uffd3\042" +
    "\uffd3\043\uffd3\044\uffd3\001\002\000\004\041\303\001\002" +
    "\000\022\002\uffd1\004\uffd1\031\uffd1\037\uffd1\041\uffd1\042" +
    "\uffd1\043\uffd1\044\uffd1\001\002\000\004\031\305\001\002" +
    "\000\030\013\146\021\150\022\145\033\140\034\134\035" +
    "\137\040\151\056\152\057\141\060\135\061\144\001\002" +
    "\000\004\041\307\001\002\000\022\002\uffcb\004\uffcb\031" +
    "\uffcb\037\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb\001\002" +
    "\000\004\051\311\001\002\000\030\013\146\021\150\022" +
    "\145\033\140\034\134\035\137\040\151\056\152\057\141" +
    "\060\135\061\144\001\002\000\004\031\313\001\002\000" +
    "\030\013\146\021\150\022\145\033\140\034\134\035\137" +
    "\040\151\056\152\057\141\060\135\061\144\001\002\000" +
    "\004\041\315\001\002\000\022\002\uffcf\004\uffcf\031\uffcf" +
    "\037\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf\001\002\000" +
    "\052\007\uffd7\012\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7" +
    "\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\033" +
    "\uffd7\034\uffd7\036\uffd7\041\175\047\uffd7\050\uffd7\051\uffd7" +
    "\056\uffd7\001\002\000\052\007\uffe1\012\uffe1\014\uffe1\015" +
    "\uffe1\016\uffe1\017\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1" +
    "\027\uffe1\030\uffe1\033\uffe1\034\uffe1\036\uffe1\041\177\047" +
    "\uffe1\050\uffe1\051\uffe1\056\uffe1\001\002\000\052\007\uffdb" +
    "\012\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\023\uffdb\024" +
    "\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\033\uffdb\034\uffdb" +
    "\036\uffdb\041\201\047\uffdb\050\uffdb\051\uffdb\056\uffdb\001" +
    "\002\000\052\007\uffe3\012\uffe3\014\uffe3\015\uffe3\016\uffe3" +
    "\017\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030" +
    "\uffe3\033\uffe3\034\uffe3\036\uffe3\041\226\047\uffe3\050\uffe3" +
    "\051\uffe3\056\uffe3\001\002\000\072\002\uffdd\004\uffdd\006" +
    "\uffdd\007\uffdd\012\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd" +
    "\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031" +
    "\uffdd\033\uffdd\034\uffdd\036\uffdd\037\uffdd\041\uffdd\042\uffdd" +
    "\043\uffdd\044\uffdd\047\uffdd\050\uffdd\051\uffdd\056\uffdd\001" +
    "\002\000\004\051\324\001\002\000\030\013\146\021\150" +
    "\022\145\033\140\034\134\035\137\040\151\056\152\057" +
    "\141\060\135\061\144\001\002\000\004\031\326\001\002" +
    "\000\030\013\146\021\150\022\145\033\140\034\134\035" +
    "\137\040\151\056\152\057\141\060\135\061\144\001\002" +
    "\000\022\002\uffce\004\uffce\031\uffce\037\uffce\041\uffce\042" +
    "\uffce\043\uffce\044\uffce\001\002\000\072\002\uffdf\004\uffdf" +
    "\006\uffdf\007\uffdf\012\uffdf\014\uffdf\015\uffdf\016\uffdf\017" +
    "\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf" +
    "\031\uffdf\033\uffdf\034\uffdf\036\uffdf\037\uffdf\041\uffdf\042" +
    "\uffdf\043\uffdf\044\uffdf\047\uffdf\050\uffdf\051\uffdf\056\uffdf" +
    "\001\002\000\026\021\150\022\145\033\140\034\134\035" +
    "\137\040\154\056\152\057\141\060\135\061\144\001\002" +
    "\000\030\013\146\021\150\022\145\033\140\034\134\035" +
    "\137\040\151\056\152\057\141\060\135\061\144\001\002" +
    "\000\030\013\146\021\150\022\145\033\140\034\134\035" +
    "\137\040\151\056\152\057\141\060\135\061\144\001\002" +
    "\000\030\013\146\021\150\022\145\033\140\034\134\035" +
    "\137\040\151\056\152\057\141\060\135\061\144\001\002" +
    "\000\022\002\uffd4\004\uffd4\031\uffd4\037\uffd4\041\uffd4\042" +
    "\uffd4\043\uffd4\044\uffd4\001\002\000\004\031\337\001\002" +
    "\000\030\013\146\021\150\022\145\033\140\034\134\035" +
    "\137\040\151\056\152\057\141\060\135\061\144\001\002" +
    "\000\022\002\uffcc\004\uffcc\031\uffcc\037\uffcc\041\uffcc\042" +
    "\uffcc\043\uffcc\044\uffcc\001\002\000\022\002\uffd2\004\uffd2" +
    "\031\uffd2\037\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2\001" +
    "\002\000\004\051\343\001\002\000\030\013\146\021\150" +
    "\022\145\033\140\034\134\035\137\040\151\056\152\057" +
    "\141\060\135\061\144\001\002\000\004\031\345\001\002" +
    "\000\030\013\146\021\150\022\145\033\140\034\134\035" +
    "\137\040\151\056\152\057\141\060\135\061\144\001\002" +
    "\000\022\002\uffd0\004\uffd0\031\uffd0\037\uffd0\041\uffd0\042" +
    "\uffd0\043\uffd0\044\uffd0\001\002\000\072\002\uffd7\004\uffd7" +
    "\006\uffd7\007\uffd7\012\uffd7\014\uffd7\015\uffd7\016\uffd7\017" +
    "\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7" +
    "\031\uffd7\033\uffd7\034\uffd7\036\uffd7\037\uffd7\041\uffd7\042" +
    "\uffd7\043\uffd7\044\uffd7\047\uffd7\050\uffd7\051\uffd7\056\uffd7" +
    "\001\002\000\072\002\uffe1\004\uffe1\006\uffe1\007\uffe1\012" +
    "\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\023\uffe1\024\uffe1" +
    "\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\033\uffe1\034" +
    "\uffe1\036\uffe1\037\uffe1\041\uffe1\042\uffe1\043\uffe1\044\uffe1" +
    "\047\uffe1\050\uffe1\051\uffe1\056\uffe1\001\002\000\072\002" +
    "\uffdb\004\uffdb\006\uffdb\007\uffdb\012\uffdb\014\uffdb\015\uffdb" +
    "\016\uffdb\017\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027" +
    "\uffdb\030\uffdb\031\uffdb\033\uffdb\034\uffdb\036\uffdb\037\uffdb" +
    "\041\uffdb\042\uffdb\043\uffdb\044\uffdb\047\uffdb\050\uffdb\051" +
    "\uffdb\056\uffdb\001\002\000\072\002\uffe3\004\uffe3\006\uffe3" +
    "\007\uffe3\012\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\023" +
    "\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3" +
    "\033\uffe3\034\uffe3\036\uffe3\037\uffe3\041\uffe3\042\uffe3\043" +
    "\uffe3\044\uffe3\047\uffe3\050\uffe3\051\uffe3\056\uffe3\001\002" +
    "\000\016\002\ufff3\004\ufff3\041\ufff3\042\ufff3\043\ufff3\044" +
    "\ufff3\001\002\000\004\045\355\001\002\000\016\044\023" +
    "\052\021\053\012\054\020\055\022\061\015\001\002\000" +
    "\020\044\023\046\357\052\021\053\012\054\020\055\022" +
    "\061\015\001\002\000\004\032\360\001\002\000\014\002" +
    "\ufffa\004\ufffa\042\ufffa\043\ufffa\044\ufffa\001\002\000\004" +
    "\032\372\001\002\000\012\005\037\035\035\040\036\061" +
    "\365\001\002\000\006\005\030\032\364\001\002\000\014" +
    "\002\ufffd\004\ufffd\042\ufffd\043\ufffd\044\ufffd\001\002\000" +
    "\010\005\uffab\032\uffab\040\366\001\002\000\020\041\uffaf" +
    "\044\uffaf\052\uffaf\053\uffaf\054\uffaf\055\uffaf\061\uffaf\001" +
    "\002\000\020\041\uffa1\044\023\052\021\053\012\054\020" +
    "\055\022\061\015\001\002\000\004\041\371\001\002\000" +
    "\004\032\uffae\001\002\000\014\002\ufffe\004\ufffe\042\ufffe" +
    "\043\ufffe\044\ufffe\001\002\000\014\002\001\004\001\042" +
    "\001\043\001\044\001\001\002\000\004\002\000\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\372\000\006\003\003\004\010\001\001\000\004\004" +
    "\372\001\001\000\012\006\362\010\360\025\361\026\012" +
    "\001\001\000\002\001\001\000\004\002\102\001\001\000" +
    "\010\006\016\025\015\026\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\025\001\001\000\002\001\001\000\004\026\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\030\046\001\001\000\012\005\047\011\050\025\051" +
    "\026\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\005\062\011\050\025\051\026\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\031\057\001\001\000\012\005\060\011\050" +
    "\025\051\026\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\005\065" +
    "\011\050\025\051\026\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\006\071\007\070\025\015\026\012" +
    "\001\001\000\010\006\073\025\015\026\012\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\022\104\024\110\001\001" +
    "\000\002\001\001\000\004\024\352\001\001\000\012\012" +
    "\135\013\146\020\142\021\141\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\131\001\001\000\002\001" +
    "\001\000\004\024\130\001\001\000\004\024\127\001\001" +
    "\000\006\023\121\024\117\001\001\000\004\024\115\001" +
    "\001\000\002\001\001\000\004\024\117\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\012\135\013\146" +
    "\020\351\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\012\135\013\146\020\350\001\001\000\010\012\135" +
    "\013\146\020\347\001\001\000\010\012\135\013\146\020" +
    "\346\001\001\000\002\001\001\000\010\015\333\016\331" +
    "\017\330\001\001\000\002\001\001\000\010\012\135\013" +
    "\146\020\327\001\001\000\010\012\135\013\146\020\322" +
    "\001\001\000\002\001\001\000\010\012\135\013\146\020" +
    "\321\001\001\000\010\012\227\013\146\020\233\001\001" +
    "\000\010\012\135\013\146\020\152\001\001\000\002\001" +
    "\001\000\006\012\155\013\146\001\001\000\010\012\135" +
    "\013\146\020\224\001\001\000\002\001\001\000\010\012" +
    "\135\013\146\020\177\001\001\000\010\012\135\013\146" +
    "\020\175\001\001\000\010\012\135\013\146\020\173\001" +
    "\001\000\010\012\135\013\146\020\171\001\001\000\010" +
    "\012\135\013\146\020\167\001\001\000\006\012\155\013" +
    "\146\001\001\000\010\012\135\013\146\020\165\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\223\001\001\000\010\012" +
    "\135\013\146\020\220\001\001\000\004\013\210\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\012\135\013\146\014\213\020\142\021\212\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\012\135\013\146\020\142\021\217\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\012\135\013\146\020\320\001" +
    "\001\000\002\001\001\000\010\012\135\013\146\020\317" +
    "\001\001\000\010\012\135\013\146\020\316\001\001\000" +
    "\010\012\135\013\146\020\315\001\001\000\010\015\271" +
    "\016\264\017\252\001\001\000\010\012\135\013\146\020" +
    "\250\001\001\000\010\012\135\013\146\020\242\001\001" +
    "\000\010\012\135\013\146\020\241\001\001\000\010\012" +
    "\135\013\146\020\240\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\012\135\013\146\020" +
    "\142\021\244\001\001\000\002\001\001\000\012\012\135" +
    "\013\146\020\142\021\246\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\012\135\013\146\020\307\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\012\135\013\146\020\142\021\303\001\001" +
    "\000\012\012\135\013\146\020\142\021\301\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\012\135\013\146\020\142\021\277\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\012\135\013\146\020\142\021\305\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\012\135\013\146\020\142\021\311\001\001\000" +
    "\002\001\001\000\012\012\135\013\146\020\142\021\313" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\012\135\013" +
    "\146\020\142\021\324\001\001\000\002\001\001\000\012" +
    "\012\135\013\146\020\142\021\326\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\012\135\013\146\020\341" +
    "\001\001\000\012\012\135\013\146\020\142\021\340\001" +
    "\001\000\012\012\135\013\146\020\142\021\335\001\001" +
    "\000\012\012\135\013\146\020\142\021\334\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\012\135\013\146" +
    "\020\142\021\337\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\012\135\013\146\020\142" +
    "\021\343\001\001\000\002\001\001\000\012\012\135\013" +
    "\146\020\142\021\345\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\006\071" +
    "\007\355\025\015\026\012\001\001\000\010\006\073\025" +
    "\015\026\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\027\366\001\001" +
    "\000\012\005\367\011\050\025\051\026\012\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public Symbol do_action(
    int                        act_num,
    lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



   
	public CodeGenerator cg = new CodeGenerator();

    public void report_error(String message, Object info) {
   
       
        StringBuilder m = new StringBuilder("Error");
   
        if (info instanceof Symbol) {
     
            Symbol s = ((Symbol) info);

            if (s.left >= 0) {                
                       m.append(" in line "+(s.left+1));   
     
                if (s.right >= 0)                    
                       m.append(", column "+(s.right+1));
            }
        }
   
        m.append(" : "+message);
   
        System.err.println(m);
    }
   
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws Exception
    {
      /* Symbol object for return from actions */
      Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // type ::= type STAR 
            {
              String RESULT =null;
		int tleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=t + "*"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",19, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // type ::= type LBRACKET NUMBER RBRACKET 
            {
              String RESULT =null;
		int tleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=t + "[" + n + "]"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",19, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // type ::= type LBRACKET RBRACKET 
            {
              String RESULT =null;
		int tleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT=t + "[]"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",19, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // type ::= pre_type 
            {
              String RESULT =null;
		int pleft = ((Symbol)CUP$parser$stack.peek()).left;
		int pright = ((Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT=p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",19, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // pre_type ::= CONST pre_type 
            {
              String RESULT =null;
		int pleft = ((Symbol)CUP$parser$stack.peek()).left;
		int pright = ((Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT="const" + p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_type",20, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // pre_type ::= UN_SIGNED pre_type 
            {
              String RESULT =null;
		int pleft = ((Symbol)CUP$parser$stack.peek()).left;
		int pright = ((Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT="signed" + " " + p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_type",20, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // pre_type ::= STRUCT ID 
            {
              String RESULT =null;
		int ileft = ((Symbol)CUP$parser$stack.peek()).left;
		int iright = ((Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT= "struct " + i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_type",20, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // pre_type ::= LONG LONG 
            {
              String RESULT =null;
		 RESULT="long long"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_type",20, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // pre_type ::= LONG 
            {
              String RESULT =null;
		 RESULT="long"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_type",20, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // pre_type ::= SHORT 
            {
              String RESULT =null;
		 RESULT="short"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_type",20, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // pre_type ::= ID 
            {
              String RESULT =null;
		int ileft = ((Symbol)CUP$parser$stack.peek()).left;
		int iright = ((Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT=i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_type",20, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ident_funcpointer ::= type LPAREN STAR RPAREN LPAREN NT$2 params RPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p4left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p4right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String p4 = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ps2left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ps2right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ps2 = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			func_decl funcp = parser.cg.paramsowner;
			funcp.pointer = true;
			parser.cg.paramsowner = parser.cg.params_owners.pop();
			RESULT = funcp;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident_funcpointer",7, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // NT$2 ::= 
            {
              Object RESULT =null;
		int p4left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p4right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String p4 = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

			func_decl funcp = new func_decl();
			funcp.pointer = true;
			funcp.setReturn_type(p4);
			parser.cg.params_owners.push(parser.cg.paramsowner);
			parser.cg.paramsowner = funcp;  
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",23, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // params ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",3, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // params ::= ident_funcpointer COMMA params 
            {
              Object RESULT =null;
		int p5left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p5right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object p5 = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ps2left = ((Symbol)CUP$parser$stack.peek()).left;
		int ps2right = ((Symbol)CUP$parser$stack.peek()).right;
		Object ps2 = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 
			parser.cg.paramsowner.pushParam(p5);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",3, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // params ::= ident_funcpointer 
            {
              Object RESULT =null;
		int p4left = ((Symbol)CUP$parser$stack.peek()).left;
		int p4right = ((Symbol)CUP$parser$stack.peek()).right;
		Object p4 = (Object)((Symbol) CUP$parser$stack.peek()).value;
		
			parser.cg.paramsowner.pushParam(p4);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",3, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // params ::= type COMMA DOTS 
            {
              Object RESULT =null;
		int p3left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p3right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p3 = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
			parser.cg.paramsowner.pushParam(p3);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",3, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // params ::= type COMMA params 
            {
              Object RESULT =null;
		int p2left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p2right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p2 = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int psleft = ((Symbol)CUP$parser$stack.peek()).left;
		int psright = ((Symbol)CUP$parser$stack.peek()).right;
		Object ps = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 
			parser.cg.paramsowner.pushParam(p2);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",3, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // params ::= type 
            {
              Object RESULT =null;
		int pleft = ((Symbol)CUP$parser$stack.peek()).left;
		int pright = ((Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((Symbol) CUP$parser$stack.peek()).value;
		 
			parser.cg.paramsowner.pushParam(p);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",3, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // defin ::= type LPAREN STAR ID RPAREN LPAREN NT$1 params RPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int i7left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int i7right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String i7 = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int i8left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i8right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i8 = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int psleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int psright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ps = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			func_decl funcp = parser.cg.paramsowner;
			funcp.pointer = true;
			parser.cg.var.setFuncpointer(funcp);
			parser.cg.paramsowner = parser.cg.params_owners.pop();
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("defin",4, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$1 ::= 
            {
              Object RESULT =null;
		int i7left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i7right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i7 = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int i8left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i8right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i8 = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 
			parser.cg.var.setType(i7+"*");
			parser.cg.var.setID(i8);
			func_decl funcp = new func_decl();
			funcp.setID(i8);
			funcp.setReturn_type(i7+"*");
			parser.cg.params_owners.push(parser.cg.paramsowner);
			parser.cg.paramsowner = funcp;  
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",22, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // defin ::= defin LBRACKET NUMBER RBRACKET 
            {
              Object RESULT =null;
		int nleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			parser.cg.var.addArray(n);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("defin",4, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // defin ::= defin LBRACKET RBRACKET 
            {
              Object RESULT =null;
		
			parser.cg.var.addArray(0);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("defin",4, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // defin ::= type ID 
            {
              Object RESULT =null;
		int ileft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int i2left = ((Symbol)CUP$parser$stack.peek()).left;
		int i2right = ((Symbol)CUP$parser$stack.peek()).right;
		String i2 = (String)((Symbol) CUP$parser$stack.peek()).value;
		 
			parser.cg.var.setType(i);
			parser.cg.var.setID(i2);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("defin",4, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // st_body ::= st_body defin SEMI 
            {
              Object RESULT =null;
		int sleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
			parser.cg.struct.addMember(parser.cg.var);
		        parser.cg.var = new var_decl();  
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("st_body",5, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // st_body ::= defin SEMI 
            {
              Object RESULT =null;
		
			parser.cg.struct.addMember(parser.cg.var);
		        parser.cg.var = new var_decl(); 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("st_body",5, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // func ::= type ID LPAREN NT$0 params RPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e2 = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
			RESULT = e + " " + e2 + "(" + p + ");"; 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func",6, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // NT$0 ::= 
            {
              Object RESULT =null;
		int eleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 
			parser.cg.func.setReturn_type(e);
			parser.cg.func.setID(e2);
			parser.cg.paramsowner = parser.cg.func;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",21, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // macro ::= LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("macro",16, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // macro ::= LPAREN macro_params RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("macro",16, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // macro_params ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("macro_params",17, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // macro_params ::= macro_params COMMA ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("macro_params",17, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // args ::= exp3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",10, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // args ::= args COMMA exp3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",10, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // func_call ::= ID LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_call",9, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // func_call ::= ID LPAREN args RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_call",9, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // LogicalS ::= OR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalS",13, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // LogicalS ::= AND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalS",13, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // LogicalS ::= NOTEQUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalS",13, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // LogicalS ::= EQUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalS",13, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // LogicalS ::= GE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalS",13, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // LogicalS ::= GREATER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalS",13, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // LogicalS ::= LE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalS",13, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // LogicalS ::= LESS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalS",13, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // B2 ::= AMPERSAND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("B2",12, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // B2 ::= BAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("B2",12, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // B2 ::= HAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("B2",12, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // B2 ::= GG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("B2",12, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // B2 ::= LL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("B2",12, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Ar2 ::= MINUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ar2",11, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Ar2 ::= PLUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ar2",11, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Ar2 ::= PERCENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ar2",11, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Ar2 ::= DIVIDE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ar2",11, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Ar2 ::= ASSIGN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ar2",11, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exp3 ::= exp2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",15, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exp3 ::= LPAREN exp2 QUESTIONMARK exp3 COLON exp3 RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",15, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp3 ::= exp2 QUESTIONMARK exp3 COLON exp3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",15, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp3 ::= LPAREN BARDOT exp2 QUESTIONMARK exp3 COLON exp3 RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",15, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp3 ::= BARDOT exp2 QUESTIONMARK exp3 COLON exp3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",15, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp3 ::= LPAREN exp2 LogicalS exp2 QUESTIONMARK exp3 COLON exp3 RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",15, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp3 ::= exp2 LogicalS exp2 QUESTIONMARK exp3 COLON exp3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",15, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp3 ::= LPAREN exp2 B2 exp3 RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",15, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp3 ::= exp2 B2 exp3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",15, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp3 ::= LPAREN exp2 Ar2 exp3 RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",15, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp3 ::= exp2 Ar2 exp3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",15, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp2 ::= exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",14, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp2 ::= LPAREN TILDE exp2 RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",14, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp2 ::= TILDE exp2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",14, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp2 ::= LPAREN AMPERSAND exp2 RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",14, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp2 ::= AMPERSAND exp2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",14, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exp2 ::= LPAREN STAR exp2 RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",14, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exp2 ::= STAR exp2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",14, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exp2 ::= LPAREN MM exp2 RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",14, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exp2 ::= MM exp2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",14, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exp2 ::= LPAREN PP exp2 RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",14, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exp2 ::= PP exp2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",14, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exp2 ::= LPAREN PLUS exp2 RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",14, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exp2 ::= PLUS exp2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",14, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // exp2 ::= LPAREN MINUS exp2 RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",14, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exp2 ::= MINUS exp2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",14, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp ::= LPAREN exp RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp ::= exp PP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // exp ::= exp MM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // exp ::= exp PREF ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // exp ::= exp PREF func_call 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // exp ::= exp DOT ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // exp ::= exp DOT func_call 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // exp ::= exp LBRACKET exp2 RBRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // exp ::= func_call 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // exp ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // exp ::= NUMBER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // def_value ::= LPAREN def_value RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_value",18, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // def_value ::= BARDOT def_value 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_value",18, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // def_value ::= STAR def_value 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_value",18, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // def_value ::= AMPERSAND def_value 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_value",18, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // def_value ::= MINUS def_value 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_value",18, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // def_value ::= PLUS def_value 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_value",18, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // def_value ::= NUMBER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_value",18, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // def_body ::= ID STRUCT ID 
            {
              Object RESULT =null;
		int ileft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((Symbol)CUP$parser$stack.peek()).left;
		int vright = ((Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((Symbol) CUP$parser$stack.peek()).value;
		
			def_expr dx = new def_expr();
			dx.ID = i;
			dx.exp = v;
			dx.isStruct = true;
			parser.cg.defines.add(dx);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_body",0, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // def_body ::= ID macro exp3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_body",0, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // def_body ::= ID def_value 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_body",0, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // code_part ::= DEFINE def_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_part",2, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // code_part ::= STRUCT ID LQ st_body RQ SEMI 
            {
              Object RESULT =null;
		int ileft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
			parser.cg.struct.setName(i);
			parser.cg.declareStruct(); 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_part",2, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // code_part ::= TYPEDEF STRUCT LQ st_body RQ ID SEMI 
            {
              Object RESULT =null;
		int sleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object s = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.cg.declareTypedef_struct(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_part",2, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // code_part ::= TYPEDEF defin SEMI 
            {
              Object RESULT =null;
		int d2left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int d2right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d2 = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.cg.declareTypedef_var(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_part",2, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // code_part ::= EXTERN defin SEMI 
            {
              Object RESULT =null;
		int dleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.cg.declareVar(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_part",2, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // code_part ::= EXTERN func SEMI 
            {
              Object RESULT =null;
		int fleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object f = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.cg.declareFunc(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_part",2, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= code_part 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",1, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= program code_part 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",1, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

