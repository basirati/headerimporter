package stdio_parser;
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Oct 29 14:22:24 CET 2014
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Oct 29 14:22:24 CET 2014
  */
public class parser extends lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(Scanner s, SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\214\000\002\003\004\000\002\002\004\000\002\003" +
    "\003\000\002\004\005\000\002\004\005\000\002\004\005" +
    "\000\002\004\011\000\002\026\002\000\002\004\011\000" +
    "\002\004\004\000\002\004\003\000\002\004\010\000\002" +
    "\004\006\000\002\022\004\000\002\022\004\000\002\022" +
    "\003\000\002\022\003\000\002\002\004\000\002\002\007" +
    "\000\002\002\005\000\002\021\003\000\002\021\003\000" +
    "\002\021\006\000\002\021\005\000\002\021\005\000\002" +
    "\021\005\000\002\021\005\000\002\021\004\000\002\021" +
    "\004\000\002\021\004\000\002\021\004\000\002\021\004" +
    "\000\002\021\004\000\002\021\004\000\002\021\004\000" +
    "\002\021\005\000\002\021\005\000\002\021\005\000\002" +
    "\021\007\000\002\021\004\000\002\021\004\000\002\021" +
    "\005\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\006\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\004\000\002" +
    "\012\004\000\002\012\004\000\002\012\004\000\002\012" +
    "\004\000\002\012\004\000\002\012\004\000\002\012\004" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\012\007\000\002\012\004\000\002\012\004\000\002" +
    "\012\005\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\004" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\013\006\000\002\013\005\000\002\014\005" +
    "\000\002\014\003\000\002\020\005\000\002\020\003\000" +
    "\002\020\002\000\002\027\002\000\002\010\010\000\002" +
    "\007\004\000\002\007\003\000\002\007\004\000\002\007" +
    "\005\000\002\006\004\000\002\006\005\000\002\006\006" +
    "\000\002\030\002\000\002\006\013\000\002\005\003\000" +
    "\002\005\005\000\002\005\005\000\002\005\003\000\002" +
    "\005\005\000\002\005\002\000\002\031\002\000\002\011" +
    "\012\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\004\000\002\024\004\000\002\024\004" +
    "\000\002\023\003\000\002\023\005\000\002\023\006\000" +
    "\002\023\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\360\000\024\004\006\042\011\043\012\044\007\103" +
    "\005\104\016\105\013\106\017\107\015\001\002\000\026" +
    "\002\uffff\004\uffff\042\uffff\043\uffff\044\uffff\103\uffff\104" +
    "\uffff\105\uffff\106\uffff\107\uffff\001\002\000\004\111\362" +
    "\001\002\000\004\111\154\001\002\000\004\111\ufffa\001" +
    "\002\000\026\002\145\004\006\042\011\043\012\044\007" +
    "\103\005\104\016\105\013\106\017\107\015\001\002\000" +
    "\040\044\053\052\046\053\030\054\043\055\045\060\033" +
    "\061\032\062\041\063\040\064\050\065\036\066\042\067" +
    "\051\070\027\111\037\001\002\000\040\044\031\052\046" +
    "\053\030\054\043\055\045\060\033\061\032\062\041\063" +
    "\040\064\050\065\036\066\042\067\051\070\027\111\037" +
    "\001\002\000\064\002\ufff2\004\ufff2\042\ufff2\043\ufff2\044" +
    "\ufff2\046\ufff2\052\ufff2\053\ufff2\054\ufff2\055\ufff2\060\ufff2" +
    "\061\ufff2\062\ufff2\063\ufff2\064\ufff2\065\ufff2\066\ufff2\067" +
    "\ufff2\070\ufff2\103\ufff2\104\ufff2\105\ufff2\106\ufff2\107\ufff2" +
    "\111\ufff2\001\002\000\026\002\ufff7\004\ufff7\042\ufff7\043" +
    "\ufff7\044\ufff7\103\ufff7\104\ufff7\105\ufff7\106\ufff7\107\ufff7" +
    "\001\002\000\004\015\021\001\002\000\004\111\020\001" +
    "\002\000\064\002\ufff1\004\ufff1\042\ufff1\043\ufff1\044\ufff1" +
    "\046\ufff1\052\ufff1\053\ufff1\054\ufff1\055\ufff1\060\ufff1\061" +
    "\ufff1\062\ufff1\063\ufff1\064\ufff1\065\ufff1\066\ufff1\067\ufff1" +
    "\070\ufff1\103\ufff1\104\ufff1\105\ufff1\106\ufff1\107\ufff1\111" +
    "\ufff1\001\002\000\064\002\ufff3\004\ufff3\042\ufff3\043\ufff3" +
    "\044\ufff3\046\ufff3\052\ufff3\053\ufff3\054\ufff3\055\ufff3\060" +
    "\ufff3\061\ufff3\062\ufff3\063\ufff3\064\ufff3\065\ufff3\066\ufff3" +
    "\067\ufff3\070\ufff3\103\ufff3\104\ufff3\105\ufff3\106\ufff3\107" +
    "\ufff3\111\ufff3\001\002\000\004\111\022\001\002\000\006" +
    "\010\024\014\023\001\002\000\026\002\ufff5\004\ufff5\042" +
    "\ufff5\043\ufff5\044\ufff5\103\ufff5\104\ufff5\105\ufff5\106\ufff5" +
    "\107\ufff5\001\002\000\004\111\025\001\002\000\004\014" +
    "\026\001\002\000\026\002\ufff6\004\ufff6\042\ufff6\043\ufff6" +
    "\044\ufff6\103\ufff6\104\ufff6\105\ufff6\106\ufff6\107\ufff6\001" +
    "\002\000\016\005\uff7f\035\uff7f\037\uff7f\040\uff7f\041\uff7f" +
    "\111\uff7f\001\002\000\016\005\uff84\035\uff84\037\uff84\040" +
    "\uff84\041\uff84\111\uff84\001\002\000\006\045\117\111\054" +
    "\001\002\000\016\005\uff88\035\uff88\037\uff88\040\uff88\041" +
    "\uff88\111\uff88\001\002\000\016\005\uff89\035\uff89\037\uff89" +
    "\040\uff89\041\uff89\111\uff89\001\002\000\012\005\066\035" +
    "\064\040\065\111\063\001\002\000\006\005\057\032\056" +
    "\001\002\000\016\005\uff82\035\uff82\037\uff82\040\uff82\041" +
    "\uff82\111\uff82\001\002\000\016\005\uff7d\035\uff7d\037\uff7d" +
    "\040\uff7d\041\uff7d\111\uff7d\001\002\000\016\005\uff86\035" +
    "\uff86\037\uff86\040\uff86\041\uff86\111\uff86\001\002\000\016" +
    "\005\uff87\035\uff87\037\uff87\040\uff87\041\uff87\111\uff87\001" +
    "\002\000\016\005\uff81\035\uff81\037\uff81\040\uff81\041\uff81" +
    "\111\uff81\001\002\000\040\044\053\052\046\053\030\054" +
    "\043\055\045\060\033\061\032\062\041\063\040\064\050" +
    "\065\036\066\042\067\051\070\027\111\037\001\002\000" +
    "\016\005\uff79\035\uff79\037\uff79\040\uff79\041\uff79\111\uff79" +
    "\001\002\000\040\044\053\052\046\053\030\054\043\055" +
    "\045\060\033\061\032\062\041\063\040\064\050\065\036" +
    "\066\042\067\051\070\027\111\037\001\002\000\016\005" +
    "\uff85\035\uff85\037\uff85\040\uff85\041\uff85\111\uff85\001\002" +
    "\000\016\005\uff7e\035\uff7e\037\uff7e\040\uff7e\041\uff7e\111" +
    "\uff7e\001\002\000\016\005\uff83\035\uff83\037\uff83\040\uff83" +
    "\041\uff83\111\uff83\001\002\000\016\005\uff80\035\uff80\037" +
    "\uff80\040\uff80\041\uff80\111\uff80\001\002\000\016\005\uff7a" +
    "\035\uff7a\037\uff7a\040\uff7a\041\uff7a\111\uff7a\001\002\000" +
    "\004\111\054\001\002\000\016\005\uff7c\035\uff7c\037\uff7c" +
    "\040\uff7c\041\uff7c\111\uff7c\001\002\000\016\005\uff7b\035" +
    "\uff7b\037\uff7b\040\uff7b\041\uff7b\111\uff7b\001\002\000\026" +
    "\002\ufffc\004\ufffc\042\ufffc\043\ufffc\044\ufffc\103\ufffc\104" +
    "\ufffc\105\ufffc\106\ufffc\107\ufffc\001\002\000\006\006\060" +
    "\110\061\001\002\000\006\005\uff95\032\uff95\001\002\000" +
    "\004\006\062\001\002\000\006\005\uff94\032\uff94\001\002" +
    "\000\006\005\uff96\032\uff96\001\002\000\016\005\uff76\035" +
    "\uff76\037\uff76\040\uff76\041\uff76\111\uff76\001\002\000\004" +
    "\035\072\001\002\000\006\006\067\110\070\001\002\000" +
    "\016\005\uff78\035\uff78\037\uff78\040\uff78\041\uff78\111\uff78" +
    "\001\002\000\004\006\071\001\002\000\016\005\uff77\035" +
    "\uff77\037\uff77\040\uff77\041\uff77\111\uff77\001\002\000\004" +
    "\111\073\001\002\000\004\041\074\001\002\000\004\040" +
    "\075\001\002\000\042\041\uff93\044\uff93\052\uff93\053\uff93" +
    "\054\uff93\055\uff93\060\uff93\061\uff93\062\uff93\063\uff93\064" +
    "\uff93\065\uff93\066\uff93\067\uff93\070\uff93\111\uff93\001\002" +
    "\000\042\041\uff8c\044\053\052\046\053\030\054\043\055" +
    "\045\060\033\061\032\062\041\063\040\064\050\065\036" +
    "\066\042\067\051\070\027\111\037\001\002\000\014\005" +
    "\066\035\064\037\105\040\106\041\uff91\001\002\000\006" +
    "\037\103\041\uff8e\001\002\000\004\041\102\001\002\000" +
    "\006\005\uff92\032\uff92\001\002\000\042\041\uff8c\044\053" +
    "\052\046\053\030\054\043\055\045\060\033\061\032\062" +
    "\041\063\040\064\050\065\036\066\042\067\051\070\027" +
    "\111\037\001\002\000\004\041\uff8d\001\002\000\044\011" +
    "\115\041\uff8c\044\053\052\046\053\030\054\043\055\045" +
    "\060\033\061\032\062\041\063\040\064\050\065\036\066" +
    "\042\067\051\070\027\111\037\001\002\000\004\035\107" +
    "\001\002\000\004\041\110\001\002\000\004\040\111\001" +
    "\002\000\042\041\uff8b\044\uff8b\052\uff8b\053\uff8b\054\uff8b" +
    "\055\uff8b\060\uff8b\061\uff8b\062\uff8b\063\uff8b\064\uff8b\065" +
    "\uff8b\066\uff8b\067\uff8b\070\uff8b\111\uff8b\001\002\000\042" +
    "\041\uff8c\044\053\052\046\053\030\054\043\055\045\060" +
    "\033\061\032\062\041\063\040\064\050\065\036\066\042" +
    "\067\051\070\027\111\037\001\002\000\004\041\114\001" +
    "\002\000\006\037\uff8a\041\uff8a\001\002\000\004\041\uff8f" +
    "\001\002\000\004\041\uff90\001\002\000\050\044\053\052" +
    "\046\053\030\054\043\055\045\060\033\061\032\062\041" +
    "\063\040\064\050\065\036\066\042\067\051\070\027\103" +
    "\005\104\016\105\013\106\017\111\037\001\002\000\052" +
    "\044\053\046\124\052\046\053\030\054\043\055\045\060" +
    "\033\061\032\062\041\063\040\064\050\065\036\066\042" +
    "\067\051\070\027\103\005\104\016\105\013\106\017\111" +
    "\037\001\002\000\006\005\057\032\123\001\002\000\052" +
    "\044\uff99\046\uff99\052\uff99\053\uff99\054\uff99\055\uff99\060" +
    "\uff99\061\uff99\062\uff99\063\uff99\064\uff99\065\uff99\066\uff99" +
    "\067\uff99\070\uff99\103\uff99\104\uff99\105\uff99\106\uff99\111" +
    "\uff99\001\002\000\052\044\uff9a\046\uff9a\052\uff9a\053\uff9a" +
    "\054\uff9a\055\uff9a\060\uff9a\061\uff9a\062\uff9a\063\uff9a\064" +
    "\uff9a\065\uff9a\066\uff9a\067\uff9a\070\uff9a\103\uff9a\104\uff9a" +
    "\105\uff9a\106\uff9a\111\uff9a\001\002\000\004\111\130\001" +
    "\002\000\006\005\057\032\127\001\002\000\052\044\uff98" +
    "\046\uff98\052\uff98\053\uff98\054\uff98\055\uff98\060\uff98\061" +
    "\uff98\062\uff98\063\uff98\064\uff98\065\uff98\066\uff98\067\uff98" +
    "\070\uff98\103\uff98\104\uff98\105\uff98\106\uff98\111\uff98\001" +
    "\002\000\052\044\uff97\046\uff97\052\uff97\053\uff97\054\uff97" +
    "\055\uff97\060\uff97\061\uff97\062\uff97\063\uff97\064\uff97\065" +
    "\uff97\066\uff97\067\uff97\070\uff97\103\uff97\104\uff97\105\uff97" +
    "\106\uff97\111\uff97\001\002\000\004\032\131\001\002\000" +
    "\026\002\ufffb\004\ufffb\042\ufffb\043\ufffb\044\ufffb\103\ufffb" +
    "\104\ufffb\105\ufffb\106\ufffb\107\ufffb\001\002\000\012\005" +
    "\066\035\064\040\065\111\137\001\002\000\006\005\057" +
    "\032\136\001\002\000\004\032\135\001\002\000\026\002" +
    "\ufffe\004\ufffe\042\ufffe\043\ufffe\044\ufffe\103\ufffe\104\ufffe" +
    "\105\ufffe\106\ufffe\107\ufffe\001\002\000\026\002\ufffd\004" +
    "\ufffd\042\ufffd\043\ufffd\044\ufffd\103\ufffd\104\ufffd\105\ufffd" +
    "\106\ufffd\107\ufffd\001\002\000\010\005\uff96\032\uff96\040" +
    "\140\001\002\000\042\041\uff9c\044\uff9c\052\uff9c\053\uff9c" +
    "\054\uff9c\055\uff9c\060\uff9c\061\uff9c\062\uff9c\063\uff9c\064" +
    "\uff9c\065\uff9c\066\uff9c\067\uff9c\070\uff9c\111\uff9c\001\002" +
    "\000\042\041\uff8c\044\053\052\046\053\030\054\043\055" +
    "\045\060\033\061\032\062\041\063\040\064\050\065\036" +
    "\066\042\067\051\070\027\111\037\001\002\000\004\041" +
    "\143\001\002\000\004\032\uff9b\001\002\000\026\002\001" +
    "\004\001\042\001\043\001\044\001\103\001\104\001\105" +
    "\001\106\001\107\001\001\002\000\004\002\000\001\002" +
    "\000\004\111\147\001\002\000\004\045\150\001\002\000" +
    "\050\044\053\052\046\053\030\054\043\055\045\060\033" +
    "\061\032\062\041\063\040\064\050\065\036\066\042\067" +
    "\051\070\027\103\005\104\016\105\013\106\017\111\037" +
    "\001\002\000\052\044\053\046\152\052\046\053\030\054" +
    "\043\055\045\060\033\061\032\062\041\063\040\064\050" +
    "\065\036\066\042\067\051\070\027\103\005\104\016\105" +
    "\013\106\017\111\037\001\002\000\004\032\153\001\002" +
    "\000\026\002\ufff9\004\ufff9\042\ufff9\043\ufff9\044\ufff9\103" +
    "\ufff9\104\ufff9\105\ufff9\106\ufff9\107\ufff9\001\002\000\032" +
    "\013\165\021\171\022\166\033\162\034\156\035\161\040" +
    "\172\044\160\056\173\057\163\110\157\111\164\001\002" +
    "\000\026\002\ufff8\004\ufff8\042\ufff8\043\ufff8\044\ufff8\103" +
    "\ufff8\104\ufff8\105\ufff8\106\ufff8\107\ufff8\001\002\000\030" +
    "\013\204\021\206\022\203\033\200\034\174\035\177\040" +
    "\207\056\210\057\201\110\175\111\202\001\002\000\134" +
    "\002\uffed\004\uffed\005\uffed\007\uffed\010\uffed\012\uffed\014" +
    "\uffed\015\uffed\016\uffed\017\uffed\020\uffed\021\uffed\022\uffed" +
    "\023\uffed\024\uffed\025\uffed\026\uffed\027\uffed\030\uffed\033" +
    "\uffed\034\uffed\036\uffed\041\uffed\042\uffed\043\uffed\044\uffed" +
    "\047\uffed\050\uffed\051\uffed\056\uffed\071\uffed\072\uffed\073" +
    "\uffed\074\uffed\075\uffed\076\uffed\077\uffed\100\uffed\101\uffed" +
    "\102\uffed\103\uffed\104\uffed\105\uffed\106\uffed\107\uffed\001" +
    "\002\000\004\111\360\001\002\000\030\013\204\021\206" +
    "\022\203\033\200\034\174\035\177\040\207\056\210\057" +
    "\201\110\175\111\202\001\002\000\030\013\204\021\206" +
    "\022\203\033\200\034\174\035\177\040\207\056\210\057" +
    "\201\110\175\111\202\001\002\000\030\013\204\021\206" +
    "\022\203\033\200\034\174\035\177\040\207\056\210\057" +
    "\201\110\175\111\202\001\002\000\004\040\264\001\002" +
    "\000\030\013\204\021\206\022\203\033\200\034\174\035" +
    "\177\040\207\056\210\057\201\110\175\111\202\001\002" +
    "\000\030\013\204\021\206\022\203\033\200\034\174\035" +
    "\177\040\207\056\210\057\201\110\175\111\202\001\002" +
    "\000\132\002\ufff0\004\ufff0\005\322\007\240\010\326\012" +
    "\230\014\225\015\226\016\220\017\234\020\323\021\321" +
    "\022\320\023\222\024\243\025\232\026\233\027\224\030" +
    "\244\033\237\034\227\036\212\042\ufff0\043\ufff0\044\ufff0" +
    "\047\246\050\247\051\324\056\241\071\235\072\236\073" +
    "\250\074\214\075\231\076\213\077\245\100\254\101\253" +
    "\102\252\103\ufff0\104\ufff0\105\ufff0\106\ufff0\107\ufff0\001" +
    "\002\000\134\002\uffec\004\uffec\005\uffec\007\uffec\010\uffec" +
    "\012\uffec\014\uffec\015\uffec\016\uffec\017\uffec\020\uffec\021" +
    "\uffec\022\uffec\023\uffec\024\uffec\025\uffec\026\uffec\027\uffec" +
    "\030\uffec\033\uffec\034\uffec\036\uffec\041\uffec\042\uffec\043" +
    "\uffec\044\uffec\047\uffec\050\uffec\051\uffec\056\uffec\071\uffec" +
    "\072\uffec\073\uffec\074\uffec\075\uffec\076\uffec\077\uffec\100" +
    "\uffec\101\uffec\102\uffec\103\uffec\104\uffec\105\uffec\106\uffec" +
    "\107\uffec\001\002\000\030\013\204\021\206\022\203\033" +
    "\200\034\174\035\177\040\207\056\210\057\201\110\175" +
    "\111\202\001\002\000\034\013\165\021\171\022\166\033" +
    "\162\034\156\035\161\037\uff9d\040\317\041\uff9d\056\173" +
    "\057\163\110\157\111\315\001\002\000\030\013\204\021" +
    "\206\022\203\033\200\034\174\035\177\040\207\056\210" +
    "\057\201\110\175\111\202\001\002\000\030\013\204\021" +
    "\206\022\203\033\200\034\174\035\177\040\207\056\210" +
    "\057\201\110\175\111\202\001\002\000\142\002\uffd7\004" +
    "\uffd7\005\uffd7\006\uffd7\007\uffd7\010\uffd7\012\uffd7\014\uffd7" +
    "\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023" +
    "\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7" +
    "\033\uffd7\034\uffd7\036\uffd7\037\uffd7\041\uffd7\042\uffd7\043" +
    "\uffd7\044\uffd7\047\uffd7\050\uffd7\051\uffd7\056\uffd7\071\uffd7" +
    "\072\uffd7\073\uffd7\074\uffd7\075\uffd7\076\uffd7\077\uffd7\100" +
    "\uffd7\101\uffd7\102\uffd7\103\uffd7\104\uffd7\105\uffd7\106\uffd7" +
    "\107\uffd7\001\002\000\134\002\uffdf\004\uffdf\005\217\007" +
    "\uffdf\010\242\012\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf" +
    "\020\221\021\216\022\215\023\uffdf\024\uffdf\025\uffdf\026" +
    "\uffdf\027\uffdf\030\uffdf\033\uffdf\034\uffdf\036\uffdf\041\uffdf" +
    "\042\uffdf\043\uffdf\044\uffdf\047\uffdf\050\uffdf\051\uffdf\056" +
    "\uffdf\071\uffdf\072\uffdf\073\uffdf\074\uffdf\075\uffdf\076\uffdf" +
    "\077\uffdf\100\uffdf\101\uffdf\102\uffdf\103\uffdf\104\uffdf\105" +
    "\uffdf\106\uffdf\107\uffdf\001\002\000\030\013\204\021\206" +
    "\022\203\033\200\034\174\035\177\040\207\056\210\057" +
    "\201\110\175\111\202\001\002\000\030\013\204\021\206" +
    "\022\203\033\200\034\174\035\177\040\207\056\210\057" +
    "\201\110\175\111\202\001\002\000\030\013\204\021\206" +
    "\022\203\033\200\034\174\035\177\040\207\056\210\057" +
    "\201\110\175\111\202\001\002\000\144\002\uffd6\004\uffd6" +
    "\005\uffd6\006\uffd6\007\uffd6\010\uffd6\012\uffd6\014\uffd6\015" +
    "\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6" +
    "\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\033" +
    "\uffd6\034\uffd6\036\uffd6\037\uffd6\040\264\041\uffd6\042\uffd6" +
    "\043\uffd6\044\uffd6\047\uffd6\050\uffd6\051\uffd6\056\uffd6\071" +
    "\uffd6\072\uffd6\073\uffd6\074\uffd6\075\uffd6\076\uffd6\077\uffd6" +
    "\100\uffd6\101\uffd6\102\uffd6\103\uffd6\104\uffd6\105\uffd6\106" +
    "\uffd6\107\uffd6\001\002\000\030\013\204\021\206\022\203" +
    "\033\200\034\174\035\177\040\207\056\210\057\201\110" +
    "\175\111\202\001\002\000\030\013\204\021\206\022\203" +
    "\033\200\034\174\035\177\040\207\056\210\057\201\110" +
    "\175\111\202\001\002\000\142\002\uffd5\004\uffd5\005\uffd5" +
    "\006\uffd5\007\uffd5\010\uffd5\012\uffd5\014\uffd5\015\uffd5\016" +
    "\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5" +
    "\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\033\uffd5\034" +
    "\uffd5\036\uffd5\037\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5" +
    "\047\uffd5\050\uffd5\051\uffd5\056\uffd5\071\uffd5\072\uffd5\073" +
    "\uffd5\074\uffd5\075\uffd5\076\uffd5\077\uffd5\100\uffd5\101\uffd5" +
    "\102\uffd5\103\uffd5\104\uffd5\105\uffd5\106\uffd5\107\uffd5\001" +
    "\002\000\030\013\204\021\206\022\203\033\200\034\174" +
    "\035\177\040\207\056\210\057\201\110\175\111\202\001" +
    "\002\000\030\013\204\021\206\022\203\033\200\034\174" +
    "\035\177\040\207\056\210\057\201\110\175\111\202\001" +
    "\002\000\030\013\204\021\206\022\203\033\200\034\174" +
    "\035\177\040\207\056\210\057\201\110\175\111\202\001" +
    "\002\000\142\002\uffc8\004\uffc8\005\217\006\uffc8\007\uffc8" +
    "\010\242\012\uffc8\014\uffc8\015\uffc8\016\uffc8\017\uffc8\020" +
    "\221\021\216\022\215\023\uffc8\024\uffc8\025\uffc8\026\uffc8" +
    "\027\uffc8\030\uffc8\031\uffc8\033\uffc8\034\uffc8\036\uffc8\037" +
    "\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\047\uffc8\050\uffc8" +
    "\051\uffc8\056\uffc8\071\uffc8\072\uffc8\073\uffc8\074\uffc8\075" +
    "\uffc8\076\uffc8\077\uffc8\100\uffc8\101\uffc8\102\uffc8\103\uffc8" +
    "\104\uffc8\105\uffc8\106\uffc8\107\uffc8\001\002\000\030\013" +
    "\uffbf\021\uffbf\022\uffbf\033\uffbf\034\uffbf\035\uffbf\040\uffbf" +
    "\056\uffbf\057\uffbf\110\uffbf\111\uffbf\001\002\000\030\013" +
    "\uffb5\021\uffb5\022\uffb5\033\uffb5\034\uffb5\035\uffb5\040\uffb5" +
    "\056\uffb5\057\uffb5\110\uffb5\111\uffb5\001\002\000\030\013" +
    "\uffb7\021\uffb7\022\uffb7\033\uffb7\034\uffb7\035\uffb7\040\uffb7" +
    "\056\uffb7\057\uffb7\110\uffb7\111\uffb7\001\002\000\142\002" +
    "\uffcf\004\uffcf\005\uffcf\006\uffcf\007\uffcf\010\uffcf\012\uffcf" +
    "\014\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf\022" +
    "\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf" +
    "\031\uffcf\033\uffcf\034\uffcf\036\uffcf\037\uffcf\041\uffcf\042" +
    "\uffcf\043\uffcf\044\uffcf\047\uffcf\050\uffcf\051\uffcf\056\uffcf" +
    "\071\uffcf\072\uffcf\073\uffcf\074\uffcf\075\uffcf\076\uffcf\077" +
    "\uffcf\100\uffcf\101\uffcf\102\uffcf\103\uffcf\104\uffcf\105\uffcf" +
    "\106\uffcf\107\uffcf\001\002\000\142\002\uffce\004\uffce\005" +
    "\uffce\006\uffce\007\uffce\010\uffce\012\uffce\014\uffce\015\uffce" +
    "\016\uffce\017\uffce\020\uffce\021\uffce\022\uffce\023\uffce\024" +
    "\uffce\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce\033\uffce" +
    "\034\uffce\036\uffce\037\uffce\041\uffce\042\uffce\043\uffce\044" +
    "\uffce\047\uffce\050\uffce\051\uffce\056\uffce\071\uffce\072\uffce" +
    "\073\uffce\074\uffce\075\uffce\076\uffce\077\uffce\100\uffce\101" +
    "\uffce\102\uffce\103\uffce\104\uffce\105\uffce\106\uffce\107\uffce" +
    "\001\002\000\030\013\204\021\206\022\203\033\200\034" +
    "\174\035\177\040\207\056\210\057\201\110\175\111\202" +
    "\001\002\000\030\013\uffaf\021\uffaf\022\uffaf\033\uffaf\034" +
    "\uffaf\035\uffaf\040\uffaf\056\uffaf\057\uffaf\110\uffaf\111\uffaf" +
    "\001\002\000\004\111\277\001\002\000\030\013\uffa8\021" +
    "\uffa8\022\uffa8\033\uffa8\034\uffa8\035\uffa8\040\uffa8\056\uffa8" +
    "\057\uffa8\110\uffa8\111\uffa8\001\002\000\030\013\204\021" +
    "\206\022\203\033\200\034\174\035\177\040\207\056\210" +
    "\057\201\110\175\111\202\001\002\000\030\013\uffa6\021" +
    "\uffa6\022\uffa6\033\uffa6\034\uffa6\035\uffa6\040\uffa6\056\uffa6" +
    "\057\uffa6\110\uffa6\111\uffa6\001\002\000\030\013\uffa9\021" +
    "\uffa9\022\uffa9\033\uffa9\034\uffa9\035\uffa9\040\uffa9\056\uffa9" +
    "\057\uffa9\110\uffa9\111\uffa9\001\002\000\030\013\uffab\021" +
    "\uffab\022\uffab\033\uffab\034\uffab\035\uffab\040\uffab\056\uffab" +
    "\057\uffab\110\uffab\111\uffab\001\002\000\030\013\uffbc\021" +
    "\uffbc\022\uffbc\033\uffbc\034\uffbc\035\uffbc\040\uffbc\056\uffbc" +
    "\057\uffbc\110\uffbc\111\uffbc\001\002\000\030\013\uffad\021" +
    "\uffad\022\uffad\033\uffad\034\uffad\035\uffad\040\uffad\056\uffad" +
    "\057\uffad\110\uffad\111\uffad\001\002\000\030\013\uffb6\021" +
    "\uffb6\022\uffb6\033\uffb6\034\uffb6\035\uffb6\040\uffb6\056\uffb6" +
    "\057\uffb6\110\uffb6\111\uffb6\001\002\000\030\013\uffa5\021" +
    "\uffa5\022\uffa5\033\uffa5\034\uffa5\035\uffa5\040\uffa5\056\uffa5" +
    "\057\uffa5\110\uffa5\111\uffa5\001\002\000\030\013\uffa4\021" +
    "\uffa4\022\uffa4\033\uffa4\034\uffa4\035\uffa4\040\uffa4\056\uffa4" +
    "\057\uffa4\110\uffa4\111\uffa4\001\002\000\030\013\uffb0\021" +
    "\uffb0\022\uffb0\033\uffb0\034\uffb0\035\uffb0\040\uffb0\056\uffb0" +
    "\057\uffb0\110\uffb0\111\uffb0\001\002\000\030\013\uffba\021" +
    "\uffba\022\uffba\033\uffba\034\uffba\035\uffba\040\uffba\056\uffba" +
    "\057\uffba\110\uffba\111\uffba\001\002\000\030\013\uffb9\021" +
    "\uffb9\022\uffb9\033\uffb9\034\uffb9\035\uffb9\040\uffb9\056\uffb9" +
    "\057\uffb9\110\uffb9\111\uffb9\001\002\000\030\013\uffbd\021" +
    "\uffbd\022\uffbd\033\uffbd\034\uffbd\035\uffbd\040\uffbd\056\uffbd" +
    "\057\uffbd\110\uffbd\111\uffbd\001\002\000\030\013\uffc0\021" +
    "\uffc0\022\uffc0\033\uffc0\034\uffc0\035\uffc0\040\uffc0\056\uffc0" +
    "\057\uffc0\110\uffc0\111\uffc0\001\002\000\032\007\273\013" +
    "\uffac\021\uffac\022\uffac\033\uffac\034\uffac\035\uffac\040\uffac" +
    "\056\uffac\057\uffac\110\uffac\111\uffac\001\002\000\004\111" +
    "\262\001\002\000\030\013\uffaa\021\uffaa\022\uffaa\033\uffaa" +
    "\034\uffaa\035\uffaa\040\uffaa\056\uffaa\057\uffaa\110\uffaa\111" +
    "\uffaa\001\002\000\030\013\uffa7\021\uffa7\022\uffa7\033\uffa7" +
    "\034\uffa7\035\uffa7\040\uffa7\056\uffa7\057\uffa7\110\uffa7\111" +
    "\uffa7\001\002\000\030\013\uffb4\021\uffb4\022\uffb4\033\uffb4" +
    "\034\uffb4\035\uffb4\040\uffb4\056\uffb4\057\uffb4\110\uffb4\111" +
    "\uffb4\001\002\000\030\013\uffbe\021\uffbe\022\uffbe\033\uffbe" +
    "\034\uffbe\035\uffbe\040\uffbe\056\uffbe\057\uffbe\110\uffbe\111" +
    "\uffbe\001\002\000\030\013\uffae\021\uffae\022\uffae\033\uffae" +
    "\034\uffae\035\uffae\040\uffae\056\uffae\057\uffae\110\uffae\111" +
    "\uffae\001\002\000\030\013\uffb8\021\uffb8\022\uffb8\033\uffb8" +
    "\034\uffb8\035\uffb8\040\uffb8\056\uffb8\057\uffb8\110\uffb8\111" +
    "\uffb8\001\002\000\030\013\204\021\206\022\203\033\200" +
    "\034\174\035\177\040\207\056\210\057\201\110\175\111" +
    "\202\001\002\000\030\013\uffb1\021\uffb1\022\uffb1\033\uffb1" +
    "\034\uffb1\035\uffb1\040\uffb1\056\uffb1\057\uffb1\110\uffb1\111" +
    "\uffb1\001\002\000\030\013\uffb2\021\uffb2\022\uffb2\033\uffb2" +
    "\034\uffb2\035\uffb2\040\uffb2\056\uffb2\057\uffb2\110\uffb2\111" +
    "\uffb2\001\002\000\030\013\uffb3\021\uffb3\022\uffb3\033\uffb3" +
    "\034\uffb3\035\uffb3\040\uffb3\056\uffb3\057\uffb3\110\uffb3\111" +
    "\uffb3\001\002\000\030\013\204\021\206\022\203\033\200" +
    "\034\174\035\177\040\207\056\210\057\201\110\175\111" +
    "\202\001\002\000\030\013\204\021\206\022\203\033\200" +
    "\034\174\035\177\040\207\056\210\057\201\110\175\111" +
    "\202\001\002\000\142\002\uffc6\004\uffc6\005\217\006\uffc6" +
    "\007\240\010\242\012\230\014\225\015\226\016\220\017" +
    "\234\020\221\021\216\022\215\023\222\024\243\025\232" +
    "\026\233\027\224\030\244\031\uffc6\033\237\034\227\036" +
    "\212\037\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6\047\246" +
    "\050\247\051\223\056\241\071\235\072\236\073\250\074" +
    "\214\075\231\076\213\077\245\100\254\101\253\102\252" +
    "\103\uffc6\104\uffc6\105\uffc6\106\uffc6\107\uffc6\001\002\000" +
    "\142\002\uffc5\004\uffc5\005\217\006\uffc5\007\240\010\242" +
    "\012\230\014\225\015\226\016\220\017\234\020\221\021" +
    "\216\022\215\023\222\024\243\025\232\026\233\027\224" +
    "\030\244\031\uffc5\033\237\034\227\036\212\037\uffc5\041" +
    "\uffc5\042\uffc5\043\uffc5\044\uffc5\047\246\050\247\051\223" +
    "\056\241\071\235\072\236\073\250\074\214\075\231\076" +
    "\213\077\245\100\254\101\253\102\252\103\uffc5\104\uffc5" +
    "\105\uffc5\106\uffc5\107\uffc5\001\002\000\142\002\uffc7\004" +
    "\uffc7\005\217\006\uffc7\007\240\010\242\012\230\014\225" +
    "\015\226\016\220\017\234\020\221\021\216\022\215\023" +
    "\222\024\243\025\232\026\233\027\224\030\244\031\uffc7" +
    "\033\237\034\227\036\212\037\uffc7\041\uffc7\042\uffc7\043" +
    "\uffc7\044\uffc7\047\246\050\247\051\223\056\241\071\235" +
    "\072\236\073\250\074\214\075\231\076\213\077\245\100" +
    "\254\101\253\102\252\103\uffc7\104\uffc7\105\uffc7\106\uffc7" +
    "\107\uffc7\001\002\000\144\002\uffd2\004\uffd2\005\uffd2\006" +
    "\uffd2\007\uffd2\010\uffd2\012\uffd2\014\uffd2\015\uffd2\016\uffd2" +
    "\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025" +
    "\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\033\uffd2\034\uffd2" +
    "\036\uffd2\037\uffd2\040\264\041\uffd2\042\uffd2\043\uffd2\044" +
    "\uffd2\047\uffd2\050\uffd2\051\uffd2\056\uffd2\071\uffd2\072\uffd2" +
    "\073\uffd2\074\uffd2\075\uffd2\076\uffd2\077\uffd2\100\uffd2\101" +
    "\uffd2\102\uffd2\103\uffd2\104\uffd2\105\uffd2\106\uffd2\107\uffd2" +
    "\001\002\000\142\002\uffd3\004\uffd3\005\uffd3\006\uffd3\007" +
    "\uffd3\010\uffd3\012\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3" +
    "\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026" +
    "\uffd3\027\uffd3\030\uffd3\031\uffd3\033\uffd3\034\uffd3\036\uffd3" +
    "\037\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3\047\uffd3\050" +
    "\uffd3\051\uffd3\056\uffd3\071\uffd3\072\uffd3\073\uffd3\074\uffd3" +
    "\075\uffd3\076\uffd3\077\uffd3\100\uffd3\101\uffd3\102\uffd3\103" +
    "\uffd3\104\uffd3\105\uffd3\106\uffd3\107\uffd3\001\002\000\032" +
    "\013\204\021\206\022\203\033\200\034\174\035\177\040" +
    "\207\041\267\056\210\057\201\110\175\111\202\001\002" +
    "\000\112\005\217\007\240\010\242\012\230\014\225\015" +
    "\226\016\220\017\234\020\221\021\216\022\215\023\222" +
    "\024\243\025\232\026\233\027\224\030\244\033\237\034" +
    "\227\036\212\037\uffa0\041\uffa0\047\246\050\247\051\223" +
    "\056\241\071\235\072\236\073\250\074\214\075\231\076" +
    "\213\077\245\100\254\101\253\102\252\001\002\000\006" +
    "\037\270\041\271\001\002\000\142\002\uffa2\004\uffa2\005" +
    "\uffa2\006\uffa2\007\uffa2\010\uffa2\012\uffa2\014\uffa2\015\uffa2" +
    "\016\uffa2\017\uffa2\020\uffa2\021\uffa2\022\uffa2\023\uffa2\024" +
    "\uffa2\025\uffa2\026\uffa2\027\uffa2\030\uffa2\031\uffa2\033\uffa2" +
    "\034\uffa2\036\uffa2\037\uffa2\041\uffa2\042\uffa2\043\uffa2\044" +
    "\uffa2\047\uffa2\050\uffa2\051\uffa2\056\uffa2\071\uffa2\072\uffa2" +
    "\073\uffa2\074\uffa2\075\uffa2\076\uffa2\077\uffa2\100\uffa2\101" +
    "\uffa2\102\uffa2\103\uffa2\104\uffa2\105\uffa2\106\uffa2\107\uffa2" +
    "\001\002\000\030\013\204\021\206\022\203\033\200\034" +
    "\174\035\177\040\207\056\210\057\201\110\175\111\202" +
    "\001\002\000\142\002\uffa3\004\uffa3\005\uffa3\006\uffa3\007" +
    "\uffa3\010\uffa3\012\uffa3\014\uffa3\015\uffa3\016\uffa3\017\uffa3" +
    "\020\uffa3\021\uffa3\022\uffa3\023\uffa3\024\uffa3\025\uffa3\026" +
    "\uffa3\027\uffa3\030\uffa3\031\uffa3\033\uffa3\034\uffa3\036\uffa3" +
    "\037\uffa3\041\uffa3\042\uffa3\043\uffa3\044\uffa3\047\uffa3\050" +
    "\uffa3\051\uffa3\056\uffa3\071\uffa3\072\uffa3\073\uffa3\074\uffa3" +
    "\075\uffa3\076\uffa3\077\uffa3\100\uffa3\101\uffa3\102\uffa3\103" +
    "\uffa3\104\uffa3\105\uffa3\106\uffa3\107\uffa3\001\002\000\112" +
    "\005\217\007\240\010\242\012\230\014\225\015\226\016" +
    "\220\017\234\020\221\021\216\022\215\023\222\024\243" +
    "\025\232\026\233\027\224\030\244\033\237\034\227\036" +
    "\212\037\uffa1\041\uffa1\047\246\050\247\051\223\056\241" +
    "\071\235\072\236\073\250\074\214\075\231\076\213\077" +
    "\245\100\254\101\253\102\252\001\002\000\030\013\uffbb" +
    "\021\uffbb\022\uffbb\033\uffbb\034\uffbb\035\uffbb\040\uffbb\056" +
    "\uffbb\057\uffbb\110\uffbb\111\uffbb\001\002\000\110\005\217" +
    "\007\240\010\242\012\230\014\225\015\226\016\220\017" +
    "\234\020\221\021\216\022\215\023\222\024\243\025\232" +
    "\026\233\027\224\030\244\031\275\033\237\034\227\036" +
    "\212\047\246\050\247\051\223\056\241\071\235\072\236" +
    "\073\250\074\214\075\231\076\213\077\245\100\254\101" +
    "\253\102\252\001\002\000\030\013\204\021\206\022\203" +
    "\033\200\034\174\035\177\040\207\056\210\057\201\110" +
    "\175\111\202\001\002\000\142\002\uffc4\004\uffc4\005\217" +
    "\006\uffc4\007\uffc4\010\242\012\230\014\225\015\226\016" +
    "\220\017\234\020\221\021\216\022\215\023\222\024\243" +
    "\025\232\026\233\027\224\030\244\031\uffc4\033\237\034" +
    "\227\036\212\037\uffc4\041\uffc4\042\uffc4\043\uffc4\044\uffc4" +
    "\047\246\050\247\051\uffc4\056\241\071\uffc4\072\uffc4\073" +
    "\uffc4\074\uffc4\075\uffc4\076\uffc4\077\uffc4\100\uffc4\101\uffc4" +
    "\102\uffc4\103\uffc4\104\uffc4\105\uffc4\106\uffc4\107\uffc4\001" +
    "\002\000\144\002\uffd0\004\uffd0\005\uffd0\006\uffd0\007\uffd0" +
    "\010\uffd0\012\uffd0\014\uffd0\015\uffd0\016\uffd0\017\uffd0\020" +
    "\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0" +
    "\027\uffd0\030\uffd0\031\uffd0\033\uffd0\034\uffd0\036\uffd0\037" +
    "\uffd0\040\264\041\uffd0\042\uffd0\043\uffd0\044\uffd0\047\uffd0" +
    "\050\uffd0\051\uffd0\056\uffd0\071\uffd0\072\uffd0\073\uffd0\074" +
    "\uffd0\075\uffd0\076\uffd0\077\uffd0\100\uffd0\101\uffd0\102\uffd0" +
    "\103\uffd0\104\uffd0\105\uffd0\106\uffd0\107\uffd0\001\002\000" +
    "\142\002\uffd1\004\uffd1\005\uffd1\006\uffd1\007\uffd1\010\uffd1" +
    "\012\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1\021" +
    "\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1" +
    "\030\uffd1\031\uffd1\033\uffd1\034\uffd1\036\uffd1\037\uffd1\041" +
    "\uffd1\042\uffd1\043\uffd1\044\uffd1\047\uffd1\050\uffd1\051\uffd1" +
    "\056\uffd1\071\uffd1\072\uffd1\073\uffd1\074\uffd1\075\uffd1\076" +
    "\uffd1\077\uffd1\100\uffd1\101\uffd1\102\uffd1\103\uffd1\104\uffd1" +
    "\105\uffd1\106\uffd1\107\uffd1\001\002\000\110\005\217\006" +
    "\302\007\240\010\242\012\230\014\225\015\226\016\220" +
    "\017\234\020\221\021\216\022\215\023\222\024\243\025" +
    "\232\026\233\027\224\030\244\033\237\034\227\036\212" +
    "\047\246\050\247\051\223\056\241\071\235\072\236\073" +
    "\250\074\214\075\231\076\213\077\245\100\254\101\253" +
    "\102\252\001\002\000\142\002\uffd4\004\uffd4\005\uffd4\006" +
    "\uffd4\007\uffd4\010\uffd4\012\uffd4\014\uffd4\015\uffd4\016\uffd4" +
    "\017\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4\025" +
    "\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4\033\uffd4\034\uffd4" +
    "\036\uffd4\037\uffd4\041\uffd4\042\uffd4\043\uffd4\044\uffd4\047" +
    "\uffd4\050\uffd4\051\uffd4\056\uffd4\071\uffd4\072\uffd4\073\uffd4" +
    "\074\uffd4\075\uffd4\076\uffd4\077\uffd4\100\uffd4\101\uffd4\102" +
    "\uffd4\103\uffd4\104\uffd4\105\uffd4\106\uffd4\107\uffd4\001\002" +
    "\000\110\005\217\007\240\010\242\012\230\014\225\015" +
    "\226\016\220\017\234\020\221\021\216\022\215\023\222" +
    "\024\243\025\232\026\233\027\224\030\244\033\237\034" +
    "\227\036\212\041\304\047\246\050\247\051\223\056\241" +
    "\071\235\072\236\073\250\074\214\075\231\076\213\077" +
    "\245\100\254\101\253\102\252\001\002\000\142\002\uffc1" +
    "\004\uffc1\005\uffc1\006\uffc1\007\uffc1\010\uffc1\012\uffc1\014" +
    "\uffc1\015\uffc1\016\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1" +
    "\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1\031" +
    "\uffc1\033\uffc1\034\uffc1\036\uffc1\037\uffc1\041\uffc1\042\uffc1" +
    "\043\uffc1\044\uffc1\047\uffc1\050\uffc1\051\uffc1\056\uffc1\071" +
    "\uffc1\072\uffc1\073\uffc1\074\uffc1\075\uffc1\076\uffc1\077\uffc1" +
    "\100\uffc1\101\uffc1\102\uffc1\103\uffc1\104\uffc1\105\uffc1\106" +
    "\uffc1\107\uffc1\001\002\000\142\002\uffca\004\uffca\005\uffca" +
    "\006\uffca\007\uffca\010\uffca\012\uffca\014\uffca\015\uffca\016" +
    "\uffca\017\uffca\020\uffca\021\uffca\022\uffca\023\uffca\024\uffca" +
    "\025\uffca\026\uffca\027\uffca\030\uffca\031\uffca\033\uffca\034" +
    "\uffca\036\uffca\037\uffca\041\uffca\042\uffca\043\uffca\044\uffca" +
    "\047\uffca\050\uffca\051\uffca\056\uffca\071\uffca\072\uffca\073" +
    "\uffca\074\uffca\075\uffca\076\uffca\077\uffca\100\uffca\101\uffca" +
    "\102\uffca\103\uffca\104\uffca\105\uffca\106\uffca\107\uffca\001" +
    "\002\000\142\002\uffc3\004\uffc3\005\217\006\uffc3\007\uffc3" +
    "\010\242\012\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3\020" +
    "\221\021\216\022\215\023\uffc3\024\uffc3\025\uffc3\026\uffc3" +
    "\027\uffc3\030\uffc3\031\uffc3\033\uffc3\034\uffc3\036\uffc3\037" +
    "\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3\047\uffc3\050\uffc3" +
    "\051\uffc3\056\uffc3\071\uffc3\072\uffc3\073\uffc3\074\uffc3\075" +
    "\uffc3\076\uffc3\077\uffc3\100\uffc3\101\uffc3\102\uffc3\103\uffc3" +
    "\104\uffc3\105\uffc3\106\uffc3\107\uffc3\001\002\000\142\002" +
    "\uffcb\004\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb\012\uffcb" +
    "\014\uffcb\015\uffcb\016\uffcb\017\uffcb\020\uffcb\021\uffcb\022" +
    "\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb" +
    "\031\uffcb\033\uffcb\034\uffcb\036\uffcb\037\uffcb\041\uffcb\042" +
    "\uffcb\043\uffcb\044\uffcb\047\uffcb\050\uffcb\051\uffcb\056\uffcb" +
    "\071\uffcb\072\uffcb\073\uffcb\074\uffcb\075\uffcb\076\uffcb\077" +
    "\uffcb\100\uffcb\101\uffcb\102\uffcb\103\uffcb\104\uffcb\105\uffcb" +
    "\106\uffcb\107\uffcb\001\002\000\142\002\uffc2\004\uffc2\005" +
    "\217\006\uffc2\007\uffc2\010\242\012\uffc2\014\uffc2\015\uffc2" +
    "\016\uffc2\017\uffc2\020\221\021\216\022\215\023\uffc2\024" +
    "\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\033\uffc2" +
    "\034\uffc2\036\uffc2\037\uffc2\041\uffc2\042\uffc2\043\uffc2\044" +
    "\uffc2\047\uffc2\050\uffc2\051\uffc2\056\uffc2\071\uffc2\072\uffc2" +
    "\073\uffc2\074\uffc2\075\uffc2\076\uffc2\077\uffc2\100\uffc2\101" +
    "\uffc2\102\uffc2\103\uffc2\104\uffc2\105\uffc2\106\uffc2\107\uffc2" +
    "\001\002\000\142\002\uffcc\004\uffcc\005\217\006\uffcc\007" +
    "\uffcc\010\242\012\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc" +
    "\020\221\021\216\022\215\023\uffcc\024\uffcc\025\uffcc\026" +
    "\uffcc\027\uffcc\030\uffcc\031\uffcc\033\uffcc\034\uffcc\036\212" +
    "\037\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc\047\246\050" +
    "\uffcc\051\uffcc\056\241\071\uffcc\072\uffcc\073\uffcc\074\uffcc" +
    "\075\uffcc\076\uffcc\077\uffcc\100\uffcc\101\uffcc\102\uffcc\103" +
    "\uffcc\104\uffcc\105\uffcc\106\uffcc\107\uffcc\001\002\000\142" +
    "\002\uffc9\004\uffc9\005\217\006\uffc9\007\uffc9\010\242\012" +
    "\uffc9\014\uffc9\015\uffc9\016\uffc9\017\uffc9\020\221\021\216" +
    "\022\215\023\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\030" +
    "\uffc9\031\uffc9\033\uffc9\034\uffc9\036\uffc9\037\uffc9\041\uffc9" +
    "\042\uffc9\043\uffc9\044\uffc9\047\uffc9\050\uffc9\051\uffc9\056" +
    "\uffc9\071\uffc9\072\uffc9\073\uffc9\074\uffc9\075\uffc9\076\uffc9" +
    "\077\uffc9\100\uffc9\101\uffc9\102\uffc9\103\uffc9\104\uffc9\105" +
    "\uffc9\106\uffc9\107\uffc9\001\002\000\142\002\uffcd\004\uffcd" +
    "\005\217\006\uffcd\007\uffcd\010\242\012\uffcd\014\uffcd\015" +
    "\uffcd\016\uffcd\017\uffcd\020\221\021\216\022\215\023\uffcd" +
    "\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\033" +
    "\uffcd\034\uffcd\036\212\037\uffcd\041\uffcd\042\uffcd\043\uffcd" +
    "\044\uffcd\047\246\050\uffcd\051\uffcd\056\241\071\uffcd\072" +
    "\uffcd\073\uffcd\074\uffcd\075\uffcd\076\uffcd\077\uffcd\100\uffcd" +
    "\101\uffcd\102\uffcd\103\uffcd\104\uffcd\105\uffcd\106\uffcd\107" +
    "\uffcd\001\002\000\006\037\346\041\347\001\002\000\010" +
    "\037\uff9e\040\264\041\uff9e\001\002\000\110\005\322\007" +
    "\240\010\326\012\230\014\225\015\226\016\220\017\234" +
    "\020\323\021\321\022\320\023\222\024\243\025\232\026" +
    "\233\027\224\030\244\033\237\034\227\036\212\041\325" +
    "\047\246\050\247\051\324\056\241\071\235\072\236\073" +
    "\250\074\214\075\231\076\213\077\245\100\254\101\253" +
    "\102\252\001\002\000\030\013\165\021\171\022\166\033" +
    "\162\034\156\035\161\040\317\056\173\057\163\110\157" +
    "\111\164\001\002\000\134\002\uffe6\004\uffe6\005\uffe6\007" +
    "\uffe6\010\uffe6\012\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6" +
    "\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026" +
    "\uffe6\027\uffe6\030\uffe6\033\uffe6\034\uffe6\036\uffe6\041\uffe6" +
    "\042\uffe6\043\uffe6\044\uffe6\047\uffe6\050\uffe6\051\uffe6\056" +
    "\uffe6\071\uffe6\072\uffe6\073\uffe6\074\uffe6\075\uffe6\076\uffe6" +
    "\077\uffe6\100\uffe6\101\uffe6\102\uffe6\103\uffe6\104\uffe6\105" +
    "\uffe6\106\uffe6\107\uffe6\001\002\000\134\002\uffe5\004\uffe5" +
    "\005\uffe5\007\uffe5\010\uffe5\012\uffe5\014\uffe5\015\uffe5\016" +
    "\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5" +
    "\025\uffe5\026\uffe5\027\uffe5\030\uffe5\033\uffe5\034\uffe5\036" +
    "\uffe5\041\uffe5\042\uffe5\043\uffe5\044\uffe5\047\uffe5\050\uffe5" +
    "\051\uffe5\056\uffe5\071\uffe5\072\uffe5\073\uffe5\074\uffe5\075" +
    "\uffe5\076\uffe5\077\uffe5\100\uffe5\101\uffe5\102\uffe5\103\uffe5" +
    "\104\uffe5\105\uffe5\106\uffe5\107\uffe5\001\002\000\030\013" +
    "\204\021\206\022\203\033\200\034\174\035\177\040\207" +
    "\056\210\057\201\110\175\111\202\001\002\000\004\111" +
    "\342\001\002\000\030\013\204\021\206\022\203\033\200" +
    "\034\174\035\177\040\207\056\210\057\201\110\175\111" +
    "\202\001\002\000\134\002\uffd8\004\uffd8\005\uffd8\007\uffd8" +
    "\010\uffd8\012\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8\020" +
    "\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8" +
    "\027\uffd8\030\uffd8\033\uffd8\034\uffd8\036\uffd8\041\uffd8\042" +
    "\uffd8\043\uffd8\044\uffd8\047\uffd8\050\uffd8\051\uffd8\056\uffd8" +
    "\071\uffd8\072\uffd8\073\uffd8\074\uffd8\075\uffd8\076\uffd8\077" +
    "\uffd8\100\uffd8\101\uffd8\102\uffd8\103\uffd8\104\uffd8\105\uffd8" +
    "\106\uffd8\107\uffd8\001\002\000\004\111\335\001\002\000" +
    "\030\013\204\021\206\022\203\033\200\034\174\035\177" +
    "\040\207\056\210\057\201\110\175\111\202\001\002\000" +
    "\030\013\204\021\206\022\203\033\200\034\174\035\177" +
    "\040\207\056\210\057\201\110\175\111\202\001\002\000" +
    "\030\013\204\021\206\022\203\033\200\034\174\035\177" +
    "\040\207\056\210\057\201\110\175\111\202\001\002\000" +
    "\134\002\uffdd\004\uffdd\005\217\007\240\010\242\012\230" +
    "\014\225\015\226\016\220\017\234\020\221\021\216\022" +
    "\215\023\222\024\243\025\232\026\233\027\224\030\244" +
    "\033\237\034\227\036\212\041\uffdd\042\uffdd\043\uffdd\044" +
    "\uffdd\047\246\050\247\051\223\056\241\071\235\072\236" +
    "\073\250\074\214\075\231\076\213\077\245\100\254\101" +
    "\253\102\252\103\uffdd\104\uffdd\105\uffdd\106\uffdd\107\uffdd" +
    "\001\002\000\134\002\uffdc\004\uffdc\005\217\007\240\010" +
    "\242\012\230\014\225\015\226\016\220\017\234\020\221" +
    "\021\216\022\215\023\222\024\243\025\232\026\233\027" +
    "\224\030\244\033\237\034\227\036\212\041\uffdc\042\uffdc" +
    "\043\uffdc\044\uffdc\047\246\050\247\051\223\056\241\071" +
    "\235\072\236\073\250\074\214\075\231\076\213\077\245" +
    "\100\254\101\253\102\252\103\uffdc\104\uffdc\105\uffdc\106" +
    "\uffdc\107\uffdc\001\002\000\134\002\uffde\004\uffde\005\217" +
    "\007\240\010\242\012\230\014\225\015\226\016\220\017" +
    "\234\020\221\021\216\022\215\023\222\024\243\025\232" +
    "\026\233\027\224\030\244\033\237\034\227\036\212\041" +
    "\uffde\042\uffde\043\uffde\044\uffde\047\246\050\247\051\223" +
    "\056\241\071\235\072\236\073\250\074\214\075\231\076" +
    "\213\077\245\100\254\101\253\102\252\103\uffde\104\uffde" +
    "\105\uffde\106\uffde\107\uffde\001\002\000\136\002\uffe9\004" +
    "\uffe9\005\uffe9\007\uffe9\010\uffe9\012\uffe9\014\uffe9\015\uffe9" +
    "\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\024" +
    "\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9\033\uffe9\034\uffe9" +
    "\036\uffe9\040\264\041\uffe9\042\uffe9\043\uffe9\044\uffe9\047" +
    "\uffe9\050\uffe9\051\uffe9\056\uffe9\071\uffe9\072\uffe9\073\uffe9" +
    "\074\uffe9\075\uffe9\076\uffe9\077\uffe9\100\uffe9\101\uffe9\102" +
    "\uffe9\103\uffe9\104\uffe9\105\uffe9\106\uffe9\107\uffe9\001\002" +
    "\000\134\002\uffea\004\uffea\005\uffea\007\uffea\010\uffea\012" +
    "\uffea\014\uffea\015\uffea\016\uffea\017\uffea\020\uffea\021\uffea" +
    "\022\uffea\023\uffea\024\uffea\025\uffea\026\uffea\027\uffea\030" +
    "\uffea\033\uffea\034\uffea\036\uffea\041\uffea\042\uffea\043\uffea" +
    "\044\uffea\047\uffea\050\uffea\051\uffea\056\uffea\071\uffea\072" +
    "\uffea\073\uffea\074\uffea\075\uffea\076\uffea\077\uffea\100\uffea" +
    "\101\uffea\102\uffea\103\uffea\104\uffea\105\uffea\106\uffea\107" +
    "\uffea\001\002\000\110\005\217\007\240\010\242\012\230" +
    "\014\225\015\226\016\220\017\234\020\221\021\216\022" +
    "\215\023\222\024\243\025\232\026\233\027\224\030\244" +
    "\031\340\033\237\034\227\036\212\047\246\050\247\051" +
    "\223\056\241\071\235\072\236\073\250\074\214\075\231" +
    "\076\213\077\245\100\254\101\253\102\252\001\002\000" +
    "\030\013\204\021\206\022\203\033\200\034\174\035\177" +
    "\040\207\056\210\057\201\110\175\111\202\001\002\000" +
    "\134\002\uffdb\004\uffdb\005\217\007\uffdb\010\242\012\230" +
    "\014\225\015\226\016\220\017\234\020\221\021\216\022" +
    "\215\023\222\024\243\025\232\026\233\027\224\030\244" +
    "\033\237\034\227\036\212\041\uffdb\042\uffdb\043\uffdb\044" +
    "\uffdb\047\246\050\247\051\uffdb\056\241\071\uffdb\072\uffdb" +
    "\073\uffdb\074\uffdb\075\uffdb\076\uffdb\077\uffdb\100\uffdb\101" +
    "\uffdb\102\uffdb\103\uffdb\104\uffdb\105\uffdb\106\uffdb\107\uffdb" +
    "\001\002\000\136\002\uffe7\004\uffe7\005\uffe7\007\uffe7\010" +
    "\uffe7\012\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7" +
    "\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7\027" +
    "\uffe7\030\uffe7\033\uffe7\034\uffe7\036\uffe7\040\264\041\uffe7" +
    "\042\uffe7\043\uffe7\044\uffe7\047\uffe7\050\uffe7\051\uffe7\056" +
    "\uffe7\071\uffe7\072\uffe7\073\uffe7\074\uffe7\075\uffe7\076\uffe7" +
    "\077\uffe7\100\uffe7\101\uffe7\102\uffe7\103\uffe7\104\uffe7\105" +
    "\uffe7\106\uffe7\107\uffe7\001\002\000\134\002\uffe8\004\uffe8" +
    "\005\uffe8\007\uffe8\010\uffe8\012\uffe8\014\uffe8\015\uffe8\016" +
    "\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8" +
    "\025\uffe8\026\uffe8\027\uffe8\030\uffe8\033\uffe8\034\uffe8\036" +
    "\uffe8\041\uffe8\042\uffe8\043\uffe8\044\uffe8\047\uffe8\050\uffe8" +
    "\051\uffe8\056\uffe8\071\uffe8\072\uffe8\073\uffe8\074\uffe8\075" +
    "\uffe8\076\uffe8\077\uffe8\100\uffe8\101\uffe8\102\uffe8\103\uffe8" +
    "\104\uffe8\105\uffe8\106\uffe8\107\uffe8\001\002\000\110\005" +
    "\217\006\345\007\240\010\242\012\230\014\225\015\226" +
    "\016\220\017\234\020\221\021\216\022\215\023\222\024" +
    "\243\025\232\026\233\027\224\030\244\033\237\034\227" +
    "\036\212\047\246\050\247\051\223\056\241\071\235\072" +
    "\236\073\250\074\214\075\231\076\213\077\245\100\254" +
    "\101\253\102\252\001\002\000\134\002\uffeb\004\uffeb\005" +
    "\uffeb\007\uffeb\010\uffeb\012\uffeb\014\uffeb\015\uffeb\016\uffeb" +
    "\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb\025" +
    "\uffeb\026\uffeb\027\uffeb\030\uffeb\033\uffeb\034\uffeb\036\uffeb" +
    "\041\uffeb\042\uffeb\043\uffeb\044\uffeb\047\uffeb\050\uffeb\051" +
    "\uffeb\056\uffeb\071\uffeb\072\uffeb\073\uffeb\074\uffeb\075\uffeb" +
    "\076\uffeb\077\uffeb\100\uffeb\101\uffeb\102\uffeb\103\uffeb\104" +
    "\uffeb\105\uffeb\106\uffeb\107\uffeb\001\002\000\004\111\351" +
    "\001\002\000\030\013\204\021\206\022\203\033\200\034" +
    "\174\035\177\040\207\056\210\057\201\110\175\111\202" +
    "\001\002\000\132\002\uffef\004\uffef\005\217\007\240\010" +
    "\242\012\230\014\225\015\226\016\220\017\234\020\221" +
    "\021\216\022\215\023\222\024\243\025\232\026\233\027" +
    "\224\030\244\033\237\034\227\036\212\042\uffef\043\uffef" +
    "\044\uffef\047\246\050\247\051\223\056\241\071\235\072" +
    "\236\073\250\074\214\075\231\076\213\077\245\100\254" +
    "\101\253\102\252\103\uffef\104\uffef\105\uffef\106\uffef\107" +
    "\uffef\001\002\000\006\037\uff9f\041\uff9f\001\002\000\134" +
    "\002\uffe1\004\uffe1\005\uffe1\007\uffe1\010\uffe1\012\uffe1\014" +
    "\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1" +
    "\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\033" +
    "\uffe1\034\uffe1\036\uffe1\041\uffe1\042\uffe1\043\uffe1\044\uffe1" +
    "\047\uffe1\050\uffe1\051\uffe1\056\uffe1\071\uffe1\072\uffe1\073" +
    "\uffe1\074\uffe1\075\uffe1\076\uffe1\077\uffe1\100\uffe1\101\uffe1" +
    "\102\uffe1\103\uffe1\104\uffe1\105\uffe1\106\uffe1\107\uffe1\001" +
    "\002\000\134\002\uffe2\004\uffe2\005\uffe2\007\uffe2\010\uffe2" +
    "\012\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2\021" +
    "\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2" +
    "\030\uffe2\033\uffe2\034\uffe2\036\uffe2\041\uffe2\042\uffe2\043" +
    "\uffe2\044\uffe2\047\uffe2\050\uffe2\051\uffe2\056\uffe2\071\uffe2" +
    "\072\uffe2\073\uffe2\074\uffe2\075\uffe2\076\uffe2\077\uffe2\100" +
    "\uffe2\101\uffe2\102\uffe2\103\uffe2\104\uffe2\105\uffe2\106\uffe2" +
    "\107\uffe2\001\002\000\134\002\uffda\004\uffda\005\217\007" +
    "\uffda\010\242\012\uffda\014\uffda\015\uffda\016\uffda\017\uffda" +
    "\020\221\021\216\022\215\023\uffda\024\uffda\025\uffda\026" +
    "\uffda\027\uffda\030\uffda\033\uffda\034\uffda\036\uffda\041\uffda" +
    "\042\uffda\043\uffda\044\uffda\047\uffda\050\uffda\051\uffda\056" +
    "\uffda\071\uffda\072\uffda\073\uffda\074\uffda\075\uffda\076\uffda" +
    "\077\uffda\100\uffda\101\uffda\102\uffda\103\uffda\104\uffda\105" +
    "\uffda\106\uffda\107\uffda\001\002\000\134\002\uffd9\004\uffd9" +
    "\005\217\007\uffd9\010\242\012\uffd9\014\uffd9\015\uffd9\016" +
    "\uffd9\017\uffd9\020\221\021\216\022\215\023\uffd9\024\uffd9" +
    "\025\uffd9\026\uffd9\027\uffd9\030\uffd9\033\uffd9\034\uffd9\036" +
    "\uffd9\041\uffd9\042\uffd9\043\uffd9\044\uffd9\047\uffd9\050\uffd9" +
    "\051\uffd9\056\uffd9\071\uffd9\072\uffd9\073\uffd9\074\uffd9\075" +
    "\uffd9\076\uffd9\077\uffd9\100\uffd9\101\uffd9\102\uffd9\103\uffd9" +
    "\104\uffd9\105\uffd9\106\uffd9\107\uffd9\001\002\000\134\002" +
    "\uffe3\004\uffe3\005\217\007\uffe3\010\242\012\uffe3\014\uffe3" +
    "\015\uffe3\016\uffe3\017\uffe3\020\221\021\216\022\215\023" +
    "\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\033\uffe3" +
    "\034\uffe3\036\212\041\uffe3\042\uffe3\043\uffe3\044\uffe3\047" +
    "\246\050\uffe3\051\uffe3\056\241\071\uffe3\072\uffe3\073\uffe3" +
    "\074\uffe3\075\uffe3\076\uffe3\077\uffe3\100\uffe3\101\uffe3\102" +
    "\uffe3\103\uffe3\104\uffe3\105\uffe3\106\uffe3\107\uffe3\001\002" +
    "\000\134\002\uffe0\004\uffe0\005\217\007\uffe0\010\242\012" +
    "\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0\020\221\021\216" +
    "\022\215\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030" +
    "\uffe0\033\uffe0\034\uffe0\036\uffe0\041\uffe0\042\uffe0\043\uffe0" +
    "\044\uffe0\047\uffe0\050\uffe0\051\uffe0\056\uffe0\071\uffe0\072" +
    "\uffe0\073\uffe0\074\uffe0\075\uffe0\076\uffe0\077\uffe0\100\uffe0" +
    "\101\uffe0\102\uffe0\103\uffe0\104\uffe0\105\uffe0\106\uffe0\107" +
    "\uffe0\001\002\000\026\002\uffee\004\uffee\042\uffee\043\uffee" +
    "\044\uffee\103\uffee\104\uffee\105\uffee\106\uffee\107\uffee\001" +
    "\002\000\134\002\uffe4\004\uffe4\005\217\007\uffe4\010\242" +
    "\012\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\221\021" +
    "\216\022\215\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4" +
    "\030\uffe4\033\uffe4\034\uffe4\036\212\041\uffe4\042\uffe4\043" +
    "\uffe4\044\uffe4\047\246\050\uffe4\051\uffe4\056\241\071\uffe4" +
    "\072\uffe4\073\uffe4\074\uffe4\075\uffe4\076\uffe4\077\uffe4\100" +
    "\uffe4\101\uffe4\102\uffe4\103\uffe4\104\uffe4\105\uffe4\106\uffe4" +
    "\107\uffe4\001\002\000\064\002\ufff4\004\ufff4\042\ufff4\043" +
    "\ufff4\044\ufff4\046\ufff4\052\ufff4\053\ufff4\054\ufff4\055\ufff4" +
    "\060\ufff4\061\ufff4\062\ufff4\063\ufff4\064\ufff4\065\ufff4\066" +
    "\ufff4\067\ufff4\070\ufff4\103\ufff4\104\ufff4\105\ufff4\106\ufff4" +
    "\107\ufff4\111\ufff4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\360\000\010\003\007\004\003\022\013\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\002\154\001\001" +
    "\000\004\026\145\001\001\000\006\004\143\022\013\001" +
    "\001\000\014\006\132\010\133\023\131\024\043\025\046" +
    "\001\001\000\012\006\034\023\033\024\043\025\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\024\054\025\046\001" +
    "\001\000\002\001\001\000\006\024\051\025\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\030\075\001\001\000\014\005\100\011\077" +
    "\023\076\024\043\025\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\005\103\011\077\023\076\024\043\025\046\001\001\000" +
    "\002\001\001\000\014\005\115\011\077\023\076\024\043" +
    "\025\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\111\001\001\000\014\005\112" +
    "\011\077\023\076\024\043\025\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\006\120\007\117\022\121\023\033\024\043\025" +
    "\046\001\001\000\014\006\124\022\125\023\033\024\043" +
    "\025\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\140\001\001\000\014\005\141\011\077\023\076" +
    "\024\043\025\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\006\120\007\150\022\121\023" +
    "\033\024\043\025\046\001\001\000\014\006\124\022\125" +
    "\023\033\024\043\025\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\013\167\021\166\001\001\000\002" +
    "\001\001\000\006\012\360\013\204\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\012\356\013\204\001\001" +
    "\000\006\012\355\013\204\001\001\000\006\012\354\013" +
    "\204\001\001\000\002\001\001\000\006\012\353\013\204" +
    "\001\001\000\006\012\352\013\204\001\001\000\010\015" +
    "\326\016\330\017\327\001\001\000\002\001\001\000\006" +
    "\012\351\013\204\001\001\000\010\013\167\020\313\021" +
    "\315\001\001\000\006\012\175\013\204\001\001\000\006" +
    "\012\312\013\204\001\001\000\002\001\001\000\010\015" +
    "\250\016\255\017\254\001\001\000\006\012\311\013\204" +
    "\001\001\000\006\012\310\013\204\001\001\000\006\012" +
    "\307\013\204\001\001\000\002\001\001\000\006\012\306" +
    "\013\204\001\001\000\006\012\305\013\204\001\001\000" +
    "\002\001\001\000\006\012\304\013\204\001\001\000\006" +
    "\012\302\013\204\001\001\000\006\012\210\013\204\001" +
    "\001\000\010\015\250\016\255\017\254\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\012\300\013\204\001\001" +
    "\000\002\001\001\000\004\013\277\001\001\000\002\001" +
    "\001\000\006\012\273\013\204\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\262\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\260\013\204\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\257\013\204\001\001\000\006\012\256\013\204\001" +
    "\001\000\010\015\250\016\255\017\254\001\001\000\010" +
    "\015\250\016\255\017\254\001\001\000\010\015\250\016" +
    "\255\017\254\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\012\264\013\204\014\265\001\001\000\010\015" +
    "\250\016\255\017\254\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\012\271\013\204\001\001\000\002\001" +
    "\001\000\010\015\250\016\255\017\254\001\001\000\002" +
    "\001\001\000\010\015\250\016\255\017\254\001\001\000" +
    "\006\012\275\013\204\001\001\000\010\015\250\016\255" +
    "\017\254\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\015\250\016\255\017\254\001\001\000\002\001\001" +
    "\000\010\015\250\016\255\017\254\001\001\000\002\001" +
    "\001\000\010\015\250\016\255\017\254\001\001\000\010" +
    "\015\250\016\255\017\254\001\001\000\010\015\250\016" +
    "\255\017\254\001\001\000\010\015\250\016\255\017\254" +
    "\001\001\000\010\015\250\016\255\017\254\001\001\000" +
    "\010\015\250\016\255\017\254\001\001\000\010\015\250" +
    "\016\255\017\254\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\015\326\016\330\017\327\001\001\000\006" +
    "\013\167\021\315\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\012\343\013\204\001\001\000\004\013\342" +
    "\001\001\000\006\012\336\013\204\001\001\000\002\001" +
    "\001\000\004\013\335\001\001\000\006\012\333\013\204" +
    "\001\001\000\006\012\332\013\204\001\001\000\006\012" +
    "\331\013\204\001\001\000\010\015\250\016\255\017\254" +
    "\001\001\000\010\015\250\016\255\017\254\001\001\000" +
    "\010\015\250\016\255\017\254\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\015\250\016\255\017\254\001" +
    "\001\000\006\012\340\013\204\001\001\000\010\015\250" +
    "\016\255\017\254\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\015\250\016\255\017\254\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\012\347\013\204\001" +
    "\001\000\010\015\250\016\255\017\254\001\001\000\002" +
    "\001\001\000\010\015\250\016\255\017\254\001\001\000" +
    "\010\015\250\016\255\017\254\001\001\000\010\015\250" +
    "\016\255\017\254\001\001\000\010\015\250\016\255\017" +
    "\254\001\001\000\010\015\250\016\255\017\254\001\001" +
    "\000\010\015\250\016\255\017\254\001\001\000\002\001" +
    "\001\000\010\015\250\016\255\017\254\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public Symbol do_action(
    int                        act_num,
    lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



   
	public CodeGenerator cg = new CodeGenerator();

    public void report_error(String message, Object info) {
   
       
        StringBuilder m = new StringBuilder("Error");
   
        if (info instanceof Symbol) {
     
            Symbol s = ((Symbol) info);

            if (s.left >= 0) {                
                       m.append(" in line "+(s.left+1));   
     
                if (s.right >= 0)                    
                       m.append(", column "+(s.right+1));
            }
        }
   
        m.append(" : "+message);
   
        System.err.println(m);
    }
   
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws Exception
    {
      /* Symbol object for return from actions */
      Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // type ::= type STAR 
            {
              String RESULT =null;
		int tleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=t + "*"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",17, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // type ::= type LBRACKET NUMBER RBRACKET 
            {
              String RESULT =null;
		int tleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=t + "[" + n + "]"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",17, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // type ::= type LBRACKET RBRACKET 
            {
              String RESULT =null;
		int tleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT=t + "[]"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",17, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // type ::= pre_type 
            {
              String RESULT =null;
		int pleft = ((Symbol)CUP$parser$stack.peek()).left;
		int pright = ((Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT= p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",17, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // pre_type ::= CONST pre_type 
            {
              String RESULT =null;
		int pleft = ((Symbol)CUP$parser$stack.peek()).left;
		int pright = ((Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT="const " + p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_type",18, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // pre_type ::= UN_SIGNED pre_type 
            {
              String RESULT =null;
		int uleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int uright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object u = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((Symbol)CUP$parser$stack.peek()).left;
		int pright = ((Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT= u + " " + p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_type",18, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // pre_type ::= STRUCT ID 
            {
              String RESULT =null;
		int ileft = ((Symbol)CUP$parser$stack.peek()).left;
		int iright = ((Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT= "struct " + i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_type",18, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // pre_type ::= ID 
            {
              String RESULT =null;
		int ileft = ((Symbol)CUP$parser$stack.peek()).left;
		int iright = ((Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT= i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_type",18, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // pre_type ::= c_type 
            {
              String RESULT =null;
		int cleft = ((Symbol)CUP$parser$stack.peek()).left;
		int cright = ((Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT= c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_type",18, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // c_type ::= LDOUBLE 
            {
              String RESULT =null;
		 RESULT= "long double"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",19, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // c_type ::= DOUBLE 
            {
              String RESULT =null;
		 RESULT= "double"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",19, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // c_type ::= FLOAT 
            {
              String RESULT =null;
		 RESULT= "float"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",19, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // c_type ::= LLINT 
            {
              String RESULT =null;
		 RESULT= "long long int"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",19, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // c_type ::= LLONG 
            {
              String RESULT =null;
		 RESULT= "long long"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",19, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // c_type ::= LONG 
            {
              String RESULT =null;
		 RESULT="long"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",19, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // c_type ::= SHORT 
            {
              String RESULT =null;
		 RESULT="short"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",19, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // c_type ::= LINT 
            {
              String RESULT =null;
		 RESULT= "long int"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",19, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // c_type ::= SINT 
            {
              String RESULT =null;
		 RESULT= "short int"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",19, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // c_type ::= INT 
            {
              String RESULT =null;
		 RESULT= "int"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",19, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // c_type ::= CHAR 
            {
              String RESULT =null;
		 RESULT= "char"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",19, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ident_funcpointer ::= type LPAREN STAR RPAREN LPAREN NT$3 params RPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p4left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p4right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String p4 = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ps2left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ps2right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ps2 = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			Function funcp = parser.cg.paramsowner;
			funcp.pointer = true;
			parser.cg.paramsowner = parser.cg.params_owners.pop();
			RESULT = funcp;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident_funcpointer",7, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // NT$3 ::= 
            {
              Object RESULT =null;
		int p4left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p4right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String p4 = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

			Function funcp = new Function();
			funcp.pointer = true;
			funcp.setReturn_type(p4);
			parser.cg.params_owners.push(parser.cg.paramsowner);
			parser.cg.paramsowner = funcp;  
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",23, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // params ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",3, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // params ::= ident_funcpointer COMMA params 
            {
              Object RESULT =null;
		int p5left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p5right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object p5 = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ps2left = ((Symbol)CUP$parser$stack.peek()).left;
		int ps2right = ((Symbol)CUP$parser$stack.peek()).right;
		Object ps2 = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 
			parser.cg.paramsowner.pushParam(p5);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",3, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // params ::= ident_funcpointer 
            {
              Object RESULT =null;
		int p4left = ((Symbol)CUP$parser$stack.peek()).left;
		int p4right = ((Symbol)CUP$parser$stack.peek()).right;
		Object p4 = (Object)((Symbol) CUP$parser$stack.peek()).value;
		
			parser.cg.paramsowner.pushParam(p4);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",3, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // params ::= type COMMA DOTS 
            {
              Object RESULT =null;
		int p3left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p3right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p3 = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
			parser.cg.paramsowner.pushParam(p3);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",3, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // params ::= type COMMA params 
            {
              Object RESULT =null;
		int p2left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p2right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p2 = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int psleft = ((Symbol)CUP$parser$stack.peek()).left;
		int psright = ((Symbol)CUP$parser$stack.peek()).right;
		Object ps = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 
			parser.cg.paramsowner.pushParam(p2);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",3, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // params ::= type 
            {
              Object RESULT =null;
		int pleft = ((Symbol)CUP$parser$stack.peek()).left;
		int pright = ((Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((Symbol) CUP$parser$stack.peek()).value;
		 
			parser.cg.paramsowner.pushParam(p);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",3, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // definition ::= type LPAREN STAR ID RPAREN LPAREN NT$2 params RPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int i7left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int i7right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String i7 = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int i8left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i8right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i8 = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int psleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int psright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ps = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			Function funcp = parser.cg.paramsowner;
			funcp.pointer = true;
			parser.cg.var.setFuncpointer(funcp);
			parser.cg.paramsowner = parser.cg.params_owners.pop();
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("definition",4, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // NT$2 ::= 
            {
              Object RESULT =null;
		int i7left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i7right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i7 = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int i8left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i8right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i8 = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 
			parser.cg.var.setType(i7+"*");
			parser.cg.var.setID(i8);
			Function funcp = new Function();
			funcp.setID(i8);
			funcp.setReturn_type(i7+"*");
			parser.cg.params_owners.push(parser.cg.paramsowner);
			parser.cg.paramsowner = funcp;  
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",22, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // definition ::= definition LBRACKET NUMBER RBRACKET 
            {
              Object RESULT =null;
		int nleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			parser.cg.var.addArray(n);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("definition",4, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // definition ::= definition LBRACKET RBRACKET 
            {
              Object RESULT =null;
		
			parser.cg.var.addArray(0);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("definition",4, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // definition ::= type ID 
            {
              Object RESULT =null;
		int ileft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int i2left = ((Symbol)CUP$parser$stack.peek()).left;
		int i2right = ((Symbol)CUP$parser$stack.peek()).right;
		String i2 = (String)((Symbol) CUP$parser$stack.peek()).value;
		 
			parser.cg.var.setType(i);
			parser.cg.var.setID(i2);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("definition",4, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // struct_body ::= struct_body definition SEMI 
            {
              Object RESULT =null;
		
			if (parser.cg.structblock)
				parser.cg.addDeclaration(parser.cg.var);
			else
				parser.cg.struct.addMember(parser.cg.var);

		        parser.cg.var = new Variable();  
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("struct_body",5, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // struct_body ::= struct_body ConditionKeys 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("struct_body",5, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // struct_body ::= ConditionKeys 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("struct_body",5, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // struct_body ::= definition SEMI 
            {
              Object RESULT =null;
		
			if (parser.cg.structblock)
				parser.cg.addDeclaration(parser.cg.var);
			else
				parser.cg.struct.addMember(parser.cg.var);
		        parser.cg.var = new Variable(); 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("struct_body",5, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // func ::= type ID LPAREN NT$1 params RPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e2 = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
			RESULT = e + " " + e2 + "(" + p + ");"; 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func",6, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // NT$1 ::= 
            {
              Object RESULT =null;
		int eleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 
			parser.cg.func.setReturn_type(e);
			parser.cg.func.setID(e2);
			parser.cg.paramsowner = parser.cg.func;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",21, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // macro_params ::= 
            {
              Object RESULT =null;
		RESULT = ""; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("macro_params",14, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // macro_params ::= ID 
            {
              Object RESULT =null;
		int ileft = ((Symbol)CUP$parser$stack.peek()).left;
		int iright = ((Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((Symbol) CUP$parser$stack.peek()).value;
		RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("macro_params",14, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // macro_params ::= macro_params COMMA ID 
            {
              Object RESULT =null;
		int mleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object m = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((Symbol)CUP$parser$stack.peek()).left;
		int iright = ((Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((Symbol) CUP$parser$stack.peek()).value;
		RESULT = m+","+i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("macro_params",14, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // args ::= exp 
            {
              Object RESULT =null;
		int eleft = ((Symbol)CUP$parser$stack.peek()).left;
		int eright = ((Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((Symbol) CUP$parser$stack.peek()).value;
		RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",10, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // args ::= args COMMA exp 
            {
              Object RESULT =null;
		int aleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((Symbol)CUP$parser$stack.peek()).left;
		int eright = ((Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((Symbol) CUP$parser$stack.peek()).value;
		RESULT = a+","+e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",10, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // func_call ::= ID LPAREN RPAREN 
            {
              Object RESULT =null;
		int ileft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = i+"()"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_call",9, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // func_call ::= ID LPAREN args RPAREN 
            {
              Object RESULT =null;
		int ileft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = i+"("+a+")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_call",9, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // LogicalS ::= OR 
            {
              Object RESULT =null;
		 RESULT = "||"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalS",13, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // LogicalS ::= AND 
            {
              Object RESULT =null;
		 RESULT = "&&"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalS",13, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // LogicalS ::= NOTEQUAL 
            {
              Object RESULT =null;
		 RESULT = "!="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalS",13, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // LogicalS ::= EQUAL 
            {
              Object RESULT =null;
		 RESULT = "=="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalS",13, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // LogicalS ::= GE 
            {
              Object RESULT =null;
		 RESULT = ">="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalS",13, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // LogicalS ::= GREATER 
            {
              Object RESULT =null;
		 RESULT = ">"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalS",13, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // LogicalS ::= LE 
            {
              Object RESULT =null;
		 RESULT = "<="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalS",13, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // LogicalS ::= LESS 
            {
              Object RESULT =null;
		 RESULT = "<"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalS",13, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // B2 ::= AMPERSAND 
            {
              Object RESULT =null;
		 RESULT = "&"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("B2",12, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // B2 ::= BAR 
            {
              Object RESULT =null;
		 RESULT = "|"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("B2",12, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // B2 ::= HAT 
            {
              Object RESULT =null;
		 RESULT = "^"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("B2",12, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // B2 ::= GG 
            {
              Object RESULT =null;
		 RESULT = ">>"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("B2",12, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // B2 ::= LL 
            {
              Object RESULT =null;
		 RESULT = "<<"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("B2",12, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Ar2 ::= BAREQ 
            {
              Object RESULT =null;
		 RESULT = "|="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ar2",11, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Ar2 ::= HATEQ 
            {
              Object RESULT =null;
		 RESULT = "^="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ar2",11, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Ar2 ::= AMPERSANDEQ 
            {
              Object RESULT =null;
		 RESULT = "&="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ar2",11, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Ar2 ::= GGEQ 
            {
              Object RESULT =null;
		 RESULT = ">>="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ar2",11, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Ar2 ::= LLEQ 
            {
              Object RESULT =null;
		 RESULT = "<<="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ar2",11, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Ar2 ::= PERCENTEQ 
            {
              Object RESULT =null;
		 RESULT = "%="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ar2",11, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Ar2 ::= DIVIDEQ 
            {
              Object RESULT =null;
		 RESULT = "/="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ar2",11, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Ar2 ::= STAREQ 
            {
              Object RESULT =null;
		 RESULT = "*="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ar2",11, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Ar2 ::= MINUSEQ 
            {
              Object RESULT =null;
		 RESULT = "-="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ar2",11, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Ar2 ::= PLUSEQ 
            {
              Object RESULT =null;
		 RESULT = "+="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ar2",11, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Ar2 ::= AMPERSAND ASSIGN 
            {
              Object RESULT =null;
		 RESULT = "&="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ar2",11, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Ar2 ::= MINUS 
            {
              Object RESULT =null;
		 RESULT = "-"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ar2",11, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Ar2 ::= PLUS 
            {
              Object RESULT =null;
		 RESULT = "+"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ar2",11, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Ar2 ::= PERCENT 
            {
              Object RESULT =null;
		 RESULT = "%"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ar2",11, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Ar2 ::= DIVIDE 
            {
              Object RESULT =null;
		 RESULT = "/"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ar2",11, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Ar2 ::= ASSIGN 
            {
              Object RESULT =null;
		 RESULT = "="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ar2",11, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // exp ::= LPAREN exp RPAREN 
            {
              Object RESULT =null;
		int eleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "("+e+")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // exp ::= TILDE exp 
            {
              Object RESULT =null;
		int eleft = ((Symbol)CUP$parser$stack.peek()).left;
		int eright = ((Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "~"+e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // exp ::= BARDOT exp 
            {
              Object RESULT =null;
		int eleft = ((Symbol)CUP$parser$stack.peek()).left;
		int eright = ((Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "!"+e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // exp ::= exp QUESTIONMARK exp COLON exp 
            {
              Object RESULT =null;
		int eleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e1left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT = " ? " + e + " " + e1 +" "+e2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // exp ::= exp LogicalS exp 
            {
              Object RESULT =null;
		int eleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e + " " + e2 + " " + o; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // exp ::= exp B2 exp 
            {
              Object RESULT =null;
		int eleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e + " " + e2 + " " + o; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // exp ::= exp Ar2 exp 
            {
              Object RESULT =null;
		int eleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e + " " + e2 + " " + o; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // exp ::= AMPERSAND exp 
            {
              Object RESULT =null;
		int eleft = ((Symbol)CUP$parser$stack.peek()).left;
		int eright = ((Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "&"+e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // exp ::= STAR exp 
            {
              Object RESULT =null;
		int eleft = ((Symbol)CUP$parser$stack.peek()).left;
		int eright = ((Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "*"+e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exp ::= MM exp 
            {
              Object RESULT =null;
		int eleft = ((Symbol)CUP$parser$stack.peek()).left;
		int eright = ((Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "--"+e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exp ::= PP exp 
            {
              Object RESULT =null;
		int eleft = ((Symbol)CUP$parser$stack.peek()).left;
		int eright = ((Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "++"+e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp ::= PLUS exp 
            {
              Object RESULT =null;
		int eleft = ((Symbol)CUP$parser$stack.peek()).left;
		int eright = ((Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ""+e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp ::= MINUS exp 
            {
              Object RESULT =null;
		int eleft = ((Symbol)CUP$parser$stack.peek()).left;
		int eright = ((Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "-"+e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= exp MM 
            {
              Object RESULT =null;
		int eleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e+"--"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= exp PP 
            {
              Object RESULT =null;
		int eleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e+"++"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= exp PREF ID 
            {
              Object RESULT =null;
		int eleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((Symbol)CUP$parser$stack.peek()).left;
		int iright = ((Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e+"->"+i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= exp PREF func_call 
            {
              Object RESULT =null;
		int eleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((Symbol)CUP$parser$stack.peek()).left;
		int fright = ((Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e+"->"+f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp ::= exp DOT ID 
            {
              Object RESULT =null;
		int eleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((Symbol)CUP$parser$stack.peek()).left;
		int iright = ((Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e+"."+i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= exp DOT func_call 
            {
              Object RESULT =null;
		int eleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((Symbol)CUP$parser$stack.peek()).left;
		int fright = ((Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e+"."+f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= exp LBRACKET exp RBRACKET 
            {
              Object RESULT =null;
		int eleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e2 = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e+"["+e2+"]"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= func_call 
            {
              Object RESULT =null;
		int fleft = ((Symbol)CUP$parser$stack.peek()).left;
		int fright = ((Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp ::= ID 
            {
              Object RESULT =null;
		int ileft = ((Symbol)CUP$parser$stack.peek()).left;
		int iright = ((Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp ::= NUMBER 
            {
              Object RESULT =null;
		int nleft = ((Symbol)CUP$parser$stack.peek()).left;
		int nright = ((Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // def_val ::= LPAREN def_val RPAREN 
            {
              Object RESULT =null;
		int dleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "("+d+")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_val",15, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // def_val ::= TILDE exp 
            {
              Object RESULT =null;
		int eleft = ((Symbol)CUP$parser$stack.peek()).left;
		int eright = ((Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "~"+e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_val",15, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // def_val ::= BARDOT exp 
            {
              Object RESULT =null;
		int eleft = ((Symbol)CUP$parser$stack.peek()).left;
		int eright = ((Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "!"+e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_val",15, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // def_val ::= def_val QUESTIONMARK exp COLON exp 
            {
              Object RESULT =null;
		int dleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object d = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e1left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT = " ? "+d+" "+e1+" "+e2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_val",15, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // def_val ::= def_val LogicalS exp 
            {
              Object RESULT =null;
		int dleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object d = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((Symbol)CUP$parser$stack.peek()).left;
		int eright = ((Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT = d + " " + e + " " + o; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_val",15, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // def_val ::= def_val B2 exp 
            {
              Object RESULT =null;
		int dleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object d = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((Symbol)CUP$parser$stack.peek()).left;
		int eright = ((Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT = d + " " + e + " " + o; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_val",15, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // def_val ::= def_val Ar2 exp 
            {
              Object RESULT =null;
		int dleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object d = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((Symbol)CUP$parser$stack.peek()).left;
		int eright = ((Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT = d + " " + e + " " + o; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_val",15, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // def_val ::= AMPERSAND exp 
            {
              Object RESULT =null;
		int eleft = ((Symbol)CUP$parser$stack.peek()).left;
		int eright = ((Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "&"+e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_val",15, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // def_val ::= STAR exp 
            {
              Object RESULT =null;
		int eleft = ((Symbol)CUP$parser$stack.peek()).left;
		int eright = ((Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "*"+e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_val",15, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // def_val ::= MM exp 
            {
              Object RESULT =null;
		int eleft = ((Symbol)CUP$parser$stack.peek()).left;
		int eright = ((Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "++"+e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_val",15, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // def_val ::= PP exp 
            {
              Object RESULT =null;
		int eleft = ((Symbol)CUP$parser$stack.peek()).left;
		int eright = ((Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "++"+e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_val",15, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // def_val ::= PLUS exp 
            {
              Object RESULT =null;
		int eleft = ((Symbol)CUP$parser$stack.peek()).left;
		int eright = ((Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "+"+e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_val",15, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // def_val ::= MINUS exp 
            {
              Object RESULT =null;
		int eleft = ((Symbol)CUP$parser$stack.peek()).left;
		int eright = ((Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "-"+e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_val",15, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // def_val ::= def_val MM 
            {
              Object RESULT =null;
		int dleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = d+"--"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_val",15, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // def_val ::= def_val PP 
            {
              Object RESULT =null;
		int dleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = d+"++"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_val",15, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // def_val ::= def_val PREF ID 
            {
              Object RESULT =null;
		int dleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object d = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((Symbol)CUP$parser$stack.peek()).left;
		int iright = ((Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT = d+"->"+i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_val",15, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // def_val ::= def_val PREF func_call 
            {
              Object RESULT =null;
		int dleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object d = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((Symbol)CUP$parser$stack.peek()).left;
		int fright = ((Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT = d+"->"+f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_val",15, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // def_val ::= def_val DOT ID 
            {
              Object RESULT =null;
		int dleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object d = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((Symbol)CUP$parser$stack.peek()).left;
		int iright = ((Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT = d+"."+i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_val",15, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // def_val ::= def_val DOT func_call 
            {
              Object RESULT =null;
		int dleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object d = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((Symbol)CUP$parser$stack.peek()).left;
		int fright = ((Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT = d+"."+f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_val",15, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // def_val ::= def_val LBRACKET exp RBRACKET 
            {
              Object RESULT =null;
		int dleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object d = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = d+"["+e+"]"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_val",15, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // def_val ::= func_call 
            {
              Object RESULT =null;
		int fleft = ((Symbol)CUP$parser$stack.peek()).left;
		int fright = ((Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_val",15, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // def_val ::= NUMBER 
            {
              Object RESULT =null;
		int nleft = ((Symbol)CUP$parser$stack.peek()).left;
		int nright = ((Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_val",15, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // def_body ::= ID STRUCT ID 
            {
              Object RESULT =null;
		int ileft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((Symbol)CUP$parser$stack.peek()).left;
		int vright = ((Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((Symbol) CUP$parser$stack.peek()).value;
		
			parser.cg.declareDefine(i, "", v, true);			
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_body",0, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // def_body ::= ID LPAREN macro_params RPAREN exp 
            {
              Object RESULT =null;
		int ileft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int mleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object m = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((Symbol)CUP$parser$stack.peek()).left;
		int eright = ((Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((Symbol) CUP$parser$stack.peek()).value;
		
			parser.cg.declareDefine(i, "("+m+")", e, false);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_body",0, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // def_body ::= ID def_val 
            {
              Object RESULT =null;
		int ileft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vleft = ((Symbol)CUP$parser$stack.peek()).left;
		int vright = ((Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 
			parser.cg.declareDefine(i, "", v, false);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_body",0, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ConditionKeys ::= ENDIF 
            {
              Object RESULT =null;
		
			parser.cg.declareConditionalBlock();
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConditionKeys",16, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ConditionKeys ::= ELSE 
            {
              Object RESULT =null;
		
			parser.cg.conditionalBlocks.peek().condition = false;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConditionKeys",16, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ConditionKeys ::= IFNDEF ID 
            {
              Object RESULT =null;
		int ileft = ((Symbol)CUP$parser$stack.peek()).left;
		int iright = ((Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((Symbol) CUP$parser$stack.peek()).value;
		
			ConditionalBlock cb = new ConditionalBlock();
			cb.setID(i);
			parser.cg.conditionalBlocks.push(cb);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConditionKeys",16, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ConditionKeys ::= IFDEF ID 
            {
              Object RESULT =null;
		int ileft = ((Symbol)CUP$parser$stack.peek()).left;
		int iright = ((Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((Symbol) CUP$parser$stack.peek()).value;
		
			ConditionalBlock cb = new ConditionalBlock();
			cb.setID(i);
			if (parser.cg.structflag && !parser.cg.structblock)
			{
				cb.inStruct = true;
				parser.cg.structblock = true;
			}
			parser.cg.conditionalBlocks.push(cb);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConditionKeys",16, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // code_part ::= INCLUDE LESS ID GREATER 
            {
              Object RESULT =null;
		int ileft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.cg.addDeclaration(new Include(i)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_part",2, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // code_part ::= INCLUDE LESS ID DOT ID GREATER 
            {
              Object RESULT =null;
		int i1left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i1right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i1 = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int i2left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int i2right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i2 = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.cg.addDeclaration(new Include(i1+"."+i2)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_part",2, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // code_part ::= ConditionKeys 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_part",2, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // code_part ::= DEFINE def_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_part",2, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // code_part ::= STRUCT NT$0 ID LQ struct_body RQ SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
			parser.cg.struct.setID(i);
			parser.cg.declareStruct();
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_part",2, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$0 ::= 
            {
              Object RESULT =null;

			parser.cg.structflag = true;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",20, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // code_part ::= TYPEDEF STRUCT LQ struct_body RQ ID SEMI 
            {
              Object RESULT =null;
		int sleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object s = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.cg.declareTypedef_struct(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_part",2, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // code_part ::= TYPEDEF definition SEMI 
            {
              Object RESULT =null;
		int d2left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int d2right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d2 = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.cg.declareTypedef_var(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_part",2, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // code_part ::= EXTERN definition SEMI 
            {
              Object RESULT =null;
		int dleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.cg.declareVar(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_part",2, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // code_part ::= EXTERN func SEMI 
            {
              Object RESULT =null;
		int fleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object f = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.cg.declareFunc(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_part",2, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= code_part 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",1, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= program code_part 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",1, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

