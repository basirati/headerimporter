package stdio_parser;
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Dec 08 09:55:09 CET 2014
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Dec 08 09:55:09 CET 2014
  */
public class parser extends lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(Scanner s, SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\070\000\002\003\004\000\002\002\004\000\002\003" +
    "\003\000\002\004\005\000\002\004\005\000\002\004\005" +
    "\000\002\004\011\000\002\026\002\000\002\004\011\000" +
    "\002\004\003\000\002\004\003\000\002\004\010\000\002" +
    "\004\006\000\002\022\004\000\002\022\004\000\002\022" +
    "\003\000\002\022\003\000\002\027\002\000\002\010\010" +
    "\000\002\007\004\000\002\007\003\000\002\007\004\000" +
    "\002\007\005\000\002\006\004\000\002\006\005\000\002" +
    "\006\006\000\002\030\002\000\002\006\013\000\002\005" +
    "\003\000\002\005\005\000\002\005\005\000\002\005\003" +
    "\000\002\005\005\000\002\005\002\000\002\031\002\000" +
    "\002\011\012\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\004\000\002\024\004\000\002" +
    "\024\004\000\002\023\003\000\002\023\005\000\002\023" +
    "\006\000\002\023\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\152\000\024\004\006\042\011\043\012\044\007\103" +
    "\005\104\016\105\013\106\017\107\015\001\002\000\026" +
    "\002\uffff\004\uffff\042\uffff\043\uffff\044\uffff\103\uffff\104" +
    "\uffff\105\uffff\106\uffff\107\uffff\001\002\000\004\111\154" +
    "\001\002\000\026\002\ufff8\004\ufff8\042\ufff8\043\ufff8\044" +
    "\ufff8\103\ufff8\104\ufff8\105\ufff8\106\ufff8\107\ufff8\001\002" +
    "\000\004\111\ufffa\001\002\000\026\002\145\004\006\042" +
    "\011\043\012\044\007\103\005\104\016\105\013\106\017" +
    "\107\015\001\002\000\040\044\053\052\046\053\030\054" +
    "\043\055\044\060\033\061\032\062\041\063\040\064\050" +
    "\065\036\066\042\067\051\070\027\111\037\001\002\000" +
    "\040\044\031\052\046\053\030\054\043\055\044\060\033" +
    "\061\032\062\041\063\040\064\050\065\036\066\042\067" +
    "\051\070\027\111\037\001\002\000\064\002\ufff2\004\ufff2" +
    "\042\ufff2\043\ufff2\044\ufff2\046\ufff2\052\ufff2\053\ufff2\054" +
    "\ufff2\055\ufff2\060\ufff2\061\ufff2\062\ufff2\063\ufff2\064\ufff2" +
    "\065\ufff2\066\ufff2\067\ufff2\070\ufff2\103\ufff2\104\ufff2\105" +
    "\ufff2\106\ufff2\107\ufff2\111\ufff2\001\002\000\026\002\ufff7" +
    "\004\ufff7\042\ufff7\043\ufff7\044\ufff7\103\ufff7\104\ufff7\105" +
    "\ufff7\106\ufff7\107\ufff7\001\002\000\004\015\021\001\002" +
    "\000\004\111\020\001\002\000\064\002\ufff1\004\ufff1\042" +
    "\ufff1\043\ufff1\044\ufff1\046\ufff1\052\ufff1\053\ufff1\054\ufff1" +
    "\055\ufff1\060\ufff1\061\ufff1\062\ufff1\063\ufff1\064\ufff1\065" +
    "\ufff1\066\ufff1\067\ufff1\070\ufff1\103\ufff1\104\ufff1\105\ufff1" +
    "\106\ufff1\107\ufff1\111\ufff1\001\002\000\064\002\ufff3\004" +
    "\ufff3\042\ufff3\043\ufff3\044\ufff3\046\ufff3\052\ufff3\053\ufff3" +
    "\054\ufff3\055\ufff3\060\ufff3\061\ufff3\062\ufff3\063\ufff3\064" +
    "\ufff3\065\ufff3\066\ufff3\067\ufff3\070\ufff3\103\ufff3\104\ufff3" +
    "\105\ufff3\106\ufff3\107\ufff3\111\ufff3\001\002\000\004\111" +
    "\022\001\002\000\006\010\024\014\023\001\002\000\026" +
    "\002\ufff5\004\ufff5\042\ufff5\043\ufff5\044\ufff5\103\ufff5\104" +
    "\ufff5\105\ufff5\106\ufff5\107\ufff5\001\002\000\004\111\025" +
    "\001\002\000\004\014\026\001\002\000\026\002\ufff6\004" +
    "\ufff6\042\ufff6\043\ufff6\044\ufff6\103\ufff6\104\ufff6\105\ufff6" +
    "\106\ufff6\107\ufff6\001\002\000\016\005\uffd3\035\uffd3\037" +
    "\uffd3\040\uffd3\041\uffd3\111\uffd3\001\002\000\016\005\uffd8" +
    "\035\uffd8\037\uffd8\040\uffd8\041\uffd8\111\uffd8\001\002\000" +
    "\006\045\117\111\054\001\002\000\016\005\uffdc\035\uffdc" +
    "\037\uffdc\040\uffdc\041\uffdc\111\uffdc\001\002\000\016\005" +
    "\uffdd\035\uffdd\037\uffdd\040\uffdd\041\uffdd\111\uffdd\001\002" +
    "\000\012\005\066\035\064\040\065\111\063\001\002\000" +
    "\006\005\057\032\056\001\002\000\016\005\uffd6\035\uffd6" +
    "\037\uffd6\040\uffd6\041\uffd6\111\uffd6\001\002\000\016\005" +
    "\uffd1\035\uffd1\037\uffd1\040\uffd1\041\uffd1\111\uffd1\001\002" +
    "\000\016\005\uffda\035\uffda\037\uffda\040\uffda\041\uffda\111" +
    "\uffda\001\002\000\016\005\uffdb\035\uffdb\037\uffdb\040\uffdb" +
    "\041\uffdb\111\uffdb\001\002\000\016\005\uffd5\035\uffd5\037" +
    "\uffd5\040\uffd5\041\uffd5\111\uffd5\001\002\000\040\044\053" +
    "\052\046\053\030\054\043\055\044\060\033\061\032\062" +
    "\041\063\040\064\050\065\036\066\042\067\051\070\027" +
    "\111\037\001\002\000\040\044\053\052\046\053\030\054" +
    "\043\055\044\060\033\061\032\062\041\063\040\064\050" +
    "\065\036\066\042\067\051\070\027\111\037\001\002\000" +
    "\016\005\uffcd\035\uffcd\037\uffcd\040\uffcd\041\uffcd\111\uffcd" +
    "\001\002\000\016\005\uffd9\035\uffd9\037\uffd9\040\uffd9\041" +
    "\uffd9\111\uffd9\001\002\000\016\005\uffd2\035\uffd2\037\uffd2" +
    "\040\uffd2\041\uffd2\111\uffd2\001\002\000\016\005\uffd7\035" +
    "\uffd7\037\uffd7\040\uffd7\041\uffd7\111\uffd7\001\002\000\016" +
    "\005\uffd4\035\uffd4\037\uffd4\040\uffd4\041\uffd4\111\uffd4\001" +
    "\002\000\016\005\uffce\035\uffce\037\uffce\040\uffce\041\uffce" +
    "\111\uffce\001\002\000\004\111\054\001\002\000\016\005" +
    "\uffd0\035\uffd0\037\uffd0\040\uffd0\041\uffd0\111\uffd0\001\002" +
    "\000\016\005\uffcf\035\uffcf\037\uffcf\040\uffcf\041\uffcf\111" +
    "\uffcf\001\002\000\026\002\ufffc\004\ufffc\042\ufffc\043\ufffc" +
    "\044\ufffc\103\ufffc\104\ufffc\105\ufffc\106\ufffc\107\ufffc\001" +
    "\002\000\006\006\061\110\060\001\002\000\004\006\062" +
    "\001\002\000\006\005\uffe9\032\uffe9\001\002\000\006\005" +
    "\uffe8\032\uffe8\001\002\000\006\005\uffea\032\uffea\001\002" +
    "\000\016\005\uffca\035\uffca\037\uffca\040\uffca\041\uffca\111" +
    "\uffca\001\002\000\004\035\072\001\002\000\006\006\067" +
    "\110\070\001\002\000\016\005\uffcc\035\uffcc\037\uffcc\040" +
    "\uffcc\041\uffcc\111\uffcc\001\002\000\004\006\071\001\002" +
    "\000\016\005\uffcb\035\uffcb\037\uffcb\040\uffcb\041\uffcb\111" +
    "\uffcb\001\002\000\004\111\073\001\002\000\004\041\074" +
    "\001\002\000\004\040\075\001\002\000\042\041\uffe7\044" +
    "\uffe7\052\uffe7\053\uffe7\054\uffe7\055\uffe7\060\uffe7\061\uffe7" +
    "\062\uffe7\063\uffe7\064\uffe7\065\uffe7\066\uffe7\067\uffe7\070" +
    "\uffe7\111\uffe7\001\002\000\042\041\uffe0\044\053\052\046" +
    "\053\030\054\043\055\044\060\033\061\032\062\041\063" +
    "\040\064\050\065\036\066\042\067\051\070\027\111\037" +
    "\001\002\000\014\005\066\035\064\037\105\040\106\041" +
    "\uffe5\001\002\000\006\037\103\041\uffe2\001\002\000\004" +
    "\041\102\001\002\000\006\005\uffe6\032\uffe6\001\002\000" +
    "\042\041\uffe0\044\053\052\046\053\030\054\043\055\044" +
    "\060\033\061\032\062\041\063\040\064\050\065\036\066" +
    "\042\067\051\070\027\111\037\001\002\000\004\041\uffe1" +
    "\001\002\000\044\011\115\041\uffe0\044\053\052\046\053" +
    "\030\054\043\055\044\060\033\061\032\062\041\063\040" +
    "\064\050\065\036\066\042\067\051\070\027\111\037\001" +
    "\002\000\004\035\107\001\002\000\004\041\110\001\002" +
    "\000\004\040\111\001\002\000\042\041\uffdf\044\uffdf\052" +
    "\uffdf\053\uffdf\054\uffdf\055\uffdf\060\uffdf\061\uffdf\062\uffdf" +
    "\063\uffdf\064\uffdf\065\uffdf\066\uffdf\067\uffdf\070\uffdf\111" +
    "\uffdf\001\002\000\042\041\uffe0\044\053\052\046\053\030" +
    "\054\043\055\044\060\033\061\032\062\041\063\040\064" +
    "\050\065\036\066\042\067\051\070\027\111\037\001\002" +
    "\000\004\041\114\001\002\000\006\037\uffde\041\uffde\001" +
    "\002\000\004\041\uffe3\001\002\000\004\041\uffe4\001\002" +
    "\000\050\044\053\052\046\053\030\054\043\055\044\060" +
    "\033\061\032\062\041\063\040\064\050\065\036\066\042" +
    "\067\051\070\027\103\005\104\016\105\013\106\017\111" +
    "\037\001\002\000\052\044\053\046\124\052\046\053\030" +
    "\054\043\055\044\060\033\061\032\062\041\063\040\064" +
    "\050\065\036\066\042\067\051\070\027\103\005\104\016" +
    "\105\013\106\017\111\037\001\002\000\006\005\057\032" +
    "\123\001\002\000\052\044\uffed\046\uffed\052\uffed\053\uffed" +
    "\054\uffed\055\uffed\060\uffed\061\uffed\062\uffed\063\uffed\064" +
    "\uffed\065\uffed\066\uffed\067\uffed\070\uffed\103\uffed\104\uffed" +
    "\105\uffed\106\uffed\111\uffed\001\002\000\052\044\uffee\046" +
    "\uffee\052\uffee\053\uffee\054\uffee\055\uffee\060\uffee\061\uffee" +
    "\062\uffee\063\uffee\064\uffee\065\uffee\066\uffee\067\uffee\070" +
    "\uffee\103\uffee\104\uffee\105\uffee\106\uffee\111\uffee\001\002" +
    "\000\004\111\130\001\002\000\006\005\057\032\127\001" +
    "\002\000\052\044\uffec\046\uffec\052\uffec\053\uffec\054\uffec" +
    "\055\uffec\060\uffec\061\uffec\062\uffec\063\uffec\064\uffec\065" +
    "\uffec\066\uffec\067\uffec\070\uffec\103\uffec\104\uffec\105\uffec" +
    "\106\uffec\111\uffec\001\002\000\052\044\uffeb\046\uffeb\052" +
    "\uffeb\053\uffeb\054\uffeb\055\uffeb\060\uffeb\061\uffeb\062\uffeb" +
    "\063\uffeb\064\uffeb\065\uffeb\066\uffeb\067\uffeb\070\uffeb\103" +
    "\uffeb\104\uffeb\105\uffeb\106\uffeb\111\uffeb\001\002\000\004" +
    "\032\131\001\002\000\026\002\ufffb\004\ufffb\042\ufffb\043" +
    "\ufffb\044\ufffb\103\ufffb\104\ufffb\105\ufffb\106\ufffb\107\ufffb" +
    "\001\002\000\012\005\066\035\064\040\065\111\137\001" +
    "\002\000\006\005\057\032\136\001\002\000\004\032\135" +
    "\001\002\000\026\002\ufffe\004\ufffe\042\ufffe\043\ufffe\044" +
    "\ufffe\103\ufffe\104\ufffe\105\ufffe\106\ufffe\107\ufffe\001\002" +
    "\000\026\002\ufffd\004\ufffd\042\ufffd\043\ufffd\044\ufffd\103" +
    "\ufffd\104\ufffd\105\ufffd\106\ufffd\107\ufffd\001\002\000\010" +
    "\005\uffea\032\uffea\040\140\001\002\000\042\041\ufff0\044" +
    "\ufff0\052\ufff0\053\ufff0\054\ufff0\055\ufff0\060\ufff0\061\ufff0" +
    "\062\ufff0\063\ufff0\064\ufff0\065\ufff0\066\ufff0\067\ufff0\070" +
    "\ufff0\111\ufff0\001\002\000\042\041\uffe0\044\053\052\046" +
    "\053\030\054\043\055\044\060\033\061\032\062\041\063" +
    "\040\064\050\065\036\066\042\067\051\070\027\111\037" +
    "\001\002\000\004\041\143\001\002\000\004\032\uffef\001" +
    "\002\000\026\002\001\004\001\042\001\043\001\044\001" +
    "\103\001\104\001\105\001\106\001\107\001\001\002\000" +
    "\004\002\000\001\002\000\004\111\147\001\002\000\004" +
    "\045\150\001\002\000\050\044\053\052\046\053\030\054" +
    "\043\055\044\060\033\061\032\062\041\063\040\064\050" +
    "\065\036\066\042\067\051\070\027\103\005\104\016\105" +
    "\013\106\017\111\037\001\002\000\052\044\053\046\152" +
    "\052\046\053\030\054\043\055\044\060\033\061\032\062" +
    "\041\063\040\064\050\065\036\066\042\067\051\070\027" +
    "\103\005\104\016\105\013\106\017\111\037\001\002\000" +
    "\004\032\153\001\002\000\026\002\ufff9\004\ufff9\042\ufff9" +
    "\043\ufff9\044\ufff9\103\ufff9\104\ufff9\105\ufff9\106\ufff9\107" +
    "\ufff9\001\002\000\064\002\ufff4\004\ufff4\042\ufff4\043\ufff4" +
    "\044\ufff4\046\ufff4\052\ufff4\053\ufff4\054\ufff4\055\ufff4\060" +
    "\ufff4\061\ufff4\062\ufff4\063\ufff4\064\ufff4\065\ufff4\066\ufff4" +
    "\067\ufff4\070\ufff4\103\ufff4\104\ufff4\105\ufff4\106\ufff4\107" +
    "\ufff4\111\ufff4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\152\000\010\003\007\004\003\022\013\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\145\001\001\000\006\004\143\022\013\001\001\000" +
    "\014\006\132\010\133\023\131\024\044\025\046\001\001" +
    "\000\012\006\034\023\033\024\044\025\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\024\054\025\046\001\001\000" +
    "\006\024\051\025\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\030\075\001\001\000\014\005\100\011\077\023\076" +
    "\024\044\025\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\005\103" +
    "\011\077\023\076\024\044\025\046\001\001\000\002\001" +
    "\001\000\014\005\115\011\077\023\076\024\044\025\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\031\111\001\001\000\014\005\112\011\077" +
    "\023\076\024\044\025\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\006\120\007\117\022\121\023\033\024\044\025\046\001" +
    "\001\000\014\006\124\022\125\023\033\024\044\025\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\027" +
    "\140\001\001\000\014\005\141\011\077\023\076\024\044" +
    "\025\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\006\120\007\150\022\121\023\033\024" +
    "\044\025\046\001\001\000\014\006\124\022\125\023\033" +
    "\024\044\025\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public Symbol do_action(
    int                        act_num,
    lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



   
	public CodeGenerator cg = new CodeGenerator();

    public void report_error(String message, Object info) {
   
       
        StringBuilder m = new StringBuilder("Error");
   
        if (info instanceof Symbol) {
     
            Symbol s = ((Symbol) info);

            if (s.left >= 0) {                
                       m.append(" in line "+(s.left+1));   
     
                if (s.right >= 0)                    
                       m.append(", column "+(s.right+1));
            }
        }
   
        m.append(" : "+message);
   
        System.err.println(m);
    }
   
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws Exception
    {
      /* Symbol object for return from actions */
      Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // type ::= type STAR 
            {
              String RESULT =null;
		int tleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=t + "*"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",17, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // type ::= type LBRACKET NUMBER RBRACKET 
            {
              String RESULT =null;
		int tleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=t + "[" + n + "]"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",17, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // type ::= type LBRACKET RBRACKET 
            {
              String RESULT =null;
		int tleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT=t + "[]"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",17, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // type ::= pre_type 
            {
              String RESULT =null;
		int pleft = ((Symbol)CUP$parser$stack.peek()).left;
		int pright = ((Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT= p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",17, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // pre_type ::= CONST pre_type 
            {
              String RESULT =null;
		int pleft = ((Symbol)CUP$parser$stack.peek()).left;
		int pright = ((Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT="const " + p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_type",18, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // pre_type ::= UN_SIGNED pre_type 
            {
              String RESULT =null;
		int uleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int uright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object u = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((Symbol)CUP$parser$stack.peek()).left;
		int pright = ((Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT= u + " " + p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_type",18, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // pre_type ::= STRUCT ID 
            {
              String RESULT =null;
		int ileft = ((Symbol)CUP$parser$stack.peek()).left;
		int iright = ((Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT= "struct " + i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_type",18, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // pre_type ::= ID 
            {
              String RESULT =null;
		int ileft = ((Symbol)CUP$parser$stack.peek()).left;
		int iright = ((Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT= i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_type",18, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // pre_type ::= c_type 
            {
              String RESULT =null;
		int cleft = ((Symbol)CUP$parser$stack.peek()).left;
		int cright = ((Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT= c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_type",18, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // c_type ::= LDOUBLE 
            {
              String RESULT =null;
		 RESULT= "long double"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",19, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // c_type ::= DOUBLE 
            {
              String RESULT =null;
		 RESULT= "double"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",19, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // c_type ::= FLOAT 
            {
              String RESULT =null;
		 RESULT= "float"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",19, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // c_type ::= LLINT 
            {
              String RESULT =null;
		 RESULT= "long long int"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",19, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // c_type ::= LLONG 
            {
              String RESULT =null;
		 RESULT= "long long"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",19, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // c_type ::= LONG 
            {
              String RESULT =null;
		 RESULT="long"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",19, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // c_type ::= SHORT 
            {
              String RESULT =null;
		 RESULT="short"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",19, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // c_type ::= LINT 
            {
              String RESULT =null;
		 RESULT= "long int"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",19, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // c_type ::= SINT 
            {
              String RESULT =null;
		 RESULT= "short int"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",19, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // c_type ::= INT 
            {
              String RESULT =null;
		 RESULT= "int"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",19, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // c_type ::= CHAR 
            {
              String RESULT =null;
		 RESULT= "char"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",19, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ident_funcpointer ::= type LPAREN STAR RPAREN LPAREN NT$3 params RPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p4left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p4right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String p4 = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ps2left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ps2right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ps2 = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			Function funcp = parser.cg.paramsowner;
			funcp.pointer = true;
			parser.cg.paramsowner = parser.cg.params_owners.pop();
			RESULT = funcp;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident_funcpointer",7, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$3 ::= 
            {
              Object RESULT =null;
		int p4left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p4right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String p4 = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

			Function funcp = new Function();
			funcp.pointer = true;
			funcp.setReturn_type(p4);
			parser.cg.params_owners.push(parser.cg.paramsowner);
			parser.cg.paramsowner = funcp;  
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",23, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // params ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",3, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // params ::= ident_funcpointer COMMA params 
            {
              Object RESULT =null;
		int p5left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p5right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object p5 = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ps2left = ((Symbol)CUP$parser$stack.peek()).left;
		int ps2right = ((Symbol)CUP$parser$stack.peek()).right;
		Object ps2 = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 
			parser.cg.paramsowner.pushParam(p5);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",3, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // params ::= ident_funcpointer 
            {
              Object RESULT =null;
		int p4left = ((Symbol)CUP$parser$stack.peek()).left;
		int p4right = ((Symbol)CUP$parser$stack.peek()).right;
		Object p4 = (Object)((Symbol) CUP$parser$stack.peek()).value;
		
			parser.cg.paramsowner.pushParam(p4);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",3, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // params ::= type COMMA DOTS 
            {
              Object RESULT =null;
		int p3left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p3right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p3 = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
			parser.cg.paramsowner.pushParam(p3);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",3, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // params ::= type COMMA params 
            {
              Object RESULT =null;
		int p2left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p2right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p2 = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int psleft = ((Symbol)CUP$parser$stack.peek()).left;
		int psright = ((Symbol)CUP$parser$stack.peek()).right;
		Object ps = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 
			parser.cg.paramsowner.pushParam(p2);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",3, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // params ::= type 
            {
              Object RESULT =null;
		int pleft = ((Symbol)CUP$parser$stack.peek()).left;
		int pright = ((Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((Symbol) CUP$parser$stack.peek()).value;
		 
			parser.cg.paramsowner.pushParam(p);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",3, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // definition ::= type LPAREN STAR ID RPAREN LPAREN NT$2 params RPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int i7left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int i7right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String i7 = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int i8left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i8right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i8 = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int psleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int psright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ps = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			Function funcp = parser.cg.paramsowner;
			funcp.pointer = true;
			parser.cg.var.setFuncpointer(funcp);
			parser.cg.paramsowner = parser.cg.params_owners.pop();
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("definition",4, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$2 ::= 
            {
              Object RESULT =null;
		int i7left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i7right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i7 = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int i8left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i8right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i8 = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 
			parser.cg.var.setType(i7+"*");
			parser.cg.var.setID(i8);
			Function funcp = new Function();
			funcp.setID(i8);
			funcp.setReturn_type(i7+"*");
			parser.cg.params_owners.push(parser.cg.paramsowner);
			parser.cg.paramsowner = funcp;  
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",22, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // definition ::= definition LBRACKET NUMBER RBRACKET 
            {
              Object RESULT =null;
		int nleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			parser.cg.var.addArray(n);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("definition",4, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // definition ::= definition LBRACKET RBRACKET 
            {
              Object RESULT =null;
		
			parser.cg.var.addArray(0);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("definition",4, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // definition ::= type ID 
            {
              Object RESULT =null;
		int ileft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int i2left = ((Symbol)CUP$parser$stack.peek()).left;
		int i2right = ((Symbol)CUP$parser$stack.peek()).right;
		String i2 = (String)((Symbol) CUP$parser$stack.peek()).value;
		 
			parser.cg.var.setType(i);
			parser.cg.var.setID(i2);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("definition",4, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // struct_body ::= struct_body definition SEMI 
            {
              Object RESULT =null;
		
			if (parser.cg.structblock)
				parser.cg.addDeclaration(parser.cg.var);
			else
				parser.cg.struct.addMember(parser.cg.var);

		        parser.cg.var = new Variable();  
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("struct_body",5, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // struct_body ::= struct_body ConditionKeys 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("struct_body",5, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // struct_body ::= ConditionKeys 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("struct_body",5, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // struct_body ::= definition SEMI 
            {
              Object RESULT =null;
		
			if (parser.cg.structblock)
				parser.cg.addDeclaration(parser.cg.var);
			else
				parser.cg.struct.addMember(parser.cg.var);
		        parser.cg.var = new Variable(); 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("struct_body",5, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // func ::= type ID LPAREN NT$1 params RPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e2 = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
			RESULT = e + " " + e2 + "(" + p + ");"; 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func",6, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$1 ::= 
            {
              Object RESULT =null;
		int eleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 
			parser.cg.func.setReturn_type(e);
			parser.cg.func.setID(e2);
			parser.cg.paramsowner = parser.cg.func;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",21, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ConditionKeys ::= ENDIF 
            {
              Object RESULT =null;
		
			parser.cg.declareConditionalBlock();
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConditionKeys",16, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ConditionKeys ::= ELSE 
            {
              Object RESULT =null;
		
			parser.cg.conditionalBlocks.peek().condition = false;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConditionKeys",16, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ConditionKeys ::= IFNDEF ID 
            {
              Object RESULT =null;
		int ileft = ((Symbol)CUP$parser$stack.peek()).left;
		int iright = ((Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((Symbol) CUP$parser$stack.peek()).value;
		
			ConditionalBlock cb = new ConditionalBlock();
			cb.setID(i);
			parser.cg.conditionalBlocks.push(cb);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConditionKeys",16, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ConditionKeys ::= IFDEF ID 
            {
              Object RESULT =null;
		int ileft = ((Symbol)CUP$parser$stack.peek()).left;
		int iright = ((Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((Symbol) CUP$parser$stack.peek()).value;
		
			ConditionalBlock cb = new ConditionalBlock();
			cb.setID(i);
			if (parser.cg.structflag && !parser.cg.structblock)
			{
				cb.inStruct = true;
				parser.cg.structblock = true;
			}
			parser.cg.conditionalBlocks.push(cb);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConditionKeys",16, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // code_part ::= INCLUDE LESS ID GREATER 
            {
              Object RESULT =null;
		int ileft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.cg.addDeclaration(new Include(i)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_part",2, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // code_part ::= INCLUDE LESS ID DOT ID GREATER 
            {
              Object RESULT =null;
		int i1left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i1right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i1 = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int i2left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int i2right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i2 = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.cg.addDeclaration(new Include(i1+"."+i2)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_part",2, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // code_part ::= ConditionKeys 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_part",2, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // code_part ::= DEFINE 
            {
              Object RESULT =null;
		int dleft = ((Symbol)CUP$parser$stack.peek()).left;
		int dright = ((Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((Symbol) CUP$parser$stack.peek()).value;
		
			parser.cg.define.setExp(d);
			parser.cg.define.setID("");
			parser.cg.declareDefine();
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_part",2, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // code_part ::= STRUCT NT$0 ID LQ struct_body RQ SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
			parser.cg.struct.setID(i);
			parser.cg.declareStruct();
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_part",2, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$0 ::= 
            {
              Object RESULT =null;

			parser.cg.structflag = true;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",20, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // code_part ::= TYPEDEF STRUCT LQ struct_body RQ ID SEMI 
            {
              Object RESULT =null;
		int sleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object s = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.cg.declareTypedef_struct(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_part",2, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // code_part ::= TYPEDEF definition SEMI 
            {
              Object RESULT =null;
		int d2left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int d2right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d2 = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.cg.declareTypedef_var(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_part",2, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // code_part ::= EXTERN definition SEMI 
            {
              Object RESULT =null;
		int dleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.cg.declareVar(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_part",2, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // code_part ::= EXTERN func SEMI 
            {
              Object RESULT =null;
		int fleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object f = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.cg.declareFunc(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_part",2, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= code_part 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",1, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= program code_part 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",1, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

