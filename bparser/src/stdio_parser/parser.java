package stdio_parser;
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Dec 19 16:26:00 CET 2014
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Dec 19 16:26:00 CET 2014
  */
public class parser extends lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(Scanner s, SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\075\000\002\004\004\000\002\002\004\000\002\004" +
    "\003\000\002\005\003\000\002\005\004\000\002\005\005" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\004\000\002\002\004\000\002" +
    "\002\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\024\004\000\002\024\010" +
    "\000\002\032\002\000\002\023\010\000\002\026\003\000" +
    "\002\033\002\000\002\010\010\000\002\007\004\000\002" +
    "\007\003\000\002\007\004\000\002\007\005\000\002\025" +
    "\004\000\002\025\005\000\002\025\006\000\002\034\002" +
    "\000\002\025\013\000\002\006\003\000\002\006\005\000" +
    "\002\006\005\000\002\006\003\000\002\006\005\000\002" +
    "\006\002\000\002\035\002\000\002\011\012\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\031\003\000\002\030\003\000\002\030\003\000\002\030" +
    "\004\000\002\030\004\000\002\030\004\000\002\027\003" +
    "\000\002\027\005\000\002\027\006\000\002\027\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\146\000\060\004\023\006\011\007\013\045\004\046" +
    "\035\047\012\055\041\056\007\057\033\060\040\063\016" +
    "\064\014\065\031\066\027\067\045\070\022\071\032\072" +
    "\046\073\006\106\010\107\015\112\005\114\025\001\002" +
    "\000\042\046\035\047\012\055\041\056\007\057\033\060" +
    "\040\063\016\064\014\065\031\066\027\067\045\070\022" +
    "\071\032\072\046\073\006\114\025\001\002\000\064\002" +
    "\ufff5\004\ufff5\006\ufff5\007\ufff5\045\ufff5\046\ufff5\047\ufff5" +
    "\051\ufff5\055\ufff5\056\ufff5\057\ufff5\060\ufff5\063\ufff5\064" +
    "\ufff5\065\ufff5\066\ufff5\067\ufff5\070\ufff5\071\ufff5\072\ufff5" +
    "\073\ufff5\106\ufff5\107\ufff5\112\ufff5\114\ufff5\001\002\000" +
    "\016\010\uffce\040\uffce\042\uffce\043\uffce\044\uffce\114\uffce" +
    "\001\002\000\016\010\uffd3\040\uffd3\042\uffd3\043\uffd3\044" +
    "\uffd3\114\uffd3\001\002\000\064\002\ufffa\004\ufffa\006\ufffa" +
    "\007\ufffa\045\ufffa\046\ufffa\047\ufffa\051\ufffa\055\ufffa\056" +
    "\ufffa\057\ufffa\060\ufffa\063\ufffa\064\ufffa\065\ufffa\066\ufffa" +
    "\067\ufffa\070\ufffa\071\ufffa\072\ufffa\073\ufffa\106\ufffa\107" +
    "\ufffa\112\ufffa\114\ufffa\001\002\000\006\110\145\111\146" +
    "\001\002\000\004\114\051\001\002\000\064\002\ufff8\004" +
    "\ufff8\006\ufff8\007\ufff8\045\ufff8\046\ufff8\047\ufff8\051\ufff8" +
    "\055\ufff8\056\ufff8\057\ufff8\060\ufff8\063\ufff8\064\ufff8\065" +
    "\ufff8\066\ufff8\067\ufff8\070\ufff8\071\ufff8\072\ufff8\073\ufff8" +
    "\106\ufff8\107\ufff8\112\ufff8\114\ufff8\001\002\000\016\010" +
    "\uffd7\040\uffd7\042\uffd7\043\uffd7\044\uffd7\114\uffd7\001\002" +
    "\000\064\002\ufff9\004\ufff9\006\ufff9\007\ufff9\045\ufff9\046" +
    "\ufff9\047\ufff9\051\ufff9\055\ufff9\056\ufff9\057\ufff9\060\ufff9" +
    "\063\ufff9\064\ufff9\065\ufff9\066\ufff9\067\ufff9\070\ufff9\071" +
    "\ufff9\072\ufff9\073\ufff9\106\ufff9\107\ufff9\112\ufff9\114\ufff9" +
    "\001\002\000\016\010\uffd8\040\uffd8\042\uffd8\043\uffd8\044" +
    "\uffd8\114\uffd8\001\002\000\012\010\064\040\062\043\063" +
    "\114\133\001\002\000\062\002\uffff\004\uffff\006\uffff\007" +
    "\uffff\045\uffff\046\uffff\047\uffff\055\uffff\056\uffff\057\uffff" +
    "\060\uffff\063\uffff\064\uffff\065\uffff\066\uffff\067\uffff\070" +
    "\uffff\071\uffff\072\uffff\073\uffff\106\uffff\107\uffff\112\uffff" +
    "\114\uffff\001\002\000\004\035\uffec\001\002\000\016\010" +
    "\uffd1\040\uffd1\042\uffd1\043\uffd1\044\uffd1\114\uffd1\001\002" +
    "\000\064\002\ufffb\004\ufffb\006\ufffb\007\ufffb\045\ufffb\046" +
    "\ufffb\047\ufffb\051\ufffb\055\ufffb\056\ufffb\057\ufffb\060\ufffb" +
    "\063\ufffb\064\ufffb\065\ufffb\066\ufffb\067\ufffb\070\ufffb\071" +
    "\ufffb\072\ufffb\073\ufffb\106\ufffb\107\ufffb\112\ufffb\114\ufffb" +
    "\001\002\000\062\002\132\004\023\006\011\007\013\045" +
    "\004\046\035\047\012\055\041\056\007\057\033\060\040" +
    "\063\016\064\014\065\031\066\027\067\045\070\022\071" +
    "\032\072\046\073\006\106\010\107\015\112\005\114\025" +
    "\001\002\000\016\010\uffcc\040\uffcc\042\uffcc\043\uffcc\044" +
    "\uffcc\114\uffcc\001\002\000\004\035\ufff1\001\002\000\016" +
    "\010\uffd5\040\uffd5\042\uffd5\043\uffd5\044\uffd5\114\uffd5\001" +
    "\002\000\004\035\130\001\002\000\016\010\uffd6\040\uffd6" +
    "\042\uffd6\043\uffd6\044\uffd6\114\uffd6\001\002\000\016\010" +
    "\uffd0\040\uffd0\042\uffd0\043\uffd0\044\uffd0\114\uffd0\001\002" +
    "\000\040\047\050\055\041\056\007\057\033\060\040\063" +
    "\016\064\014\065\031\066\027\067\045\070\022\071\032" +
    "\072\046\073\006\114\025\001\002\000\062\002\ufffe\004" +
    "\ufffe\006\ufffe\007\ufffe\045\ufffe\046\ufffe\047\ufffe\055\ufffe" +
    "\056\ufffe\057\ufffe\060\ufffe\063\ufffe\064\ufffe\065\ufffe\066" +
    "\ufffe\067\ufffe\070\ufffe\071\ufffe\072\ufffe\073\ufffe\106\ufffe" +
    "\107\ufffe\112\ufffe\114\ufffe\001\002\000\040\047\056\055" +
    "\041\056\007\057\033\060\040\063\016\064\014\065\031" +
    "\066\027\067\045\070\022\071\032\072\046\073\006\114" +
    "\025\001\002\000\006\010\052\035\ufff2\001\002\000\016" +
    "\010\uffc8\040\uffc8\042\uffc8\043\uffc8\044\uffc8\114\uffc8\001" +
    "\002\000\040\047\050\055\041\056\007\057\033\060\040" +
    "\063\016\064\014\065\031\066\027\067\045\070\022\071" +
    "\032\072\046\073\006\114\025\001\002\000\016\010\uffd4" +
    "\040\uffd4\042\uffd4\043\uffd4\044\uffd4\114\uffd4\001\002\000" +
    "\004\035\ufff4\001\002\000\016\010\uffcd\040\uffcd\042\uffcd" +
    "\043\uffcd\044\uffcd\114\uffcd\001\002\000\004\035\ufff3\001" +
    "\002\000\016\010\uffd2\040\uffd2\042\uffd2\043\uffd2\044\uffd2" +
    "\114\uffd2\001\002\000\016\010\uffcf\040\uffcf\042\uffcf\043" +
    "\uffcf\044\uffcf\114\uffcf\001\002\000\016\010\uffc9\040\uffc9" +
    "\042\uffc9\043\uffc9\044\uffc9\114\uffc9\001\002\000\004\114" +
    "\051\001\002\000\016\010\uffcb\040\uffcb\042\uffcb\043\uffcb" +
    "\044\uffcb\114\uffcb\001\002\000\006\011\054\113\053\001" +
    "\002\000\004\011\055\001\002\000\006\010\uffe4\035\uffe4" +
    "\001\002\000\006\010\uffe3\035\uffe3\001\002\000\006\050" +
    "\115\114\051\001\002\000\012\010\064\040\062\043\063" +
    "\114\061\001\002\000\006\010\052\035\ufff0\001\002\000" +
    "\006\010\uffe5\035\uffe5\001\002\000\016\010\uffc5\040\uffc5" +
    "\042\uffc5\043\uffc5\044\uffc5\114\uffc5\001\002\000\004\040" +
    "\070\001\002\000\006\011\065\113\066\001\002\000\016" +
    "\010\uffc7\040\uffc7\042\uffc7\043\uffc7\044\uffc7\114\uffc7\001" +
    "\002\000\004\011\067\001\002\000\016\010\uffc6\040\uffc6" +
    "\042\uffc6\043\uffc6\044\uffc6\114\uffc6\001\002\000\004\114" +
    "\071\001\002\000\004\044\072\001\002\000\004\043\073" +
    "\001\002\000\042\044\uffe2\047\uffe2\055\uffe2\056\uffe2\057" +
    "\uffe2\060\uffe2\063\uffe2\064\uffe2\065\uffe2\066\uffe2\067\uffe2" +
    "\070\uffe2\071\uffe2\072\uffe2\073\uffe2\114\uffe2\001\002\000" +
    "\042\044\uffdb\047\050\055\041\056\007\057\033\060\040" +
    "\063\016\064\014\065\031\066\027\067\045\070\022\071" +
    "\032\072\046\073\006\114\025\001\002\000\014\010\064" +
    "\040\062\042\103\043\104\044\uffe0\001\002\000\006\042" +
    "\101\044\uffdd\001\002\000\004\044\100\001\002\000\006" +
    "\010\uffe1\035\uffe1\001\002\000\042\044\uffdb\047\050\055" +
    "\041\056\007\057\033\060\040\063\016\064\014\065\031" +
    "\066\027\067\045\070\022\071\032\072\046\073\006\114" +
    "\025\001\002\000\004\044\uffdc\001\002\000\044\014\113" +
    "\044\uffdb\047\050\055\041\056\007\057\033\060\040\063" +
    "\016\064\014\065\031\066\027\067\045\070\022\071\032" +
    "\072\046\073\006\114\025\001\002\000\004\040\105\001" +
    "\002\000\004\044\106\001\002\000\004\043\107\001\002" +
    "\000\042\044\uffda\047\uffda\055\uffda\056\uffda\057\uffda\060" +
    "\uffda\063\uffda\064\uffda\065\uffda\066\uffda\067\uffda\070\uffda" +
    "\071\uffda\072\uffda\073\uffda\114\uffda\001\002\000\042\044" +
    "\uffdb\047\050\055\041\056\007\057\033\060\040\063\016" +
    "\064\014\065\031\066\027\067\045\070\022\071\032\072" +
    "\046\073\006\114\025\001\002\000\004\044\112\001\002" +
    "\000\006\042\uffd9\044\uffd9\001\002\000\004\044\uffde\001" +
    "\002\000\004\044\uffdf\001\002\000\054\004\023\006\011" +
    "\007\013\047\050\055\041\056\007\057\033\060\040\063" +
    "\016\064\014\065\031\066\027\067\045\070\022\071\032" +
    "\072\046\073\006\106\010\107\015\112\005\114\025\001" +
    "\002\000\056\004\023\006\011\007\013\047\050\051\122" +
    "\055\041\056\007\057\033\060\040\063\016\064\014\065" +
    "\031\066\027\067\045\070\022\071\032\072\046\073\006" +
    "\106\010\107\015\112\005\114\025\001\002\000\056\004" +
    "\uffe8\006\uffe8\007\uffe8\047\uffe8\051\uffe8\055\uffe8\056\uffe8" +
    "\057\uffe8\060\uffe8\063\uffe8\064\uffe8\065\uffe8\066\uffe8\067" +
    "\uffe8\070\uffe8\071\uffe8\072\uffe8\073\uffe8\106\uffe8\107\uffe8" +
    "\112\uffe8\114\uffe8\001\002\000\006\010\052\035\121\001" +
    "\002\000\056\004\uffe9\006\uffe9\007\uffe9\047\uffe9\051\uffe9" +
    "\055\uffe9\056\uffe9\057\uffe9\060\uffe9\063\uffe9\064\uffe9\065" +
    "\uffe9\066\uffe9\067\uffe9\070\uffe9\071\uffe9\072\uffe9\073\uffe9" +
    "\106\uffe9\107\uffe9\112\uffe9\114\uffe9\001\002\000\004\114" +
    "\126\001\002\000\056\004\uffe7\006\uffe7\007\uffe7\047\uffe7" +
    "\051\uffe7\055\uffe7\056\uffe7\057\uffe7\060\uffe7\063\uffe7\064" +
    "\uffe7\065\uffe7\066\uffe7\067\uffe7\070\uffe7\071\uffe7\072\uffe7" +
    "\073\uffe7\106\uffe7\107\uffe7\112\uffe7\114\uffe7\001\002\000" +
    "\006\010\052\035\125\001\002\000\056\004\uffe6\006\uffe6" +
    "\007\uffe6\047\uffe6\051\uffe6\055\uffe6\056\uffe6\057\uffe6\060" +
    "\uffe6\063\uffe6\064\uffe6\065\uffe6\066\uffe6\067\uffe6\070\uffe6" +
    "\071\uffe6\072\uffe6\073\uffe6\106\uffe6\107\uffe6\112\uffe6\114" +
    "\uffe6\001\002\000\004\035\uffef\001\002\000\016\010\uffca" +
    "\040\uffca\042\uffca\043\uffca\044\uffca\114\uffca\001\002\000" +
    "\062\002\ufffd\004\ufffd\006\ufffd\007\ufffd\045\ufffd\046\ufffd" +
    "\047\ufffd\055\ufffd\056\ufffd\057\ufffd\060\ufffd\063\ufffd\064" +
    "\ufffd\065\ufffd\066\ufffd\067\ufffd\070\ufffd\071\ufffd\072\ufffd" +
    "\073\ufffd\106\ufffd\107\ufffd\112\ufffd\114\ufffd\001\002\000" +
    "\062\002\001\004\001\006\001\007\001\045\001\046\001" +
    "\047\001\055\001\056\001\057\001\060\001\063\001\064" +
    "\001\065\001\066\001\067\001\070\001\071\001\072\001" +
    "\073\001\106\001\107\001\112\001\114\001\001\002\000" +
    "\004\002\000\001\002\000\010\010\uffe5\035\uffe5\043\134" +
    "\001\002\000\042\044\uffeb\047\uffeb\055\uffeb\056\uffeb\057" +
    "\uffeb\060\uffeb\063\uffeb\064\uffeb\065\uffeb\066\uffeb\067\uffeb" +
    "\070\uffeb\071\uffeb\072\uffeb\073\uffeb\114\uffeb\001\002\000" +
    "\042\044\uffdb\047\050\055\041\056\007\057\033\060\040" +
    "\063\016\064\014\065\031\066\027\067\045\070\022\071" +
    "\032\072\046\073\006\114\025\001\002\000\004\044\137" +
    "\001\002\000\004\035\uffea\001\002\000\004\114\141\001" +
    "\002\000\004\050\142\001\002\000\054\004\023\006\011" +
    "\007\013\047\050\055\041\056\007\057\033\060\040\063" +
    "\016\064\014\065\031\066\027\067\045\070\022\071\032" +
    "\072\046\073\006\106\010\107\015\112\005\114\025\001" +
    "\002\000\056\004\023\006\011\007\013\047\050\051\144" +
    "\055\041\056\007\057\033\060\040\063\016\064\014\065" +
    "\031\066\027\067\045\070\022\071\032\072\046\073\006" +
    "\106\010\107\015\112\005\114\025\001\002\000\004\035" +
    "\uffed\001\002\000\064\002\ufff7\004\ufff7\006\ufff7\007\ufff7" +
    "\045\ufff7\046\ufff7\047\ufff7\051\ufff7\055\ufff7\056\ufff7\057" +
    "\ufff7\060\ufff7\063\ufff7\064\ufff7\065\ufff7\066\ufff7\067\ufff7" +
    "\070\ufff7\071\ufff7\072\ufff7\073\ufff7\106\ufff7\107\ufff7\112" +
    "\ufff7\114\ufff7\001\002\000\064\002\ufff6\004\ufff6\006\ufff6" +
    "\007\ufff6\045\ufff6\046\ufff6\047\ufff6\051\ufff6\055\ufff6\056" +
    "\ufff6\057\ufff6\060\ufff6\063\ufff6\064\ufff6\065\ufff6\066\ufff6" +
    "\067\ufff6\070\ufff6\071\ufff6\072\ufff6\073\ufff6\106\ufff6\107" +
    "\ufff6\112\ufff6\114\ufff6\001\002\000\004\035\150\001\002" +
    "\000\062\002\ufffc\004\ufffc\006\ufffc\007\ufffc\045\ufffc\046" +
    "\ufffc\047\ufffc\055\ufffc\056\ufffc\057\ufffc\060\ufffc\063\ufffc" +
    "\064\ufffc\065\ufffc\066\ufffc\067\ufffc\070\ufffc\071\ufffc\072" +
    "\ufffc\073\ufffc\106\ufffc\107\ufffc\112\ufffc\114\ufffc\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\146\000\032\002\033\004\023\005\017\010\020\022" +
    "\027\023\043\024\041\025\035\026\025\027\016\030\036" +
    "\031\042\001\001\000\024\010\020\022\146\023\043\024" +
    "\041\025\035\026\025\027\016\030\036\031\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\032\137\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\002" +
    "\033\005\130\010\020\022\027\023\043\024\041\025\035" +
    "\026\025\027\016\030\036\031\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\030\126\031" +
    "\042\001\001\000\002\001\001\000\012\025\057\027\056" +
    "\030\036\031\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\030\046\031\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\034\073" +
    "\001\001\000\014\006\076\011\075\027\074\030\036\031" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\006\101\011\075\027" +
    "\074\030\036\031\042\001\001\000\002\001\001\000\014" +
    "\006\113\011\075\027\074\030\036\031\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\035\107\001\001\000\014\006\110\011\075\027\074\030" +
    "\036\031\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\002\116\007" +
    "\115\025\117\027\056\030\036\031\042\001\001\000\014" +
    "\002\122\025\123\027\056\030\036\031\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\033\134\001\001\000\014\006\135\011\075\027\074" +
    "\030\036\031\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\002\116" +
    "\007\142\025\117\027\056\030\036\031\042\001\001\000" +
    "\014\002\122\025\123\027\056\030\036\031\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public Symbol do_action(
    int                        act_num,
    lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public CodeGenerator cg = new CodeGenerator();
	public void report_error(String message, Object info) {
		StringBuilder m = new StringBuilder("Error");
		if (info instanceof Symbol) {
			Symbol s = ((Symbol) info);
			if (s.left >= 0) {                
				m.append(" in line "+(s.left+1));   
				if (s.right >= 0)                    
					m.append(", column "+(s.right+1));
			}
		}
   
        	m.append(" : "+message);
   
        	System.err.println(m);
    	}
	
	public void report_fatal_error(String message, Object info) {
	report_error(message, info);
	System.exit(0);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws Exception
    {
      /* Symbol object for return from actions */
      Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // type ::= type STAR 
            {
              String RESULT =null;
		int tleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=t + "*"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",21, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // type ::= type LBRACKET NUMBER RBRACKET 
            {
              String RESULT =null;
		int tleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=t + "[" + n + "]"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",21, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // type ::= type LBRACKET RBRACKET 
            {
              String RESULT =null;
		int tleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT=t + "[]"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",21, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // type ::= pre_type 
            {
              String RESULT =null;
		int pleft = ((Symbol)CUP$parser$stack.peek()).left;
		int pright = ((Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT= p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",21, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // pre_type ::= CONST pre_type 
            {
              String RESULT =null;
		int pleft = ((Symbol)CUP$parser$stack.peek()).left;
		int pright = ((Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT="const " + p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_type",22, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // pre_type ::= UN_SIGNED pre_type 
            {
              String RESULT =null;
		int uleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int uright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object u = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((Symbol)CUP$parser$stack.peek()).left;
		int pright = ((Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT= u + " " + p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_type",22, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // pre_type ::= STRUCT ID 
            {
              String RESULT =null;
		int ileft = ((Symbol)CUP$parser$stack.peek()).left;
		int iright = ((Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT= "struct " + i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_type",22, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // pre_type ::= ID 
            {
              String RESULT =null;
		int ileft = ((Symbol)CUP$parser$stack.peek()).left;
		int iright = ((Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT= i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_type",22, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // pre_type ::= c_type 
            {
              String RESULT =null;
		int cleft = ((Symbol)CUP$parser$stack.peek()).left;
		int cright = ((Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT= c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_type",22, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // c_type ::= LDOUBLE 
            {
              String RESULT =null;
		 RESULT= "long double"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",23, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // c_type ::= DOUBLE 
            {
              String RESULT =null;
		 RESULT= "double"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",23, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // c_type ::= FLOAT 
            {
              String RESULT =null;
		 RESULT= "float"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",23, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // c_type ::= LLINT 
            {
              String RESULT =null;
		 RESULT= "long long int"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",23, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // c_type ::= LLONG 
            {
              String RESULT =null;
		 RESULT= "long long"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",23, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // c_type ::= LONG 
            {
              String RESULT =null;
		 RESULT="long"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",23, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // c_type ::= SHORT 
            {
              String RESULT =null;
		 RESULT="short"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",23, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // c_type ::= LINT 
            {
              String RESULT =null;
		 RESULT= "long int"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",23, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // c_type ::= SINT 
            {
              String RESULT =null;
		 RESULT= "short int"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",23, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // c_type ::= INT 
            {
              String RESULT =null;
		 RESULT= "int"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",23, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // c_type ::= CHAR 
            {
              String RESULT =null;
		 RESULT= "char"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",23, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ident_funcpointer ::= type LPAREN STAR RPAREN LPAREN NT$3 params RPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p4left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p4right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String p4 = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ps2left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ps2right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ps2 = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			/*Function funcp = parser.cg.paramsowner;
			funcp.pointer = true;
			parser.cg.paramsowner = parser.cg.params_owners.pop();
			RESULT = funcp;*/
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident_funcpointer",7, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$3 ::= 
            {
              Object RESULT =null;
		int p4left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p4right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String p4 = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

			/*Function funcp = new Function();
			funcp.pointer = true;
			funcp.setReturn_type(p4);
			parser.cg.params_owners.push(parser.cg.paramsowner);
			parser.cg.paramsowner = funcp;  */
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",27, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // params ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",4, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // params ::= ident_funcpointer COMMA params 
            {
              Object RESULT =null;
		int p5left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p5right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object p5 = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ps2left = ((Symbol)CUP$parser$stack.peek()).left;
		int ps2right = ((Symbol)CUP$parser$stack.peek()).right;
		Object ps2 = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 
			//parser.cg.paramsowner.pushParam(p5);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",4, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // params ::= ident_funcpointer 
            {
              Object RESULT =null;
		int p4left = ((Symbol)CUP$parser$stack.peek()).left;
		int p4right = ((Symbol)CUP$parser$stack.peek()).right;
		Object p4 = (Object)((Symbol) CUP$parser$stack.peek()).value;
		
			//parser.cg.paramsowner.pushParam(p4);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",4, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // params ::= type COMMA DOTS 
            {
              Object RESULT =null;
		int p3left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p3right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p3 = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
			//parser.cg.paramsowner.pushParam(p3);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",4, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // params ::= type COMMA params 
            {
              Object RESULT =null;
		int p2left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p2right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p2 = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int psleft = ((Symbol)CUP$parser$stack.peek()).left;
		int psright = ((Symbol)CUP$parser$stack.peek()).right;
		Object ps = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 
			//parser.cg.paramsowner.pushParam(p2);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",4, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // params ::= type 
            {
              Object RESULT =null;
		int pleft = ((Symbol)CUP$parser$stack.peek()).left;
		int pright = ((Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((Symbol) CUP$parser$stack.peek()).value;
		 
			//parser.cg.paramsowner.pushParam(p);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",4, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // var_declaration ::= type LPAREN STAR ID RPAREN LPAREN NT$2 params RPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int i7left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int i7right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String i7 = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int i8left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i8right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i8 = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int psleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int psright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ps = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		/*
			Function funcp = parser.cg.paramsowner;
			funcp.pointer = true;
			parser.cg.var.setFuncpointer(funcp);
			parser.cg.paramsowner = parser.cg.params_owners.pop();*/
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declaration",19, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$2 ::= 
            {
              Object RESULT =null;
		int i7left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i7right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i7 = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int i8left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i8right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i8 = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
/* 
			parser.cg.var.setType(i7+"*");
			parser.cg.var.setID(i8);
			Function funcp = new Function();
			funcp.setID(i8);
			funcp.setReturn_type(i7+"*");
			parser.cg.params_owners.push(parser.cg.paramsowner);
			parser.cg.paramsowner = funcp;  */
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",26, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // var_declaration ::= var_declaration LBRACKET NUMBER RBRACKET 
            {
              Object RESULT =null;
		int nleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			//parser.cg.var.addArray(n);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declaration",19, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // var_declaration ::= var_declaration LBRACKET RBRACKET 
            {
              Object RESULT =null;
		
			//parser.cg.var.addArray(0);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declaration",19, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // var_declaration ::= type ID 
            {
              Object RESULT =null;
		int ileft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int i2left = ((Symbol)CUP$parser$stack.peek()).left;
		int i2right = ((Symbol)CUP$parser$stack.peek()).right;
		String i2 = (String)((Symbol) CUP$parser$stack.peek()).value;
		 
			//parser.cg.var.setType(i);
			//parser.cg.var.setID(i2);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declaration",19, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // struct_body ::= struct_body var_declaration SEMI 
            {
              Object RESULT =null;
		
			/*if (parser.cg.structblock)
				parser.cg.addDeclaration(parser.cg.var);
			else
				parser.cg.struct.addMember(parser.cg.var);

		        parser.cg.var = new Variable();  */
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("struct_body",5, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // struct_body ::= struct_body pre_process_step 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("struct_body",5, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // struct_body ::= pre_process_step 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("struct_body",5, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // struct_body ::= var_declaration SEMI 
            {
              Object RESULT =null;
		
			/*if (parser.cg.structblock)
				parser.cg.addDeclaration(parser.cg.var);
			else
				parser.cg.struct.addMember(parser.cg.var);
		        parser.cg.var = new Variable(); */
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("struct_body",5, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // func ::= type ID LPAREN NT$1 params RPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e2 = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
			RESULT = e + " " + e2 + "(" + p + ");"; 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func",6, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$1 ::= 
            {
              Object RESULT =null;
		int eleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 
			parser.cg.func.setReturn_type(e);
			parser.cg.func.setID(e2);
			parser.cg.paramsowner = parser.cg.func;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",25, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // function_declaration ::= func 
            {
              Object RESULT =null;
		int fleft = ((Symbol)CUP$parser$stack.peek()).left;
		int fright = ((Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 //parser.cg.declareFunc(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",20, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // struct_declaration ::= STRUCT NT$0 ID LQ struct_body RQ 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 //parser.cg.struct.setID(i);
				//parser.cg.declareStruct(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("struct_declaration",17, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$0 ::= 
            {
              Object RESULT =null;
 //parser.cg.structflag = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",24, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // typedef_declaration ::= TYPEDEF STRUCT LQ struct_body RQ ID 
            {
              Object RESULT =null;
		int sleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((Symbol)CUP$parser$stack.peek()).left;
		int iright = ((Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((Symbol) CUP$parser$stack.peek()).value;
		 //parser.cg.declareTypedef_struct(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typedef_declaration",18, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // typedef_declaration ::= TYPEDEF var_declaration 
            {
              Object RESULT =null;
		int d2left = ((Symbol)CUP$parser$stack.peek()).left;
		int d2right = ((Symbol)CUP$parser$stack.peek()).right;
		Object d2 = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 //parser.cg.declareTypedef_var(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typedef_declaration",18, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // general_declaration ::= function_declaration 
            {
              Object RESULT =null;
		System.out.println("function");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("general_declaration",16, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // general_declaration ::= var_declaration 
            {
              Object RESULT =null;
		 //parser.cg.declareVar();
				System.out.println("variable"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("general_declaration",16, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // general_declaration ::= struct_declaration 
            {
              Object RESULT =null;
		System.out.println("struct");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("general_declaration",16, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // general_declaration ::= typedef_declaration 
            {
              Object RESULT =null;
		System.out.println("typedef");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("general_declaration",16, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // pre_process_step ::= INCLUDE 
            {
              Object RESULT =null;
		System.out.println("include");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_process_step",0, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // pre_process_step ::= SHARP ENDIF 
            {
              Object RESULT =null;
		System.out.println("endif");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_process_step",0, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // pre_process_step ::= SHARP ELSE 
            {
              Object RESULT =null;
		System.out.println("else");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_process_step",0, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // pre_process_step ::= DEFINE 
            {
              Object RESULT =null;
		System.out.println("define");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_process_step",0, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // pre_process_step ::= IFNDEF 
            {
              Object RESULT =null;
		System.out.println("ifndef");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_process_step",0, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // pre_process_step ::= IFDEF 
            {
              Object RESULT =null;
		System.out.println("ifdef");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_process_step",0, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // pre_process_step ::= IF 
            {
              Object RESULT =null;
		System.out.println("if");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_process_step",0, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // code_part ::= EXTERN general_declaration SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_part",3, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // code_part ::= general_declaration SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_part",3, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // code_part ::= pre_process_step 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_part",3, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= code_part 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",2, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= program code_part 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",2, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

