package stdio_parser;
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Oct 10 11:39:52 CEST 2014
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Oct 10 11:39:52 CEST 2014
  */
public class parser extends lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(Scanner s, SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\210\000\002\003\004\000\002\002\004\000\002\003" +
    "\003\000\002\004\005\000\002\004\005\000\002\004\005" +
    "\000\002\004\011\000\002\004\010\000\002\004\004\000" +
    "\002\002\004\000\002\002\005\000\002\002\005\000\002" +
    "\024\003\000\002\024\004\000\002\024\004\000\002\024" +
    "\004\000\002\024\004\000\002\024\004\000\002\024\005" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\006\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\004\000\002\012" +
    "\004\000\002\012\005\000\002\020\004\000\002\020\006" +
    "\000\002\020\004\000\002\020\006\000\002\020\004\000" +
    "\002\020\006\000\002\020\004\000\002\020\006\000\002" +
    "\020\004\000\002\020\006\000\002\020\004\000\002\020" +
    "\006\000\002\020\004\000\002\020\006\000\002\020\003" +
    "\000\002\025\007\000\002\025\007\000\002\025\013\000" +
    "\002\025\012\000\002\025\011\000\002\021\005\000\002" +
    "\021\007\000\002\021\005\000\002\021\007\000\002\021" +
    "\005\000\002\021\002\000\002\021\007\000\002\021\011" +
    "\000\002\021\013\000\002\021\011\000\002\021\013\000" +
    "\002\021\010\000\002\021\012\000\002\021\007\000\002" +
    "\021\011\000\002\021\004\000\002\021\004\000\002\021" +
    "\004\000\002\021\004\000\002\021\004\000\002\021\004" +
    "\000\002\021\004\000\002\021\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\013\006\000\002\013\005\000\002\014" +
    "\005\000\002\014\003\000\002\023\005\000\002\023\003" +
    "\000\002\022\005\000\002\022\004\000\002\031\002\000" +
    "\002\010\010\000\002\007\004\000\002\007\005\000\002" +
    "\006\004\000\002\006\005\000\002\006\006\000\002\032" +
    "\002\000\002\006\013\000\002\005\003\000\002\005\005" +
    "\000\002\005\005\000\002\005\003\000\002\005\005\000" +
    "\002\005\002\000\002\033\002\000\002\011\012\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\004\000\002\027\004\000\002\027\004\000\002\026" +
    "\003\000\002\026\005\000\002\026\006\000\002\026\004" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0144\000\012\004\007\042\005\043\010\044\006\001" +
    "\002\000\014\002\u0146\004\007\042\005\043\010\044\006" +
    "\001\002\000\040\044\036\052\031\053\013\054\025\055" +
    "\027\060\016\061\015\062\023\063\022\064\033\065\020" +
    "\066\024\067\034\070\012\072\021\001\002\000\004\072" +
    "\u0136\001\002\000\004\072\113\001\002\000\040\044\014" +
    "\052\031\053\013\054\025\055\027\060\016\061\015\062" +
    "\023\063\022\064\033\065\020\066\024\067\034\070\012" +
    "\072\021\001\002\000\014\002\uffff\004\uffff\042\uffff\043" +
    "\uffff\044\uffff\001\002\000\016\005\uff83\035\uff83\037\uff83" +
    "\040\uff83\041\uff83\072\uff83\001\002\000\016\005\uff88\035" +
    "\uff88\037\uff88\040\uff88\041\uff88\072\uff88\001\002\000\006" +
    "\045\102\072\037\001\002\000\016\005\uff8c\035\uff8c\037" +
    "\uff8c\040\uff8c\041\uff8c\072\uff8c\001\002\000\016\005\uff8d" +
    "\035\uff8d\037\uff8d\040\uff8d\041\uff8d\072\uff8d\001\002\000" +
    "\012\005\051\035\047\040\050\072\046\001\002\000\016" +
    "\005\uff86\035\uff86\037\uff86\040\uff86\041\uff86\072\uff86\001" +
    "\002\000\016\005\uff81\035\uff81\037\uff81\040\uff81\041\uff81" +
    "\072\uff81\001\002\000\016\005\uff8a\035\uff8a\037\uff8a\040" +
    "\uff8a\041\uff8a\072\uff8a\001\002\000\016\005\uff8b\035\uff8b" +
    "\037\uff8b\040\uff8b\041\uff8b\072\uff8b\001\002\000\016\005" +
    "\uff85\035\uff85\037\uff85\040\uff85\041\uff85\072\uff85\001\002" +
    "\000\040\044\036\052\031\053\013\054\025\055\027\060" +
    "\016\061\015\062\023\063\022\064\033\065\020\066\024" +
    "\067\034\070\012\072\021\001\002\000\006\005\041\032" +
    "\040\001\002\000\040\044\036\052\031\053\013\054\025" +
    "\055\027\060\016\061\015\062\023\063\022\064\033\065" +
    "\020\066\024\067\034\070\012\072\021\001\002\000\016" +
    "\005\uff7d\035\uff7d\037\uff7d\040\uff7d\041\uff7d\072\uff7d\001" +
    "\002\000\016\005\uff89\035\uff89\037\uff89\040\uff89\041\uff89" +
    "\072\uff89\001\002\000\016\005\uff82\035\uff82\037\uff82\040" +
    "\uff82\041\uff82\072\uff82\001\002\000\016\005\uff87\035\uff87" +
    "\037\uff87\040\uff87\041\uff87\072\uff87\001\002\000\016\005" +
    "\uff84\035\uff84\037\uff84\040\uff84\041\uff84\072\uff84\001\002" +
    "\000\016\005\uff7e\035\uff7e\037\uff7e\040\uff7e\041\uff7e\072" +
    "\uff7e\001\002\000\004\072\037\001\002\000\016\005\uff80" +
    "\035\uff80\037\uff80\040\uff80\041\uff80\072\uff80\001\002\000" +
    "\014\002\ufffc\004\ufffc\042\ufffc\043\ufffc\044\ufffc\001\002" +
    "\000\006\006\042\071\043\001\002\000\006\005\uff99\032" +
    "\uff99\001\002\000\004\006\044\001\002\000\006\005\uff98" +
    "\032\uff98\001\002\000\016\005\uff7f\035\uff7f\037\uff7f\040" +
    "\uff7f\041\uff7f\072\uff7f\001\002\000\006\005\uff9a\032\uff9a" +
    "\001\002\000\016\005\uff7a\035\uff7a\037\uff7a\040\uff7a\041" +
    "\uff7a\072\uff7a\001\002\000\004\035\055\001\002\000\006" +
    "\006\052\071\053\001\002\000\016\005\uff7c\035\uff7c\037" +
    "\uff7c\040\uff7c\041\uff7c\072\uff7c\001\002\000\004\006\054" +
    "\001\002\000\016\005\uff7b\035\uff7b\037\uff7b\040\uff7b\041" +
    "\uff7b\072\uff7b\001\002\000\004\072\056\001\002\000\004" +
    "\041\057\001\002\000\004\040\060\001\002\000\042\041" +
    "\uff97\044\uff97\052\uff97\053\uff97\054\uff97\055\uff97\060\uff97" +
    "\061\uff97\062\uff97\063\uff97\064\uff97\065\uff97\066\uff97\067" +
    "\uff97\070\uff97\072\uff97\001\002\000\042\041\uff90\044\036" +
    "\052\031\053\013\054\025\055\027\060\016\061\015\062" +
    "\023\063\022\064\033\065\020\066\024\067\034\070\012" +
    "\072\021\001\002\000\014\005\051\035\047\037\070\040" +
    "\071\041\uff95\001\002\000\006\037\066\041\uff92\001\002" +
    "\000\004\041\065\001\002\000\006\005\uff96\032\uff96\001" +
    "\002\000\042\041\uff90\044\036\052\031\053\013\054\025" +
    "\055\027\060\016\061\015\062\023\063\022\064\033\065" +
    "\020\066\024\067\034\070\012\072\021\001\002\000\004" +
    "\041\uff91\001\002\000\044\011\100\041\uff90\044\036\052" +
    "\031\053\013\054\025\055\027\060\016\061\015\062\023" +
    "\063\022\064\033\065\020\066\024\067\034\070\012\072" +
    "\021\001\002\000\004\035\072\001\002\000\004\041\073" +
    "\001\002\000\004\040\074\001\002\000\042\041\uff8f\044" +
    "\uff8f\052\uff8f\053\uff8f\054\uff8f\055\uff8f\060\uff8f\061\uff8f" +
    "\062\uff8f\063\uff8f\064\uff8f\065\uff8f\066\uff8f\067\uff8f\070" +
    "\uff8f\072\uff8f\001\002\000\042\041\uff90\044\036\052\031" +
    "\053\013\054\025\055\027\060\016\061\015\062\023\063" +
    "\022\064\033\065\020\066\024\067\034\070\012\072\021" +
    "\001\002\000\004\041\077\001\002\000\006\037\uff8e\041" +
    "\uff8e\001\002\000\004\041\uff93\001\002\000\004\041\uff94" +
    "\001\002\000\040\044\036\052\031\053\013\054\025\055" +
    "\027\060\016\061\015\062\023\063\022\064\033\065\020" +
    "\066\024\067\034\070\012\072\021\001\002\000\006\005" +
    "\041\032\112\001\002\000\042\044\036\046\105\052\031" +
    "\053\013\054\025\055\027\060\016\061\015\062\023\063" +
    "\022\064\033\065\020\066\024\067\034\070\012\072\021" +
    "\001\002\000\004\072\110\001\002\000\006\005\041\032" +
    "\107\001\002\000\042\044\uff9b\046\uff9b\052\uff9b\053\uff9b" +
    "\054\uff9b\055\uff9b\060\uff9b\061\uff9b\062\uff9b\063\uff9b\064" +
    "\uff9b\065\uff9b\066\uff9b\067\uff9b\070\uff9b\072\uff9b\001\002" +
    "\000\004\032\111\001\002\000\014\002\ufffb\004\ufffb\042" +
    "\ufffb\043\ufffb\044\ufffb\001\002\000\042\044\uff9c\046\uff9c" +
    "\052\uff9c\053\uff9c\054\uff9c\055\uff9c\060\uff9c\061\uff9c\062" +
    "\uff9c\063\uff9c\064\uff9c\065\uff9c\066\uff9c\067\uff9c\070\uff9c" +
    "\072\uff9c\001\002\000\022\013\124\033\123\034\115\035" +
    "\121\040\125\044\120\056\126\071\117\001\002\000\014" +
    "\002\ufff9\004\ufff9\042\ufff9\043\ufff9\044\ufff9\001\002\000" +
    "\020\013\124\033\123\034\115\035\121\040\130\056\126" +
    "\071\117\001\002\000\064\002\uffca\004\uffca\013\156\014" +
    "\uffca\015\uffca\021\161\022\157\023\uffca\024\uffca\025\uffca" +
    "\026\uffca\027\uffca\030\uffca\033\151\034\145\035\150\040" +
    "\162\042\uffca\043\uffca\044\uffca\051\uffca\056\163\057\152" +
    "\071\146\072\155\001\002\000\016\002\ufff5\004\ufff5\041" +
    "\ufff5\042\ufff5\043\ufff5\044\ufff5\001\002\000\004\072\144" +
    "\001\002\000\020\013\124\033\123\034\115\035\121\040" +
    "\130\056\126\071\117\001\002\000\014\002\ufff8\004\ufff8" +
    "\042\ufff8\043\ufff8\044\ufff8\001\002\000\020\013\124\033" +
    "\123\034\115\035\121\040\130\056\126\071\117\001\002" +
    "\000\020\013\124\033\123\034\115\035\121\040\130\056" +
    "\126\071\117\001\002\000\024\013\124\033\123\034\115" +
    "\035\121\040\130\041\135\056\126\071\117\072\134\001" +
    "\002\000\020\013\124\033\123\034\115\035\121\040\130" +
    "\056\126\071\117\001\002\000\016\002\ufff2\004\ufff2\041" +
    "\ufff2\042\ufff2\043\ufff2\044\ufff2\001\002\000\020\013\124" +
    "\033\123\034\115\035\121\040\130\056\126\071\117\001" +
    "\002\000\004\041\132\001\002\000\016\002\uffef\004\uffef" +
    "\041\uffef\042\uffef\043\uffef\044\uffef\001\002\000\006\037" +
    "\136\041\137\001\002\000\006\037\uffa1\041\uffa1\001\002" +
    "\000\064\002\uff9f\004\uff9f\013\uff9f\014\uff9f\015\uff9f\021" +
    "\uff9f\022\uff9f\023\uff9f\024\uff9f\025\uff9f\026\uff9f\027\uff9f" +
    "\030\uff9f\033\uff9f\034\uff9f\035\uff9f\040\uff9f\042\uff9f\043" +
    "\uff9f\044\uff9f\051\uff9f\056\uff9f\057\uff9f\071\uff9f\072\uff9f" +
    "\001\002\000\004\072\140\001\002\000\064\002\uffa0\004" +
    "\uffa0\013\uffa0\014\uffa0\015\uffa0\021\uffa0\022\uffa0\023\uffa0" +
    "\024\uffa0\025\uffa0\026\uffa0\027\uffa0\030\uffa0\033\uffa0\034" +
    "\uffa0\035\uffa0\040\uffa0\042\uffa0\043\uffa0\044\uffa0\051\uffa0" +
    "\056\uffa0\057\uffa0\071\uffa0\072\uffa0\001\002\000\006\037" +
    "\uffa2\041\uffa2\001\002\000\016\002\ufff0\004\ufff0\041\ufff0" +
    "\042\ufff0\043\ufff0\044\ufff0\001\002\000\016\002\ufff4\004" +
    "\ufff4\041\ufff4\042\ufff4\043\ufff4\044\ufff4\001\002\000\016" +
    "\002\ufff1\004\ufff1\041\ufff1\042\ufff1\043\ufff1\044\ufff1\001" +
    "\002\000\014\002\ufff6\004\ufff6\042\ufff6\043\ufff6\044\ufff6" +
    "\001\002\000\026\021\173\022\172\033\167\034\164\035" +
    "\166\040\174\056\175\057\170\071\146\072\155\001\002" +
    "\000\104\002\uffee\004\uffee\005\uffee\006\uffee\007\uffee\010" +
    "\uffee\012\uffee\014\uffee\015\uffee\016\uffee\017\uffee\020\uffee" +
    "\021\uffee\022\uffee\023\uffee\024\uffee\025\uffee\026\uffee\027" +
    "\uffee\030\uffee\031\uffee\033\uffee\034\uffee\036\uffee\037\uffee" +
    "\041\uffee\042\uffee\043\uffee\044\uffee\047\uffee\050\uffee\051" +
    "\uffee\056\uffee\001\002\000\104\002\uffd5\004\uffd5\005\227" +
    "\006\uffd5\007\uffd5\010\230\012\uffd5\014\uffd5\015\uffd5\016" +
    "\uffd5\017\uffd5\020\226\021\231\022\224\023\uffd5\024\uffd5" +
    "\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\033\uffd5\034" +
    "\uffd5\036\uffd5\037\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5" +
    "\047\uffd5\050\uffd5\051\uffd5\056\uffd5\001\002\000\026\021" +
    "\173\022\172\033\167\034\164\035\166\040\174\056\175" +
    "\057\170\071\146\072\155\001\002\000\026\021\173\022" +
    "\172\033\167\034\164\035\166\040\174\056\175\057\170" +
    "\071\146\072\155\001\002\000\026\021\173\022\172\033" +
    "\167\034\164\035\166\040\174\056\175\057\170\071\146" +
    "\072\155\001\002\000\036\002\ufff7\004\ufff7\014\246\015" +
    "\251\023\245\024\250\025\243\026\253\027\244\030\247" +
    "\042\ufff7\043\ufff7\044\ufff7\051\252\001\002\000\070\002" +
    "\uffb9\004\uffb9\007\336\012\340\014\246\015\251\016\333" +
    "\017\327\023\245\024\250\025\243\026\253\027\244\030" +
    "\247\031\uffb9\033\325\034\335\036\332\037\uffb9\041\uffb9" +
    "\042\uffb9\043\uffb9\044\uffb9\047\324\050\326\051\uffb9\056" +
    "\337\001\002\000\106\002\uffed\004\uffed\005\uffed\006\uffed" +
    "\007\uffed\010\uffed\012\uffed\014\uffed\015\uffed\016\uffed\017" +
    "\uffed\020\uffed\021\uffed\022\uffed\023\uffed\024\uffed\025\uffed" +
    "\026\uffed\027\uffed\030\uffed\031\uffed\033\uffed\034\uffed\036" +
    "\uffed\037\uffed\040\234\041\uffed\042\uffed\043\uffed\044\uffed" +
    "\047\uffed\050\uffed\051\uffed\056\uffed\001\002\000\026\021" +
    "\173\022\172\033\167\034\164\035\166\040\176\056\175" +
    "\057\170\071\146\072\155\001\002\000\026\021\173\022" +
    "\172\033\167\034\164\035\166\040\174\056\175\057\170" +
    "\071\146\072\155\001\002\000\104\002\uffec\004\uffec\005" +
    "\uffec\006\uffec\007\uffec\010\uffec\012\uffec\014\uffec\015\uffec" +
    "\016\uffec\017\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024" +
    "\uffec\025\uffec\026\uffec\027\uffec\030\uffec\031\uffec\033\uffec" +
    "\034\uffec\036\uffec\037\uffec\041\uffec\042\uffec\043\uffec\044" +
    "\uffec\047\uffec\050\uffec\051\uffec\056\uffec\001\002\000\026" +
    "\021\173\022\172\033\167\034\164\035\166\040\174\056" +
    "\175\057\170\071\146\072\155\001\002\000\052\013\377" +
    "\014\uffca\015\uffca\021\u0101\022\u0100\023\uffca\024\uffca\025" +
    "\uffca\026\uffca\027\uffca\030\uffca\033\373\034\371\035\372" +
    "\040\162\051\uffca\056\u0102\057\374\071\146\072\155\001" +
    "\002\000\026\021\173\022\172\033\167\034\164\035\166" +
    "\040\174\056\175\057\170\071\146\072\155\001\002\000" +
    "\026\021\173\022\172\033\167\034\164\035\166\040\176" +
    "\056\175\057\170\071\146\072\155\001\002\000\044\002" +
    "\uffbf\004\uffbf\014\uffbf\015\uffbf\023\uffbf\024\uffbf\025\uffbf" +
    "\026\uffbf\027\uffbf\030\uffbf\031\uffbf\037\uffbf\041\uffbf\042" +
    "\uffbf\043\uffbf\044\uffbf\051\uffbf\001\002\000\026\021\173" +
    "\022\172\033\167\034\164\035\166\040\176\056\175\057" +
    "\170\071\146\072\155\001\002\000\026\021\173\022\172" +
    "\033\167\034\164\035\166\040\176\056\175\057\170\071" +
    "\146\072\155\001\002\000\026\021\173\022\172\033\167" +
    "\034\164\035\166\040\176\056\175\057\170\071\146\072" +
    "\155\001\002\000\072\002\uffd9\004\uffd9\006\uffd9\007\uffd9" +
    "\012\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\023\uffd9\024" +
    "\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\033\uffd9" +
    "\034\uffd9\036\uffd9\037\uffd9\041\uffd9\042\uffd9\043\uffd9\044" +
    "\uffd9\047\uffd9\050\uffd9\051\uffd9\056\uffd9\001\002\000\026" +
    "\021\173\022\172\033\167\034\164\035\166\040\176\056" +
    "\175\057\170\071\146\072\155\001\002\000\026\021\173" +
    "\022\172\033\167\034\164\035\166\040\176\056\175\057" +
    "\170\071\146\072\155\001\002\000\030\013\306\021\310" +
    "\022\307\033\303\034\300\035\302\040\176\056\311\057" +
    "\304\071\146\072\155\001\002\000\026\021\173\022\172" +
    "\033\167\034\164\035\166\040\176\056\175\057\170\071" +
    "\146\072\155\001\002\000\026\021\205\022\204\033\202" +
    "\034\177\035\201\040\206\056\207\057\203\071\146\072" +
    "\155\001\002\000\026\021\173\022\172\033\167\034\164" +
    "\035\166\040\176\056\175\057\170\071\146\072\155\001" +
    "\002\000\016\005\227\010\230\020\226\021\231\022\224" +
    "\041\225\001\002\000\026\021\173\022\172\033\167\034" +
    "\164\035\166\040\176\056\175\057\170\071\146\072\155" +
    "\001\002\000\026\021\173\022\172\033\167\034\164\035" +
    "\166\040\176\056\175\057\170\071\146\072\155\001\002" +
    "\000\026\021\173\022\172\033\167\034\164\035\166\040" +
    "\176\056\175\057\170\071\146\072\155\001\002\000\026" +
    "\021\173\022\172\033\167\034\164\035\166\040\176\056" +
    "\175\057\170\071\146\072\155\001\002\000\026\021\173" +
    "\022\172\033\167\034\164\035\166\040\176\056\175\057" +
    "\170\071\146\072\155\001\002\000\010\040\206\071\146" +
    "\072\155\001\002\000\026\021\173\022\172\033\167\034" +
    "\164\035\166\040\176\056\175\057\170\071\146\072\155" +
    "\001\002\000\004\041\211\001\002\000\072\002\uffd8\004" +
    "\uffd8\006\uffd8\007\uffd8\012\uffd8\014\uffd8\015\uffd8\016\uffd8" +
    "\017\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030" +
    "\uffd8\031\uffd8\033\uffd8\034\uffd8\036\uffd8\037\uffd8\041\uffd8" +
    "\042\uffd8\043\uffd8\044\uffd8\047\uffd8\050\uffd8\051\uffd8\056" +
    "\uffd8\001\002\000\004\041\213\001\002\000\072\002\uffdc" +
    "\004\uffdc\006\uffdc\007\uffdc\012\uffdc\014\uffdc\015\uffdc\016" +
    "\uffdc\017\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc" +
    "\030\uffdc\031\uffdc\033\uffdc\034\uffdc\036\uffdc\037\uffdc\041" +
    "\uffdc\042\uffdc\043\uffdc\044\uffdc\047\uffdc\050\uffdc\051\uffdc" +
    "\056\uffdc\001\002\000\004\041\215\001\002\000\072\002" +
    "\uffde\004\uffde\006\uffde\007\uffde\012\uffde\014\uffde\015\uffde" +
    "\016\uffde\017\uffde\023\uffde\024\uffde\025\uffde\026\uffde\027" +
    "\uffde\030\uffde\031\uffde\033\uffde\034\uffde\036\uffde\037\uffde" +
    "\041\uffde\042\uffde\043\uffde\044\uffde\047\uffde\050\uffde\051" +
    "\uffde\056\uffde\001\002\000\004\041\217\001\002\000\072" +
    "\002\uffd6\004\uffd6\006\uffd6\007\uffd6\012\uffd6\014\uffd6\015" +
    "\uffd6\016\uffd6\017\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6" +
    "\027\uffd6\030\uffd6\031\uffd6\033\uffd6\034\uffd6\036\uffd6\037" +
    "\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6\047\uffd6\050\uffd6" +
    "\051\uffd6\056\uffd6\001\002\000\004\041\221\001\002\000" +
    "\072\002\uffe0\004\uffe0\006\uffe0\007\uffe0\012\uffe0\014\uffe0" +
    "\015\uffe0\016\uffe0\017\uffe0\023\uffe0\024\uffe0\025\uffe0\026" +
    "\uffe0\027\uffe0\030\uffe0\031\uffe0\033\uffe0\034\uffe0\036\uffe0" +
    "\037\uffe0\041\uffe0\042\uffe0\043\uffe0\044\uffe0\047\uffe0\050" +
    "\uffe0\051\uffe0\056\uffe0\001\002\000\004\041\223\001\002" +
    "\000\072\002\uffda\004\uffda\006\uffda\007\uffda\012\uffda\014" +
    "\uffda\015\uffda\016\uffda\017\uffda\023\uffda\024\uffda\025\uffda" +
    "\026\uffda\027\uffda\030\uffda\031\uffda\033\uffda\034\uffda\036" +
    "\uffda\037\uffda\041\uffda\042\uffda\043\uffda\044\uffda\047\uffda" +
    "\050\uffda\051\uffda\056\uffda\001\002\000\104\002\uffe5\004" +
    "\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5\012\uffe5\014\uffe5" +
    "\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023" +
    "\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5" +
    "\033\uffe5\034\uffe5\036\uffe5\037\uffe5\041\uffe5\042\uffe5\043" +
    "\uffe5\044\uffe5\047\uffe5\050\uffe5\051\uffe5\056\uffe5\001\002" +
    "\000\104\002\uffe4\004\uffe4\005\uffe4\006\uffe4\007\uffe4\010" +
    "\uffe4\012\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4" +
    "\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027" +
    "\uffe4\030\uffe4\031\uffe4\033\uffe4\034\uffe4\036\uffe4\037\uffe4" +
    "\041\uffe4\042\uffe4\043\uffe4\044\uffe4\047\uffe4\050\uffe4\051" +
    "\uffe4\056\uffe4\001\002\000\004\072\274\001\002\000\026" +
    "\021\173\022\172\033\167\034\164\035\166\040\176\056" +
    "\175\057\170\071\146\072\155\001\002\000\004\072\232" +
    "\001\002\000\104\002\uffe6\004\uffe6\005\uffe6\006\uffe6\007" +
    "\uffe6\010\uffe6\012\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6" +
    "\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026" +
    "\uffe6\027\uffe6\030\uffe6\031\uffe6\033\uffe6\034\uffe6\036\uffe6" +
    "\037\uffe6\041\uffe6\042\uffe6\043\uffe6\044\uffe6\047\uffe6\050" +
    "\uffe6\051\uffe6\056\uffe6\001\002\000\106\002\uffe9\004\uffe9" +
    "\005\uffe9\006\uffe9\007\uffe9\010\uffe9\012\uffe9\014\uffe9\015" +
    "\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9" +
    "\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9\033" +
    "\uffe9\034\uffe9\036\uffe9\037\uffe9\040\234\041\uffe9\042\uffe9" +
    "\043\uffe9\044\uffe9\047\uffe9\050\uffe9\051\uffe9\056\uffe9\001" +
    "\002\000\104\002\uffea\004\uffea\005\uffea\006\uffea\007\uffea" +
    "\010\uffea\012\uffea\014\uffea\015\uffea\016\uffea\017\uffea\020" +
    "\uffea\021\uffea\022\uffea\023\uffea\024\uffea\025\uffea\026\uffea" +
    "\027\uffea\030\uffea\031\uffea\033\uffea\034\uffea\036\uffea\037" +
    "\uffea\041\uffea\042\uffea\043\uffea\044\uffea\047\uffea\050\uffea" +
    "\051\uffea\056\uffea\001\002\000\056\013\156\014\uffca\015" +
    "\uffca\021\161\022\157\023\uffca\024\uffca\025\uffca\026\uffca" +
    "\027\uffca\030\uffca\033\151\034\145\035\150\037\uffca\040" +
    "\162\041\237\051\uffca\056\163\057\152\071\146\072\155" +
    "\001\002\000\030\014\246\015\251\023\245\024\250\025" +
    "\243\026\253\027\244\030\247\037\uffa3\041\uffa3\051\252" +
    "\001\002\000\006\037\240\041\241\001\002\000\104\002" +
    "\uffa5\004\uffa5\005\uffa5\006\uffa5\007\uffa5\010\uffa5\012\uffa5" +
    "\014\uffa5\015\uffa5\016\uffa5\017\uffa5\020\uffa5\021\uffa5\022" +
    "\uffa5\023\uffa5\024\uffa5\025\uffa5\026\uffa5\027\uffa5\030\uffa5" +
    "\031\uffa5\033\uffa5\034\uffa5\036\uffa5\037\uffa5\041\uffa5\042" +
    "\uffa5\043\uffa5\044\uffa5\047\uffa5\050\uffa5\051\uffa5\056\uffa5" +
    "\001\002\000\056\013\156\014\uffca\015\uffca\021\161\022" +
    "\157\023\uffca\024\uffca\025\uffca\026\uffca\027\uffca\030\uffca" +
    "\033\151\034\145\035\150\037\uffca\040\162\041\uffca\051" +
    "\uffca\056\163\057\152\071\146\072\155\001\002\000\104" +
    "\002\uffa6\004\uffa6\005\uffa6\006\uffa6\007\uffa6\010\uffa6\012" +
    "\uffa6\014\uffa6\015\uffa6\016\uffa6\017\uffa6\020\uffa6\021\uffa6" +
    "\022\uffa6\023\uffa6\024\uffa6\025\uffa6\026\uffa6\027\uffa6\030" +
    "\uffa6\031\uffa6\033\uffa6\034\uffa6\036\uffa6\037\uffa6\041\uffa6" +
    "\042\uffa6\043\uffa6\044\uffa6\047\uffa6\050\uffa6\051\uffa6\056" +
    "\uffa6\001\002\000\030\014\246\015\251\023\245\024\250" +
    "\025\243\026\253\027\244\030\247\037\uffa4\041\uffa4\051" +
    "\252\001\002\000\072\002\uffa8\004\uffa8\013\uffa8\014\uffa8" +
    "\015\uffa8\021\uffa8\022\uffa8\023\uffa8\024\uffa8\025\uffa8\026" +
    "\uffa8\027\uffa8\030\uffa8\031\uffa8\033\uffa8\034\uffa8\035\uffa8" +
    "\037\uffa8\040\uffa8\041\uffa8\042\uffa8\043\uffa8\044\uffa8\051" +
    "\uffa8\056\uffa8\057\uffa8\071\uffa8\072\uffa8\001\002\000\072" +
    "\002\uffa9\004\uffa9\013\uffa9\014\uffa9\015\uffa9\021\uffa9\022" +
    "\uffa9\023\uffa9\024\uffa9\025\uffa9\026\uffa9\027\uffa9\030\uffa9" +
    "\031\uffa9\033\uffa9\034\uffa9\035\uffa9\037\uffa9\040\uffa9\041" +
    "\uffa9\042\uffa9\043\uffa9\044\uffa9\051\uffa9\056\uffa9\057\uffa9" +
    "\071\uffa9\072\uffa9\001\002\000\072\002\uffab\004\uffab\013" +
    "\uffab\014\uffab\015\uffab\021\uffab\022\uffab\023\uffab\024\uffab" +
    "\025\uffab\026\uffab\027\uffab\030\uffab\031\uffab\033\uffab\034" +
    "\uffab\035\uffab\037\uffab\040\uffab\041\uffab\042\uffab\043\uffab" +
    "\044\uffab\051\uffab\056\uffab\057\uffab\071\uffab\072\uffab\001" +
    "\002\000\072\002\uffac\004\uffac\013\uffac\014\uffac\015\uffac" +
    "\021\uffac\022\uffac\023\uffac\024\uffac\025\uffac\026\uffac\027" +
    "\uffac\030\uffac\031\uffac\033\uffac\034\uffac\035\uffac\037\uffac" +
    "\040\uffac\041\uffac\042\uffac\043\uffac\044\uffac\051\uffac\056" +
    "\uffac\057\uffac\071\uffac\072\uffac\001\002\000\072\002\uffaa" +
    "\004\uffaa\013\uffaa\014\uffaa\015\uffaa\021\uffaa\022\uffaa\023" +
    "\uffaa\024\uffaa\025\uffaa\026\uffaa\027\uffaa\030\uffaa\031\uffaa" +
    "\033\uffaa\034\uffaa\035\uffaa\037\uffaa\040\uffaa\041\uffaa\042" +
    "\uffaa\043\uffaa\044\uffaa\051\uffaa\056\uffaa\057\uffaa\071\uffaa" +
    "\072\uffaa\001\002\000\072\002\uffad\004\uffad\013\uffad\014" +
    "\uffad\015\uffad\021\uffad\022\uffad\023\uffad\024\uffad\025\uffad" +
    "\026\uffad\027\uffad\030\uffad\031\uffad\033\uffad\034\uffad\035" +
    "\uffad\037\uffad\040\uffad\041\uffad\042\uffad\043\uffad\044\uffad" +
    "\051\uffad\056\uffad\057\uffad\071\uffad\072\uffad\001\002\000" +
    "\072\002\uffae\004\uffae\013\uffae\014\uffae\015\uffae\021\uffae" +
    "\022\uffae\023\uffae\024\uffae\025\uffae\026\uffae\027\uffae\030" +
    "\uffae\031\uffae\033\uffae\034\uffae\035\uffae\037\uffae\040\uffae" +
    "\041\uffae\042\uffae\043\uffae\044\uffae\051\uffae\056\uffae\057" +
    "\uffae\071\uffae\072\uffae\001\002\000\054\013\156\014\uffca" +
    "\015\uffca\021\161\022\157\023\uffca\024\uffca\025\uffca\026" +
    "\uffca\027\uffca\030\uffca\031\uffca\033\151\034\145\035\150" +
    "\040\162\051\uffca\056\163\057\152\071\146\072\155\001" +
    "\002\000\072\002\uffa7\004\uffa7\013\uffa7\014\uffa7\015\uffa7" +
    "\021\uffa7\022\uffa7\023\uffa7\024\uffa7\025\uffa7\026\uffa7\027" +
    "\uffa7\030\uffa7\031\uffa7\033\uffa7\034\uffa7\035\uffa7\037\uffa7" +
    "\040\uffa7\041\uffa7\042\uffa7\043\uffa7\044\uffa7\051\uffa7\056" +
    "\uffa7\057\uffa7\071\uffa7\072\uffa7\001\002\000\026\021\173" +
    "\022\172\033\167\034\164\035\166\040\174\056\175\057" +
    "\170\071\146\072\155\001\002\000\004\051\263\001\002" +
    "\000\004\051\257\001\002\000\054\013\156\014\uffca\015" +
    "\uffca\021\161\022\157\023\uffca\024\uffca\025\uffca\026\uffca" +
    "\027\uffca\030\uffca\031\uffca\033\151\034\145\035\150\040" +
    "\162\051\uffca\056\163\057\152\071\146\072\155\001\002" +
    "\000\026\014\246\015\251\023\245\024\250\025\243\026" +
    "\253\027\244\030\247\031\261\051\252\001\002\000\072" +
    "\002\uffca\004\uffca\013\156\014\uffca\015\uffca\021\161\022" +
    "\157\023\uffca\024\uffca\025\uffca\026\uffca\027\uffca\030\uffca" +
    "\031\uffca\033\151\034\145\035\150\037\uffca\040\162\041" +
    "\uffca\042\uffca\043\uffca\044\uffca\051\uffca\056\163\057\152" +
    "\071\146\072\155\001\002\000\044\002\uffc6\004\uffc6\014" +
    "\246\015\251\023\245\024\250\025\243\026\253\027\244" +
    "\030\247\031\uffc6\037\uffc6\041\uffc6\042\uffc6\043\uffc6\044" +
    "\uffc6\051\252\001\002\000\054\013\156\014\uffca\015\uffca" +
    "\021\161\022\157\023\uffca\024\uffca\025\uffca\026\uffca\027" +
    "\uffca\030\uffca\031\uffca\033\151\034\145\035\150\040\162" +
    "\051\uffca\056\163\057\152\071\146\072\155\001\002\000" +
    "\026\014\246\015\251\023\245\024\250\025\243\026\253" +
    "\027\244\030\247\031\265\051\252\001\002\000\072\002" +
    "\uffca\004\uffca\013\156\014\uffca\015\uffca\021\161\022\157" +
    "\023\uffca\024\uffca\025\uffca\026\uffca\027\uffca\030\uffca\031" +
    "\uffca\033\151\034\145\035\150\037\uffca\040\162\041\uffca" +
    "\042\uffca\043\uffca\044\uffca\051\uffca\056\163\057\152\071" +
    "\146\072\155\001\002\000\044\002\uffc8\004\uffc8\014\246" +
    "\015\251\023\245\024\250\025\243\026\253\027\244\030" +
    "\247\031\uffc8\037\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8" +
    "\051\252\001\002\000\026\014\246\015\251\023\245\024" +
    "\250\025\243\026\253\027\244\030\247\031\270\051\252" +
    "\001\002\000\072\002\uffca\004\uffca\013\156\014\uffca\015" +
    "\uffca\021\161\022\157\023\uffca\024\uffca\025\uffca\026\uffca" +
    "\027\uffca\030\uffca\031\uffca\033\151\034\145\035\150\037" +
    "\uffca\040\162\041\uffca\042\uffca\043\uffca\044\uffca\051\uffca" +
    "\056\163\057\152\071\146\072\155\001\002\000\044\002" +
    "\uffc2\004\uffc2\014\246\015\251\023\245\024\250\025\243" +
    "\026\253\027\244\030\247\031\uffc2\037\uffc2\041\uffc2\042" +
    "\uffc2\043\uffc2\044\uffc2\051\252\001\002\000\004\006\273" +
    "\001\002\000\104\002\uffeb\004\uffeb\005\uffeb\006\uffeb\007" +
    "\uffeb\010\uffeb\012\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb" +
    "\020\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026" +
    "\uffeb\027\uffeb\030\uffeb\031\uffeb\033\uffeb\034\uffeb\036\uffeb" +
    "\037\uffeb\041\uffeb\042\uffeb\043\uffeb\044\uffeb\047\uffeb\050" +
    "\uffeb\051\uffeb\056\uffeb\001\002\000\106\002\uffe7\004\uffe7" +
    "\005\uffe7\006\uffe7\007\uffe7\010\uffe7\012\uffe7\014\uffe7\015" +
    "\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7" +
    "\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7\033" +
    "\uffe7\034\uffe7\036\uffe7\037\uffe7\040\234\041\uffe7\042\uffe7" +
    "\043\uffe7\044\uffe7\047\uffe7\050\uffe7\051\uffe7\056\uffe7\001" +
    "\002\000\104\002\uffe8\004\uffe8\005\uffe8\006\uffe8\007\uffe8" +
    "\010\uffe8\012\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020" +
    "\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8" +
    "\027\uffe8\030\uffe8\031\uffe8\033\uffe8\034\uffe8\036\uffe8\037" +
    "\uffe8\041\uffe8\042\uffe8\043\uffe8\044\uffe8\047\uffe8\050\uffe8" +
    "\051\uffe8\056\uffe8\001\002\000\004\041\277\001\002\000" +
    "\072\002\uffe2\004\uffe2\006\uffe2\007\uffe2\012\uffe2\014\uffe2" +
    "\015\uffe2\016\uffe2\017\uffe2\023\uffe2\024\uffe2\025\uffe2\026" +
    "\uffe2\027\uffe2\030\uffe2\031\uffe2\033\uffe2\034\uffe2\036\uffe2" +
    "\037\uffe2\041\uffe2\042\uffe2\043\uffe2\044\uffe2\047\uffe2\050" +
    "\uffe2\051\uffe2\056\uffe2\001\002\000\026\021\173\022\172" +
    "\033\167\034\164\035\166\040\176\056\175\057\170\071" +
    "\146\072\155\001\002\000\064\005\227\007\uffd5\010\230" +
    "\012\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5\020\226\021" +
    "\231\022\224\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5" +
    "\030\uffd5\033\uffd5\034\uffd5\036\uffd5\041\225\047\uffd5\050" +
    "\uffd5\051\uffd5\056\uffd5\001\002\000\026\021\173\022\172" +
    "\033\167\034\164\035\166\040\176\056\175\057\170\071" +
    "\146\072\155\001\002\000\026\021\173\022\172\033\167" +
    "\034\164\035\166\040\176\056\175\057\170\071\146\072" +
    "\155\001\002\000\026\021\173\022\172\033\167\034\164" +
    "\035\166\040\176\056\175\057\170\071\146\072\155\001" +
    "\002\000\050\007\336\012\340\014\246\015\251\016\333" +
    "\017\327\023\245\024\250\025\243\026\253\027\244\030" +
    "\247\033\325\034\335\036\332\047\324\050\326\051\331" +
    "\056\337\001\002\000\026\021\173\022\172\033\167\034" +
    "\164\035\166\040\176\056\175\057\170\071\146\072\155" +
    "\001\002\000\026\021\173\022\172\033\167\034\164\035" +
    "\166\040\176\056\175\057\170\071\146\072\155\001\002" +
    "\000\026\021\173\022\172\033\167\034\164\035\166\040" +
    "\176\056\175\057\170\071\146\072\155\001\002\000\026" +
    "\021\173\022\172\033\167\034\164\035\166\040\176\056" +
    "\175\057\170\071\146\072\155\001\002\000\052\007\uffd9" +
    "\012\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\023\uffd9\024" +
    "\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\033\uffd9\034\uffd9" +
    "\036\uffd9\041\211\047\uffd9\050\uffd9\051\uffd9\056\uffd9\001" +
    "\002\000\052\007\uffdd\012\uffdd\014\uffdd\015\uffdd\016\uffdd" +
    "\017\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030" +
    "\uffdd\033\uffdd\034\uffdd\036\uffdd\041\213\047\uffdd\050\uffdd" +
    "\051\uffdd\056\uffdd\001\002\000\052\007\uffdf\012\uffdf\014" +
    "\uffdf\015\uffdf\016\uffdf\017\uffdf\023\uffdf\024\uffdf\025\uffdf" +
    "\026\uffdf\027\uffdf\030\uffdf\033\uffdf\034\uffdf\036\uffdf\041" +
    "\215\047\uffdf\050\uffdf\051\uffdf\056\uffdf\001\002\000\004" +
    "\051\316\001\002\000\054\013\156\014\uffca\015\uffca\021" +
    "\161\022\157\023\uffca\024\uffca\025\uffca\026\uffca\027\uffca" +
    "\030\uffca\031\uffca\033\151\034\145\035\150\040\162\051" +
    "\uffca\056\163\057\152\071\146\072\155\001\002\000\026" +
    "\014\246\015\251\023\245\024\250\025\243\026\253\027" +
    "\244\030\247\031\320\051\252\001\002\000\054\013\156" +
    "\014\uffca\015\uffca\021\161\022\157\023\uffca\024\uffca\025" +
    "\uffca\026\uffca\027\uffca\030\uffca\033\151\034\145\035\150" +
    "\040\162\041\uffca\051\uffca\056\163\057\152\071\146\072" +
    "\155\001\002\000\026\014\246\015\251\023\245\024\250" +
    "\025\243\026\253\027\244\030\247\041\322\051\252\001" +
    "\002\000\044\002\uffd1\004\uffd1\014\uffd1\015\uffd1\023\uffd1" +
    "\024\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\037" +
    "\uffd1\041\uffd1\042\uffd1\043\uffd1\044\uffd1\051\uffd1\001\002" +
    "\000\026\021\173\022\172\033\167\034\164\035\166\040" +
    "\176\056\175\057\170\071\146\072\155\001\002\000\072" +
    "\002\uffb6\004\uffb6\013\uffb6\014\uffb6\015\uffb6\021\uffb6\022" +
    "\uffb6\023\uffb6\024\uffb6\025\uffb6\026\uffb6\027\uffb6\030\uffb6" +
    "\031\uffb6\033\uffb6\034\uffb6\035\uffb6\037\uffb6\040\uffb6\041" +
    "\uffb6\042\uffb6\043\uffb6\044\uffb6\051\uffb6\056\uffb6\057\uffb6" +
    "\071\uffb6\072\uffb6\001\002\000\072\002\uffb5\004\uffb5\013" +
    "\uffb5\014\uffb5\015\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5" +
    "\025\uffb5\026\uffb5\027\uffb5\030\uffb5\031\uffb5\033\uffb5\034" +
    "\uffb5\035\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5" +
    "\044\uffb5\051\uffb5\056\uffb5\057\uffb5\071\uffb5\072\uffb5\001" +
    "\002\000\072\002\uffb1\004\uffb1\013\uffb1\014\uffb1\015\uffb1" +
    "\021\uffb1\022\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1\027" +
    "\uffb1\030\uffb1\031\uffb1\033\uffb1\034\uffb1\035\uffb1\037\uffb1" +
    "\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1\051\uffb1\056" +
    "\uffb1\057\uffb1\071\uffb1\072\uffb1\001\002\000\072\002\uffb3" +
    "\004\uffb3\013\uffb3\014\uffb3\015\uffb3\021\uffb3\022\uffb3\023" +
    "\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3\030\uffb3\031\uffb3" +
    "\033\uffb3\034\uffb3\035\uffb3\037\uffb3\040\uffb3\041\uffb3\042" +
    "\uffb3\043\uffb3\044\uffb3\051\uffb3\056\uffb3\057\uffb3\071\uffb3" +
    "\072\uffb3\001\002\000\054\013\156\014\uffca\015\uffca\021" +
    "\161\022\157\023\uffca\024\uffca\025\uffca\026\uffca\027\uffca" +
    "\030\uffca\033\151\034\145\035\150\040\162\041\uffca\051" +
    "\uffca\056\163\057\152\071\146\072\155\001\002\000\054" +
    "\013\156\014\uffca\015\uffca\021\161\022\157\023\uffca\024" +
    "\uffca\025\uffca\026\uffca\027\uffca\030\uffca\031\uffca\033\151" +
    "\034\145\035\150\040\162\051\uffca\056\163\057\152\071" +
    "\146\072\155\001\002\000\072\002\uffb7\004\uffb7\013\uffb7" +
    "\014\uffb7\015\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7\025" +
    "\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7\033\uffb7\034\uffb7" +
    "\035\uffb7\037\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7\044" +
    "\uffb7\051\uffb7\056\uffb7\057\uffb7\071\uffb7\072\uffb7\001\002" +
    "\000\072\002\uffb2\004\uffb2\013\uffb2\014\uffb2\015\uffb2\021" +
    "\uffb2\022\uffb2\023\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2" +
    "\030\uffb2\031\uffb2\033\uffb2\034\uffb2\035\uffb2\037\uffb2\040" +
    "\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2\051\uffb2\056\uffb2" +
    "\057\uffb2\071\uffb2\072\uffb2\001\002\000\054\013\156\014" +
    "\uffca\015\uffca\021\161\022\157\023\uffca\024\uffca\025\uffca" +
    "\026\uffca\027\uffca\030\uffca\033\151\034\145\035\150\040" +
    "\162\041\uffca\051\uffca\056\163\057\152\071\146\072\155" +
    "\001\002\000\072\002\uffb4\004\uffb4\013\uffb4\014\uffb4\015" +
    "\uffb4\021\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4" +
    "\027\uffb4\030\uffb4\031\uffb4\033\uffb4\034\uffb4\035\uffb4\037" +
    "\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\051\uffb4" +
    "\056\uffb4\057\uffb4\071\uffb4\072\uffb4\001\002\000\072\002" +
    "\uffb8\004\uffb8\013\uffb8\014\uffb8\015\uffb8\021\uffb8\022\uffb8" +
    "\023\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8\030\uffb8\031" +
    "\uffb8\033\uffb8\034\uffb8\035\uffb8\037\uffb8\040\uffb8\041\uffb8" +
    "\042\uffb8\043\uffb8\044\uffb8\051\uffb8\056\uffb8\057\uffb8\071" +
    "\uffb8\072\uffb8\001\002\000\072\002\uffaf\004\uffaf\013\uffaf" +
    "\014\uffaf\015\uffaf\021\uffaf\022\uffaf\023\uffaf\024\uffaf\025" +
    "\uffaf\026\uffaf\027\uffaf\030\uffaf\031\uffaf\033\uffaf\034\uffaf" +
    "\035\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf\044" +
    "\uffaf\051\uffaf\056\uffaf\057\uffaf\071\uffaf\072\uffaf\001\002" +
    "\000\072\002\uffb0\004\uffb0\013\uffb0\014\uffb0\015\uffb0\021" +
    "\uffb0\022\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0" +
    "\030\uffb0\031\uffb0\033\uffb0\034\uffb0\035\uffb0\037\uffb0\040" +
    "\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\051\uffb0\056\uffb0" +
    "\057\uffb0\071\uffb0\072\uffb0\001\002\000\026\014\246\015" +
    "\251\023\245\024\250\025\243\026\253\027\244\030\247" +
    "\041\342\051\252\001\002\000\044\002\uffd4\004\uffd4\014" +
    "\uffd4\015\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4" +
    "\030\uffd4\031\uffd4\037\uffd4\041\uffd4\042\uffd4\043\uffd4\044" +
    "\uffd4\051\uffd4\001\002\000\026\014\246\015\251\023\245" +
    "\024\250\025\243\026\253\027\244\030\247\031\344\051" +
    "\252\001\002\000\054\013\156\014\uffca\015\uffca\021\161" +
    "\022\157\023\uffca\024\uffca\025\uffca\026\uffca\027\uffca\030" +
    "\uffca\033\151\034\145\035\150\040\162\041\uffca\051\uffca" +
    "\056\163\057\152\071\146\072\155\001\002\000\026\014" +
    "\246\015\251\023\245\024\250\025\243\026\253\027\244" +
    "\030\247\041\346\051\252\001\002\000\044\002\uffd0\004" +
    "\uffd0\014\uffd0\015\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0" +
    "\027\uffd0\030\uffd0\031\uffd0\037\uffd0\041\uffd0\042\uffd0\043" +
    "\uffd0\044\uffd0\051\uffd0\001\002\000\026\014\246\015\251" +
    "\023\245\024\250\025\243\026\253\027\244\030\247\041" +
    "\350\051\252\001\002\000\044\002\uffd3\004\uffd3\014\uffd3" +
    "\015\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030" +
    "\uffd3\031\uffd3\037\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3" +
    "\051\uffd3\001\002\000\004\051\352\001\002\000\054\013" +
    "\156\014\uffca\015\uffca\021\161\022\157\023\uffca\024\uffca" +
    "\025\uffca\026\uffca\027\uffca\030\uffca\031\uffca\033\151\034" +
    "\145\035\150\040\162\051\uffca\056\163\057\152\071\146" +
    "\072\155\001\002\000\026\014\246\015\251\023\245\024" +
    "\250\025\243\026\253\027\244\030\247\031\354\051\252" +
    "\001\002\000\054\013\156\014\uffca\015\uffca\021\161\022" +
    "\157\023\uffca\024\uffca\025\uffca\026\uffca\027\uffca\030\uffca" +
    "\033\151\034\145\035\150\040\162\041\uffca\051\uffca\056" +
    "\163\057\152\071\146\072\155\001\002\000\026\014\246" +
    "\015\251\023\245\024\250\025\243\026\253\027\244\030" +
    "\247\041\356\051\252\001\002\000\044\002\uffd2\004\uffd2" +
    "\014\uffd2\015\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027" +
    "\uffd2\030\uffd2\031\uffd2\037\uffd2\041\uffd2\042\uffd2\043\uffd2" +
    "\044\uffd2\051\uffd2\001\002\000\052\007\uffd7\012\uffd7\014" +
    "\uffd7\015\uffd7\016\uffd7\017\uffd7\023\uffd7\024\uffd7\025\uffd7" +
    "\026\uffd7\027\uffd7\030\uffd7\033\uffd7\034\uffd7\036\uffd7\041" +
    "\217\047\uffd7\050\uffd7\051\uffd7\056\uffd7\001\002\000\052" +
    "\007\uffe1\012\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\023" +
    "\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\033\uffe1" +
    "\034\uffe1\036\uffe1\041\221\047\uffe1\050\uffe1\051\uffe1\056" +
    "\uffe1\001\002\000\052\007\uffdb\012\uffdb\014\uffdb\015\uffdb" +
    "\016\uffdb\017\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027" +
    "\uffdb\030\uffdb\033\uffdb\034\uffdb\036\uffdb\041\223\047\uffdb" +
    "\050\uffdb\051\uffdb\056\uffdb\001\002\000\052\007\uffe3\012" +
    "\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\023\uffe3\024\uffe3" +
    "\025\uffe3\026\uffe3\027\uffe3\030\uffe3\033\uffe3\034\uffe3\036" +
    "\uffe3\041\277\047\uffe3\050\uffe3\051\uffe3\056\uffe3\001\002" +
    "\000\072\002\uffdd\004\uffdd\006\uffdd\007\uffdd\012\uffdd\014" +
    "\uffdd\015\uffdd\016\uffdd\017\uffdd\023\uffdd\024\uffdd\025\uffdd" +
    "\026\uffdd\027\uffdd\030\uffdd\031\uffdd\033\uffdd\034\uffdd\036" +
    "\uffdd\037\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd\047\uffdd" +
    "\050\uffdd\051\uffdd\056\uffdd\001\002\000\072\002\uffdf\004" +
    "\uffdf\006\uffdf\007\uffdf\012\uffdf\014\uffdf\015\uffdf\016\uffdf" +
    "\017\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030" +
    "\uffdf\031\uffdf\033\uffdf\034\uffdf\036\uffdf\037\uffdf\041\uffdf" +
    "\042\uffdf\043\uffdf\044\uffdf\047\uffdf\050\uffdf\051\uffdf\056" +
    "\uffdf\001\002\000\072\002\uffd7\004\uffd7\006\uffd7\007\uffd7" +
    "\012\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\023\uffd7\024" +
    "\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\033\uffd7" +
    "\034\uffd7\036\uffd7\037\uffd7\041\uffd7\042\uffd7\043\uffd7\044" +
    "\uffd7\047\uffd7\050\uffd7\051\uffd7\056\uffd7\001\002\000\072" +
    "\002\uffe1\004\uffe1\006\uffe1\007\uffe1\012\uffe1\014\uffe1\015" +
    "\uffe1\016\uffe1\017\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1" +
    "\027\uffe1\030\uffe1\031\uffe1\033\uffe1\034\uffe1\036\uffe1\037" +
    "\uffe1\041\uffe1\042\uffe1\043\uffe1\044\uffe1\047\uffe1\050\uffe1" +
    "\051\uffe1\056\uffe1\001\002\000\072\002\uffdb\004\uffdb\006" +
    "\uffdb\007\uffdb\012\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb" +
    "\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\031" +
    "\uffdb\033\uffdb\034\uffdb\036\uffdb\037\uffdb\041\uffdb\042\uffdb" +
    "\043\uffdb\044\uffdb\047\uffdb\050\uffdb\051\uffdb\056\uffdb\001" +
    "\002\000\072\002\uffe3\004\uffe3\006\uffe3\007\uffe3\012\uffe3" +
    "\014\uffe3\015\uffe3\016\uffe3\017\uffe3\023\uffe3\024\uffe3\025" +
    "\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\033\uffe3\034\uffe3" +
    "\036\uffe3\037\uffe3\041\uffe3\042\uffe3\043\uffe3\044\uffe3\047" +
    "\uffe3\050\uffe3\051\uffe3\056\uffe3\001\002\000\026\021\173" +
    "\022\172\033\167\034\164\035\166\040\174\056\175\057" +
    "\170\071\146\072\155\001\002\000\026\021\173\022\172" +
    "\033\167\034\164\035\166\040\174\056\175\057\170\071" +
    "\146\072\155\001\002\000\026\021\173\022\172\033\167" +
    "\034\164\035\166\040\174\056\175\057\170\071\146\072" +
    "\155\001\002\000\026\021\173\022\172\033\167\034\164" +
    "\035\166\040\174\056\175\057\170\071\146\072\155\001" +
    "\002\000\024\014\246\015\251\023\245\024\250\025\243" +
    "\026\253\027\244\030\247\051\u0114\001\002\000\050\007" +
    "\336\012\340\014\246\015\251\016\333\017\327\023\245" +
    "\024\250\025\243\026\253\027\244\030\247\033\325\034" +
    "\335\036\332\047\324\050\326\051\uffb9\056\337\001\002" +
    "\000\026\021\173\022\172\033\167\034\164\035\166\040" +
    "\176\056\175\057\170\071\146\072\155\001\002\000\026" +
    "\021\173\022\172\033\167\034\164\035\166\040\174\056" +
    "\175\057\170\071\146\072\155\001\002\000\026\021\173" +
    "\022\172\033\167\034\164\035\166\040\174\056\175\057" +
    "\170\071\146\072\155\001\002\000\026\021\173\022\172" +
    "\033\167\034\164\035\166\040\174\056\175\057\170\071" +
    "\146\072\155\001\002\000\044\002\uffbd\004\uffbd\014\uffbd" +
    "\015\uffbd\023\uffbd\024\uffbd\025\uffbd\026\uffbd\027\uffbd\030" +
    "\uffbd\031\uffbd\037\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd" +
    "\051\uffbd\001\002\000\044\002\uffbc\004\uffbc\014\uffbc\015" +
    "\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc" +
    "\031\uffbc\037\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc\051" +
    "\uffbc\001\002\000\004\051\u0106\001\002\000\054\013\156" +
    "\014\uffca\015\uffca\021\161\022\157\023\uffca\024\uffca\025" +
    "\uffca\026\uffca\027\uffca\030\uffca\031\uffca\033\151\034\145" +
    "\035\150\040\162\051\uffca\056\163\057\152\071\146\072" +
    "\155\001\002\000\026\014\246\015\251\023\245\024\250" +
    "\025\243\026\253\027\244\030\247\031\u0108\051\252\001" +
    "\002\000\054\013\156\014\uffca\015\uffca\021\161\022\157" +
    "\023\uffca\024\uffca\025\uffca\026\uffca\027\uffca\030\uffca\033" +
    "\151\034\145\035\150\040\162\041\uffca\051\uffca\056\163" +
    "\057\152\071\146\072\155\001\002\000\026\014\246\015" +
    "\251\023\245\024\250\025\243\026\253\027\244\030\247" +
    "\041\u010a\051\252\001\002\000\044\002\uffc3\004\uffc3\014" +
    "\uffc3\015\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3" +
    "\030\uffc3\031\uffc3\037\uffc3\041\uffc3\042\uffc3\043\uffc3\044" +
    "\uffc3\051\uffc3\001\002\000\054\013\156\014\uffca\015\uffca" +
    "\021\161\022\157\023\uffca\024\uffca\025\uffca\026\uffca\027" +
    "\uffca\030\uffca\033\151\034\145\035\150\040\162\041\uffca" +
    "\051\uffca\056\163\057\152\071\146\072\155\001\002\000" +
    "\054\013\156\014\uffca\015\uffca\021\161\022\157\023\uffca" +
    "\024\uffca\025\uffca\026\uffca\027\uffca\030\uffca\033\151\034" +
    "\145\035\150\040\162\041\uffca\051\uffca\056\163\057\152" +
    "\071\146\072\155\001\002\000\054\013\156\014\uffca\015" +
    "\uffca\021\161\022\157\023\uffca\024\uffca\025\uffca\026\uffca" +
    "\027\uffca\030\uffca\033\151\034\145\035\150\040\162\041" +
    "\uffca\051\uffca\056\163\057\152\071\146\072\155\001\002" +
    "\000\026\014\246\015\251\023\245\024\250\025\243\026" +
    "\253\027\244\030\247\041\u010f\051\252\001\002\000\044" +
    "\002\uffce\004\uffce\014\uffce\015\uffce\023\uffce\024\uffce\025" +
    "\uffce\026\uffce\027\uffce\030\uffce\031\uffce\037\uffce\041\uffce" +
    "\042\uffce\043\uffce\044\uffce\051\uffce\001\002\000\026\014" +
    "\246\015\251\023\245\024\250\025\243\026\253\027\244" +
    "\030\247\041\u0111\051\252\001\002\000\044\002\uffcc\004" +
    "\uffcc\014\uffcc\015\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc" +
    "\027\uffcc\030\uffcc\031\uffcc\037\uffcc\041\uffcc\042\uffcc\043" +
    "\uffcc\044\uffcc\051\uffcc\001\002\000\026\014\246\015\251" +
    "\023\245\024\250\025\243\026\253\027\244\030\247\041" +
    "\u0113\051\252\001\002\000\044\002\uffc9\004\uffc9\014\uffc9" +
    "\015\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\030" +
    "\uffc9\031\uffc9\037\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9" +
    "\051\uffc9\001\002\000\054\013\156\014\uffca\015\uffca\021" +
    "\161\022\157\023\uffca\024\uffca\025\uffca\026\uffca\027\uffca" +
    "\030\uffca\031\uffca\033\151\034\145\035\150\040\162\051" +
    "\uffca\056\163\057\152\071\146\072\155\001\002\000\026" +
    "\021\173\022\172\033\167\034\164\035\166\040\174\056" +
    "\175\057\170\071\146\072\155\001\002\000\004\051\u011d" +
    "\001\002\000\004\051\u0118\001\002\000\054\013\156\014" +
    "\uffca\015\uffca\021\161\022\157\023\uffca\024\uffca\025\uffca" +
    "\026\uffca\027\uffca\030\uffca\031\uffca\033\151\034\145\035" +
    "\150\040\162\051\uffca\056\163\057\152\071\146\072\155" +
    "\001\002\000\026\014\246\015\251\023\245\024\250\025" +
    "\243\026\253\027\244\030\247\031\u011a\051\252\001\002" +
    "\000\054\013\156\014\uffca\015\uffca\021\161\022\157\023" +
    "\uffca\024\uffca\025\uffca\026\uffca\027\uffca\030\uffca\033\151" +
    "\034\145\035\150\040\162\041\uffca\051\uffca\056\163\057" +
    "\152\071\146\072\155\001\002\000\026\014\246\015\251" +
    "\023\245\024\250\025\243\026\253\027\244\030\247\041" +
    "\u011c\051\252\001\002\000\044\002\uffc5\004\uffc5\014\uffc5" +
    "\015\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5\030" +
    "\uffc5\031\uffc5\037\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5" +
    "\051\uffc5\001\002\000\054\013\156\014\uffca\015\uffca\021" +
    "\161\022\157\023\uffca\024\uffca\025\uffca\026\uffca\027\uffca" +
    "\030\uffca\031\uffca\033\151\034\145\035\150\040\162\051" +
    "\uffca\056\163\057\152\071\146\072\155\001\002\000\026" +
    "\014\246\015\251\023\245\024\250\025\243\026\253\027" +
    "\244\030\247\031\u011f\051\252\001\002\000\054\013\156" +
    "\014\uffca\015\uffca\021\161\022\157\023\uffca\024\uffca\025" +
    "\uffca\026\uffca\027\uffca\030\uffca\033\151\034\145\035\150" +
    "\040\162\041\uffca\051\uffca\056\163\057\152\071\146\072" +
    "\155\001\002\000\026\014\246\015\251\023\245\024\250" +
    "\025\243\026\253\027\244\030\247\041\u0121\051\252\001" +
    "\002\000\044\002\uffc7\004\uffc7\014\uffc7\015\uffc7\023\uffc7" +
    "\024\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\037" +
    "\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7\051\uffc7\001\002" +
    "\000\026\014\246\015\251\023\245\024\250\025\243\026" +
    "\253\027\244\030\247\031\u0123\051\252\001\002\000\054" +
    "\013\156\014\uffca\015\uffca\021\161\022\157\023\uffca\024" +
    "\uffca\025\uffca\026\uffca\027\uffca\030\uffca\033\151\034\145" +
    "\035\150\040\162\041\uffca\051\uffca\056\163\057\152\071" +
    "\146\072\155\001\002\000\026\014\246\015\251\023\245" +
    "\024\250\025\243\026\253\027\244\030\247\041\u0125\051" +
    "\252\001\002\000\044\002\uffc1\004\uffc1\014\uffc1\015\uffc1" +
    "\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1\031" +
    "\uffc1\037\uffc1\041\uffc1\042\uffc1\043\uffc1\044\uffc1\051\uffc1" +
    "\001\002\000\044\002\uffc0\004\uffc0\014\uffc0\015\uffc0\023" +
    "\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0\030\uffc0\031\uffc0" +
    "\037\uffc0\041\uffc0\042\uffc0\043\uffc0\044\uffc0\051\uffc0\001" +
    "\002\000\044\002\uffbb\004\uffbb\014\uffbb\015\uffbb\023\uffbb" +
    "\024\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb\037" +
    "\uffbb\041\uffbb\042\uffbb\043\uffbb\044\uffbb\051\uffbb\001\002" +
    "\000\044\002\uffbe\004\uffbe\014\uffbe\015\uffbe\023\uffbe\024" +
    "\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\037\uffbe" +
    "\041\uffbe\042\uffbe\043\uffbe\044\uffbe\051\uffbe\001\002\000" +
    "\044\002\uffba\004\uffba\014\uffba\015\uffba\023\uffba\024\uffba" +
    "\025\uffba\026\uffba\027\uffba\030\uffba\031\uffba\037\uffba\041" +
    "\uffba\042\uffba\043\uffba\044\uffba\051\uffba\001\002\000\004" +
    "\051\u012b\001\002\000\054\013\156\014\uffca\015\uffca\021" +
    "\161\022\157\023\uffca\024\uffca\025\uffca\026\uffca\027\uffca" +
    "\030\uffca\031\uffca\033\151\034\145\035\150\040\162\051" +
    "\uffca\056\163\057\152\071\146\072\155\001\002\000\026" +
    "\014\246\015\251\023\245\024\250\025\243\026\253\027" +
    "\244\030\247\031\u012d\051\252\001\002\000\072\002\uffca" +
    "\004\uffca\013\156\014\uffca\015\uffca\021\161\022\157\023" +
    "\uffca\024\uffca\025\uffca\026\uffca\027\uffca\030\uffca\031\uffca" +
    "\033\151\034\145\035\150\037\uffca\040\162\041\uffca\042" +
    "\uffca\043\uffca\044\uffca\051\uffca\056\163\057\152\071\146" +
    "\072\155\001\002\000\044\002\uffc4\004\uffc4\014\246\015" +
    "\251\023\245\024\250\025\243\026\253\027\244\030\247" +
    "\031\uffc4\037\uffc4\041\uffc4\042\uffc4\043\uffc4\044\uffc4\051" +
    "\252\001\002\000\072\002\uffca\004\uffca\013\156\014\uffca" +
    "\015\uffca\021\161\022\157\023\uffca\024\uffca\025\uffca\026" +
    "\uffca\027\uffca\030\uffca\031\uffca\033\151\034\145\035\150" +
    "\037\uffca\040\162\041\uffca\042\uffca\043\uffca\044\uffca\051" +
    "\uffca\056\163\057\152\071\146\072\155\001\002\000\072" +
    "\002\uffca\004\uffca\013\156\014\uffca\015\uffca\021\161\022" +
    "\157\023\uffca\024\uffca\025\uffca\026\uffca\027\uffca\030\uffca" +
    "\031\uffca\033\151\034\145\035\150\037\uffca\040\162\041" +
    "\uffca\042\uffca\043\uffca\044\uffca\051\uffca\056\163\057\152" +
    "\071\146\072\155\001\002\000\072\002\uffca\004\uffca\013" +
    "\156\014\uffca\015\uffca\021\161\022\157\023\uffca\024\uffca" +
    "\025\uffca\026\uffca\027\uffca\030\uffca\031\uffca\033\151\034" +
    "\145\035\150\037\uffca\040\162\041\uffca\042\uffca\043\uffca" +
    "\044\uffca\051\uffca\056\163\057\152\071\146\072\155\001" +
    "\002\000\044\002\uffcf\004\uffcf\014\246\015\251\023\245" +
    "\024\250\025\243\026\253\027\244\030\247\031\uffcf\037" +
    "\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf\051\252\001\002" +
    "\000\044\002\uffcd\004\uffcd\014\246\015\251\023\245\024" +
    "\250\025\243\026\253\027\244\030\247\031\uffcd\037\uffcd" +
    "\041\uffcd\042\uffcd\043\uffcd\044\uffcd\051\252\001\002\000" +
    "\044\002\uffcb\004\uffcb\014\246\015\251\023\245\024\250" +
    "\025\243\026\253\027\244\030\247\031\uffcb\037\uffcb\041" +
    "\uffcb\042\uffcb\043\uffcb\044\uffcb\051\252\001\002\000\016" +
    "\002\ufff3\004\ufff3\041\ufff3\042\ufff3\043\ufff3\044\ufff3\001" +
    "\002\000\004\045\u0137\001\002\000\040\044\036\052\031" +
    "\053\013\054\025\055\027\060\016\061\015\062\023\063" +
    "\022\064\033\065\020\066\024\067\034\070\012\072\021" +
    "\001\002\000\042\044\036\046\u0139\052\031\053\013\054" +
    "\025\055\027\060\016\061\015\062\023\063\022\064\033" +
    "\065\020\066\024\067\034\070\012\072\021\001\002\000" +
    "\004\032\u013a\001\002\000\014\002\ufffa\004\ufffa\042\ufffa" +
    "\043\ufffa\044\ufffa\001\002\000\012\005\051\035\047\040" +
    "\050\072\u0140\001\002\000\004\032\u013f\001\002\000\006" +
    "\005\041\032\u013e\001\002\000\014\002\ufffd\004\ufffd\042" +
    "\ufffd\043\ufffd\044\ufffd\001\002\000\014\002\ufffe\004\ufffe" +
    "\042\ufffe\043\ufffe\044\ufffe\001\002\000\010\005\uff9a\032" +
    "\uff9a\040\u0141\001\002\000\042\041\uff9e\044\uff9e\052\uff9e" +
    "\053\uff9e\054\uff9e\055\uff9e\060\uff9e\061\uff9e\062\uff9e\063" +
    "\uff9e\064\uff9e\065\uff9e\066\uff9e\067\uff9e\070\uff9e\072\uff9e" +
    "\001\002\000\042\041\uff90\044\036\052\031\053\013\054" +
    "\025\055\027\060\016\061\015\062\023\063\022\064\033" +
    "\065\020\066\024\067\034\070\012\072\021\001\002\000" +
    "\004\041\u0144\001\002\000\004\032\uff9d\001\002\000\014" +
    "\002\001\004\001\042\001\043\001\044\001\001\002\000" +
    "\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0144\000\006\003\003\004\010\001\001\000\004\004" +
    "\u0144\001\001\000\014\006\u013c\010\u013b\026\u013a\027\027" +
    "\030\031\001\001\000\002\001\001\000\004\002\113\001" +
    "\001\000\012\006\025\026\016\027\027\030\031\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\027\044" +
    "\030\031\001\001\000\002\001\001\000\006\027\034\030" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\060\001" +
    "\001\000\014\005\063\011\062\026\061\027\027\030\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\005\066\011\062\026\061" +
    "\027\027\030\031\001\001\000\002\001\001\000\014\005" +
    "\100\011\062\026\061\027\027\030\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\033" +
    "\074\001\001\000\014\005\075\011\062\026\061\027\027" +
    "\030\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\006\102\007\103" +
    "\026\016\027\027\030\031\001\001\000\002\001\001\000" +
    "\012\006\105\026\016\027\027\030\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\022\115" +
    "\024\121\001\001\000\002\001\001\000\004\024\u0134\001" +
    "\001\000\012\012\146\013\157\020\153\021\152\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\142\001" +
    "\001\000\002\001\001\000\004\024\141\001\001\000\004" +
    "\024\140\001\001\000\006\023\132\024\130\001\001\000" +
    "\004\024\126\001\001\000\002\001\001\000\004\024\130" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\012\146\013\157\020\367\025\u0128\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\012\146\013\157\020\366" +
    "\025\u0127\001\001\000\012\012\146\013\157\020\365\025" +
    "\u0126\001\001\000\012\012\146\013\157\020\364\025\u0125" +
    "\001\001\000\004\017\253\001\001\000\010\015\u0130\016" +
    "\u012f\017\u012e\001\001\000\002\001\001\000\010\012\146" +
    "\013\157\020\u0129\001\001\000\012\012\146\013\157\020" +
    "\363\025\u0103\001\001\000\002\001\001\000\012\012\146" +
    "\013\157\020\362\025\u0102\001\001\000\012\012\300\013" +
    "\157\020\375\021\374\001\001\000\012\012\146\013\157" +
    "\020\170\025\164\001\001\000\010\012\146\013\157\020" +
    "\367\001\001\000\002\001\001\000\010\012\146\013\157" +
    "\020\366\001\001\000\010\012\146\013\157\020\365\001" +
    "\001\000\010\012\146\013\157\020\364\001\001\000\002" +
    "\001\001\000\010\012\146\013\157\020\363\001\001\000" +
    "\010\012\146\013\157\020\362\001\001\000\010\012\300" +
    "\013\157\020\304\001\001\000\010\012\146\013\157\020" +
    "\170\001\001\000\006\012\177\013\157\001\001\000\010" +
    "\012\146\013\157\020\275\001\001\000\002\001\001\000" +
    "\010\012\146\013\157\020\221\001\001\000\010\012\146" +
    "\013\157\020\217\001\001\000\010\012\146\013\157\020" +
    "\215\001\001\000\010\012\146\013\157\020\213\001\001" +
    "\000\010\012\146\013\157\020\211\001\001\000\006\012" +
    "\177\013\157\001\001\000\010\012\146\013\157\020\207" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\274\001\001\000" +
    "\010\012\146\013\157\020\271\001\001\000\004\013\232" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\012\146\013\157\014\235\020\153\021\234" +
    "\001\001\000\004\017\253\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\012\146\013\157\020\153\021\241" +
    "\001\001\000\002\001\001\000\004\017\253\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\012\146\013\157\020\153\021\266\001\001" +
    "\000\002\001\001\000\012\012\146\013\157\020\255\025" +
    "\254\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\012\146\013\157\020\153\021\257\001\001\000\004\017" +
    "\253\001\001\000\012\012\146\013\157\020\153\021\261" +
    "\001\001\000\004\017\253\001\001\000\012\012\146\013" +
    "\157\020\153\021\263\001\001\000\004\017\253\001\001" +
    "\000\012\012\146\013\157\020\153\021\265\001\001\000" +
    "\004\017\253\001\001\000\004\017\253\001\001\000\012" +
    "\012\146\013\157\020\153\021\270\001\001\000\004\017" +
    "\253\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\012\146\013\157\020\361\001\001\000\002" +
    "\001\001\000\010\012\146\013\157\020\360\001\001\000" +
    "\010\012\146\013\157\020\357\001\001\000\010\012\146" +
    "\013\157\020\356\001\001\000\010\015\333\016\327\017" +
    "\322\001\001\000\010\012\146\013\157\020\314\001\001" +
    "\000\010\012\146\013\157\020\313\001\001\000\010\012" +
    "\146\013\157\020\312\001\001\000\010\012\146\013\157" +
    "\020\311\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\012\146\013\157" +
    "\020\153\021\316\001\001\000\004\017\253\001\001\000" +
    "\012\012\146\013\157\020\153\021\320\001\001\000\004" +
    "\017\253\001\001\000\002\001\001\000\010\012\146\013" +
    "\157\020\350\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\012\146\013" +
    "\157\020\153\021\346\001\001\000\012\012\146\013\157" +
    "\020\153\021\342\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\012\146\013\157\020\153\021\340\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\253\001\001\000\002\001\001" +
    "\000\004\017\253\001\001\000\012\012\146\013\157\020" +
    "\153\021\344\001\001\000\004\017\253\001\001\000\002" +
    "\001\001\000\004\017\253\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\012\146\013\157\020\153\021\352" +
    "\001\001\000\004\017\253\001\001\000\012\012\146\013" +
    "\157\020\153\021\354\001\001\000\004\017\253\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\012\146\013\157\020\361" +
    "\025\u0128\001\001\000\012\012\146\013\157\020\360\025" +
    "\u0127\001\001\000\012\012\146\013\157\020\357\025\u0126" +
    "\001\001\000\012\012\146\013\157\020\356\025\u0125\001" +
    "\001\000\004\017\u0114\001\001\000\010\015\u010c\016\u010b" +
    "\017\u010a\001\001\000\010\012\146\013\157\020\u0104\001" +
    "\001\000\012\012\146\013\157\020\313\025\u0103\001\001" +
    "\000\012\012\146\013\157\020\312\025\u0102\001\001\000" +
    "\012\012\146\013\157\020\311\025\164\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\012" +
    "\146\013\157\020\153\021\u0106\001\001\000\004\017\253" +
    "\001\001\000\012\012\146\013\157\020\153\021\u0108\001" +
    "\001\000\004\017\253\001\001\000\002\001\001\000\012" +
    "\012\146\013\157\020\153\021\u0111\001\001\000\012\012" +
    "\146\013\157\020\153\021\u010f\001\001\000\012\012\146" +
    "\013\157\020\153\021\u010d\001\001\000\004\017\253\001" +
    "\001\000\002\001\001\000\004\017\253\001\001\000\002" +
    "\001\001\000\004\017\253\001\001\000\002\001\001\000" +
    "\012\012\146\013\157\020\153\021\u0121\001\001\000\012" +
    "\012\146\013\157\020\u0116\025\u0115\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\012\146\013\157\020\153" +
    "\021\u0118\001\001\000\004\017\253\001\001\000\012\012" +
    "\146\013\157\020\153\021\u011a\001\001\000\004\017\253" +
    "\001\001\000\002\001\001\000\012\012\146\013\157\020" +
    "\153\021\u011d\001\001\000\004\017\253\001\001\000\012" +
    "\012\146\013\157\020\153\021\u011f\001\001\000\004\017" +
    "\253\001\001\000\002\001\001\000\004\017\253\001\001" +
    "\000\012\012\146\013\157\020\153\021\u0123\001\001\000" +
    "\004\017\253\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\012\146\013\157\020\153\021\u012b" +
    "\001\001\000\004\017\253\001\001\000\012\012\146\013" +
    "\157\020\153\021\u012d\001\001\000\004\017\253\001\001" +
    "\000\012\012\146\013\157\020\153\021\u0133\001\001\000" +
    "\012\012\146\013\157\020\153\021\u0132\001\001\000\012" +
    "\012\146\013\157\020\153\021\u0131\001\001\000\004\017" +
    "\253\001\001\000\004\017\253\001\001\000\004\017\253" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\006" +
    "\102\007\u0137\026\016\027\027\030\031\001\001\000\012" +
    "\006\105\026\016\027\027\030\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\u0141\001\001\000\014\005\u0142" +
    "\011\062\026\061\027\027\030\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public Symbol do_action(
    int                        act_num,
    lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



   
	public CodeGenerator cg = new CodeGenerator();

    public void report_error(String message, Object info) {
   
       
        StringBuilder m = new StringBuilder("Error");
   
        if (info instanceof Symbol) {
     
            Symbol s = ((Symbol) info);

            if (s.left >= 0) {                
                       m.append(" in line "+(s.left+1));   
     
                if (s.right >= 0)                    
                       m.append(", column "+(s.right+1));
            }
        }
   
        m.append(" : "+message);
   
        System.err.println(m);
    }
   
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws Exception
    {
      /* Symbol object for return from actions */
      Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // type ::= type STAR 
            {
              String RESULT =null;
		int tleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=t + "*"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",20, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // type ::= type LBRACKET NUMBER RBRACKET 
            {
              String RESULT =null;
		int tleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=t + "[" + n + "]"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",20, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // type ::= type LBRACKET RBRACKET 
            {
              String RESULT =null;
		int tleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT=t + "[]"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",20, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // type ::= pre_type 
            {
              String RESULT =null;
		int pleft = ((Symbol)CUP$parser$stack.peek()).left;
		int pright = ((Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT= p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",20, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // pre_type ::= CONST pre_type 
            {
              String RESULT =null;
		int pleft = ((Symbol)CUP$parser$stack.peek()).left;
		int pright = ((Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT="const " + p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_type",21, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // pre_type ::= UN_SIGNED pre_type 
            {
              String RESULT =null;
		int uleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int uright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object u = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((Symbol)CUP$parser$stack.peek()).left;
		int pright = ((Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT= u + " " + p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_type",21, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // pre_type ::= STRUCT ID 
            {
              String RESULT =null;
		int ileft = ((Symbol)CUP$parser$stack.peek()).left;
		int iright = ((Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT= "struct " + i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_type",21, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // pre_type ::= ID 
            {
              String RESULT =null;
		int ileft = ((Symbol)CUP$parser$stack.peek()).left;
		int iright = ((Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT= i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_type",21, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // pre_type ::= c_type 
            {
              String RESULT =null;
		int cleft = ((Symbol)CUP$parser$stack.peek()).left;
		int cright = ((Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT= c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_type",21, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // c_type ::= LDOUBLE 
            {
              String RESULT =null;
		 RESULT= "long double"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",22, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // c_type ::= DOUBLE 
            {
              String RESULT =null;
		 RESULT= "double"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",22, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // c_type ::= FLOAT 
            {
              String RESULT =null;
		 RESULT= "float"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",22, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // c_type ::= LLINT 
            {
              String RESULT =null;
		 RESULT= "long long int"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",22, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // c_type ::= LLONG 
            {
              String RESULT =null;
		 RESULT= "long long"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",22, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // c_type ::= LONG 
            {
              String RESULT =null;
		 RESULT="long"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",22, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // c_type ::= SHORT 
            {
              String RESULT =null;
		 RESULT="short"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",22, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // c_type ::= LINT 
            {
              String RESULT =null;
		 RESULT= "long int"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",22, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // c_type ::= SINT 
            {
              String RESULT =null;
		 RESULT= "short int"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",22, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // c_type ::= INT 
            {
              String RESULT =null;
		 RESULT= "int"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",22, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // c_type ::= CHAR 
            {
              String RESULT =null;
		 RESULT= "char"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_type",22, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ident_funcpointer ::= type LPAREN STAR RPAREN LPAREN NT$2 params RPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p4left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p4right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String p4 = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ps2left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ps2right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ps2 = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			func_decl funcp = parser.cg.paramsowner;
			funcp.pointer = true;
			parser.cg.paramsowner = parser.cg.params_owners.pop();
			RESULT = funcp;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident_funcpointer",7, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // NT$2 ::= 
            {
              Object RESULT =null;
		int p4left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p4right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String p4 = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

			func_decl funcp = new func_decl();
			funcp.pointer = true;
			funcp.setReturn_type(p4);
			parser.cg.params_owners.push(parser.cg.paramsowner);
			parser.cg.paramsowner = funcp;  
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",25, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // params ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",3, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // params ::= ident_funcpointer COMMA params 
            {
              Object RESULT =null;
		int p5left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p5right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object p5 = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ps2left = ((Symbol)CUP$parser$stack.peek()).left;
		int ps2right = ((Symbol)CUP$parser$stack.peek()).right;
		Object ps2 = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 
			parser.cg.paramsowner.pushParam(p5);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",3, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // params ::= ident_funcpointer 
            {
              Object RESULT =null;
		int p4left = ((Symbol)CUP$parser$stack.peek()).left;
		int p4right = ((Symbol)CUP$parser$stack.peek()).right;
		Object p4 = (Object)((Symbol) CUP$parser$stack.peek()).value;
		
			parser.cg.paramsowner.pushParam(p4);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",3, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // params ::= type COMMA DOTS 
            {
              Object RESULT =null;
		int p3left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p3right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p3 = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
			parser.cg.paramsowner.pushParam(p3);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",3, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // params ::= type COMMA params 
            {
              Object RESULT =null;
		int p2left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p2right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p2 = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int psleft = ((Symbol)CUP$parser$stack.peek()).left;
		int psright = ((Symbol)CUP$parser$stack.peek()).right;
		Object ps = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 
			parser.cg.paramsowner.pushParam(p2);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",3, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // params ::= type 
            {
              Object RESULT =null;
		int pleft = ((Symbol)CUP$parser$stack.peek()).left;
		int pright = ((Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((Symbol) CUP$parser$stack.peek()).value;
		 
			parser.cg.paramsowner.pushParam(p);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",3, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // defin ::= type LPAREN STAR ID RPAREN LPAREN NT$1 params RPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int i7left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int i7right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String i7 = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int i8left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i8right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i8 = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int psleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int psright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ps = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			func_decl funcp = parser.cg.paramsowner;
			funcp.pointer = true;
			parser.cg.var.setFuncpointer(funcp);
			parser.cg.paramsowner = parser.cg.params_owners.pop();
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("defin",4, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // NT$1 ::= 
            {
              Object RESULT =null;
		int i7left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i7right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i7 = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int i8left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i8right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i8 = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 
			parser.cg.var.setType(i7+"*");
			parser.cg.var.setID(i8);
			func_decl funcp = new func_decl();
			funcp.setID(i8);
			funcp.setReturn_type(i7+"*");
			parser.cg.params_owners.push(parser.cg.paramsowner);
			parser.cg.paramsowner = funcp;  
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",24, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // defin ::= defin LBRACKET NUMBER RBRACKET 
            {
              Object RESULT =null;
		int nleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			parser.cg.var.addArray(n);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("defin",4, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // defin ::= defin LBRACKET RBRACKET 
            {
              Object RESULT =null;
		
			parser.cg.var.addArray(0);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("defin",4, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // defin ::= type ID 
            {
              Object RESULT =null;
		int ileft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int i2left = ((Symbol)CUP$parser$stack.peek()).left;
		int i2right = ((Symbol)CUP$parser$stack.peek()).right;
		String i2 = (String)((Symbol) CUP$parser$stack.peek()).value;
		 
			parser.cg.var.setType(i);
			parser.cg.var.setID(i2);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("defin",4, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // st_body ::= st_body defin SEMI 
            {
              Object RESULT =null;
		int sleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
			parser.cg.struct.addMember(parser.cg.var);
		        parser.cg.var = new var_decl();  
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("st_body",5, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // st_body ::= defin SEMI 
            {
              Object RESULT =null;
		
			parser.cg.struct.addMember(parser.cg.var);
		        parser.cg.var = new var_decl(); 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("st_body",5, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // func ::= type ID LPAREN NT$0 params RPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e2 = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
			RESULT = e + " " + e2 + "(" + p + ");"; 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func",6, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // NT$0 ::= 
            {
              Object RESULT =null;
		int eleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 
			parser.cg.func.setReturn_type(e);
			parser.cg.func.setID(e2);
			parser.cg.paramsowner = parser.cg.func;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",23, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // macro ::= LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("macro",16, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // macro ::= LPAREN macro_params RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("macro",16, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // macro_params ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("macro_params",17, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // macro_params ::= macro_params COMMA ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("macro_params",17, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // args ::= exp3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",10, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // args ::= args COMMA exp3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",10, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // func_call ::= ID LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_call",9, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // func_call ::= ID LPAREN args RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_call",9, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // LogicalS ::= OR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalS",13, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // LogicalS ::= AND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalS",13, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // LogicalS ::= NOTEQUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalS",13, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // LogicalS ::= EQUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalS",13, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // LogicalS ::= GE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalS",13, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // LogicalS ::= GREATER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalS",13, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // LogicalS ::= LE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalS",13, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // LogicalS ::= LESS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalS",13, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // B2 ::= AMPERSAND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("B2",12, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // B2 ::= BAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("B2",12, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // B2 ::= HAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("B2",12, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // B2 ::= GG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("B2",12, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // B2 ::= LL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("B2",12, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Ar2 ::= MINUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ar2",11, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Ar2 ::= PLUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ar2",11, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Ar2 ::= PERCENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ar2",11, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Ar2 ::= DIVIDE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ar2",11, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Ar2 ::= ASSIGN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ar2",11, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // exp3 ::= exp2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",15, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // exp3 ::= MINUS exp3L 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",15, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // exp3 ::= PLUS exp3L 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",15, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // exp3 ::= PP exp3L 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",15, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // exp3 ::= MM exp3L 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",15, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // exp3 ::= STAR exp3L 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",15, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // exp3 ::= AMPERSAND exp3L 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",15, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // exp3 ::= TILDE exp3L 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",15, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // exp3 ::= LPAREN exp3 QUESTIONMARK exp3 COLON exp3 RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",15, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // exp3 ::= exp3 QUESTIONMARK exp3 COLON exp3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",15, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // exp3 ::= LPAREN BARDOT exp2 QUESTIONMARK exp3 COLON exp3 RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",15, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // exp3 ::= BARDOT exp2 QUESTIONMARK exp3 COLON exp3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",15, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // exp3 ::= LPAREN exp3 LogicalS exp2 QUESTIONMARK exp3 COLON exp3 RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",15, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // exp3 ::= exp3 LogicalS exp2 QUESTIONMARK exp3 COLON exp3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",15, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // exp3 ::= LPAREN exp3 LogicalS exp3L QUESTIONMARK exp3 COLON exp3 RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",15, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // exp3 ::= exp3 LogicalS exp3L QUESTIONMARK exp3 COLON exp3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",15, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // exp3 ::= LPAREN exp2 LogicalS exp3 RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",15, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exp3 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",15, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exp3 ::= exp2 LogicalS exp3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",15, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp3 ::= LPAREN exp2 B2 exp3 RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",15, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp3 ::= exp2 B2 exp3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",15, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp3 ::= LPAREN exp2 Ar2 exp3 RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",15, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp3 ::= exp2 Ar2 exp3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",15, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp3L ::= LPAREN exp2 QUESTIONMARK exp3 COLON exp3 RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3L",19, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp3L ::= LPAREN BARDOT exp2 QUESTIONMARK exp3 COLON exp3 RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3L",19, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp3L ::= LPAREN exp2 LogicalS exp2 QUESTIONMARK exp3 COLON exp3 RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3L",19, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp3L ::= LPAREN exp2 B2 exp3 RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3L",19, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp3L ::= LPAREN exp2 Ar2 exp3 RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3L",19, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp2 ::= exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",14, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp2 ::= LPAREN TILDE exp2 RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",14, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp2 ::= TILDE exp2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",14, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp2 ::= LPAREN AMPERSAND exp2 RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",14, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp2 ::= AMPERSAND exp2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",14, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exp2 ::= LPAREN STAR exp2 RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",14, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exp2 ::= STAR exp2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",14, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exp2 ::= LPAREN MM exp2 RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",14, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exp2 ::= MM exp2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",14, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exp2 ::= LPAREN PP exp2 RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",14, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exp2 ::= PP exp2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",14, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exp2 ::= LPAREN PLUS exp2 RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",14, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exp2 ::= PLUS exp2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",14, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // exp2 ::= LPAREN MINUS exp2 RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",14, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exp2 ::= MINUS exp2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",14, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp ::= LPAREN exp RPAREN 
            {
              Object RESULT =null;
		int eleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= "("+e+")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp ::= exp PP 
            {
              Object RESULT =null;
		int eleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= e+"++"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // exp ::= exp MM 
            {
              Object RESULT =null;
		int eleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= e+"--"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // exp ::= exp PREF ID 
            {
              Object RESULT =null;
		int eleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((Symbol)CUP$parser$stack.peek()).left;
		int iright = ((Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT= e+"->";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // exp ::= exp PREF func_call 
            {
              Object RESULT =null;
		int eleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((Symbol)CUP$parser$stack.peek()).left;
		int fright = ((Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT= e+"->"+f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // exp ::= exp DOT ID 
            {
              Object RESULT =null;
		int eleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((Symbol)CUP$parser$stack.peek()).left;
		int iright = ((Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT= e+"."+i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // exp ::= exp DOT func_call 
            {
              Object RESULT =null;
		int eleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((Symbol)CUP$parser$stack.peek()).left;
		int fright = ((Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT= e+"."+f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // exp ::= exp LBRACKET exp2 RBRACKET 
            {
              Object RESULT =null;
		int eleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e2 = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= e+"["+e2+"]";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // exp ::= func_call 
            {
              Object RESULT =null;
		int fleft = ((Symbol)CUP$parser$stack.peek()).left;
		int fright = ((Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT= f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // exp ::= ID 
            {
              Object RESULT =null;
		int ileft = ((Symbol)CUP$parser$stack.peek()).left;
		int iright = ((Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT= i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // exp ::= NUMBER 
            {
              Object RESULT =null;
		int nleft = ((Symbol)CUP$parser$stack.peek()).left;
		int nright = ((Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT= n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // def_value ::= LPAREN def_value RPAREN 
            {
              Object RESULT =null;
		int dleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= "("+d+")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_value",18, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // def_value ::= BARDOT def_value 
            {
              Object RESULT =null;
		int dleft = ((Symbol)CUP$parser$stack.peek()).left;
		int dright = ((Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT= "!"+d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_value",18, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // def_value ::= STAR def_value 
            {
              Object RESULT =null;
		int dleft = ((Symbol)CUP$parser$stack.peek()).left;
		int dright = ((Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT= "*"+d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_value",18, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // def_value ::= AMPERSAND def_value 
            {
              Object RESULT =null;
		int dleft = ((Symbol)CUP$parser$stack.peek()).left;
		int dright = ((Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT= "&"+d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_value",18, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // def_value ::= MINUS def_value 
            {
              Object RESULT =null;
		int dleft = ((Symbol)CUP$parser$stack.peek()).left;
		int dright = ((Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT= "-"+d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_value",18, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // def_value ::= PLUS def_value 
            {
              Object RESULT =null;
		int dleft = ((Symbol)CUP$parser$stack.peek()).left;
		int dright = ((Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT= "+" + d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_value",18, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // def_value ::= NUMBER 
            {
              Object RESULT =null;
		int nleft = ((Symbol)CUP$parser$stack.peek()).left;
		int nright = ((Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT=n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_value",18, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // def_body ::= ID STRUCT ID 
            {
              Object RESULT =null;
		int ileft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((Symbol)CUP$parser$stack.peek()).left;
		int vright = ((Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((Symbol) CUP$parser$stack.peek()).value;
		
			def_expr dx = new def_expr();
			dx.ID = i;
			dx.exp = v;
			dx.isStruct = true;
			parser.cg.defines.add(dx);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_body",0, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // def_body ::= ID macro exp3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_body",0, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // def_body ::= ID def_value 
            {
              Object RESULT =null;
		int ileft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vleft = ((Symbol)CUP$parser$stack.peek()).left;
		int vright = ((Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 
			def_expr dx = new def_expr();
			dx.ID = i;
			dx.exp = v;
			parser.cg.defines.add(dx);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_body",0, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // code_part ::= DEFINE def_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_part",2, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // code_part ::= STRUCT ID LQ st_body RQ SEMI 
            {
              Object RESULT =null;
		int ileft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
			parser.cg.struct.setName(i);
			parser.cg.declareStruct(); 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_part",2, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // code_part ::= TYPEDEF STRUCT LQ st_body RQ ID SEMI 
            {
              Object RESULT =null;
		int sleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object s = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.cg.declareTypedef_struct(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_part",2, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // code_part ::= TYPEDEF defin SEMI 
            {
              Object RESULT =null;
		int d2left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int d2right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d2 = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.cg.declareTypedef_var(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_part",2, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // code_part ::= EXTERN defin SEMI 
            {
              Object RESULT =null;
		int dleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.cg.declareVar(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_part",2, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // code_part ::= EXTERN func SEMI 
            {
              Object RESULT =null;
		int fleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object f = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.cg.declareFunc(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_part",2, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= code_part 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",1, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= program code_part 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",1, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

